// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBReadConsentResponse1 o b read consent response1
//
// swagger:model OBReadConsentResponse1
type OBReadConsentResponse1 struct {

	// data
	// Required: true
	Data *OBReadConsentResponse1Data `json:"Data"`

	// links
	Links *Links `json:"Links,omitempty"`

	// meta
	Meta *Meta `json:"Meta,omitempty"`

	// risk
	// Required: true
	Risk OBRisk2 `json:"Risk"`
}

// Validate validates this o b read consent response1
func (m *OBReadConsentResponse1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadConsentResponse1) validateData(formats strfmt.Registry) error {

	if err := validate.Required("Data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1) validateRisk(formats strfmt.Registry) error {

	if m.Risk == nil {
		return errors.Required("Risk", "body", nil)
	}

	return nil
}

// ContextValidate validate this o b read consent response1 based on the context it is used
func (m *OBReadConsentResponse1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadConsentResponse1) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadConsentResponse1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadConsentResponse1) UnmarshalBinary(b []byte) error {
	var res OBReadConsentResponse1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadConsentResponse1Data o b read consent response1 data
//
// swagger:model OBReadConsentResponse1Data
type OBReadConsentResponse1Data struct {

	// Unique identification as assigned to identify the account access consent resource.
	// Required: true
	// Max Length: 128
	// Min Length: 1
	ConsentID *string `json:"ConsentId"`

	// creation date time
	// Required: true
	// Format: date-time
	CreationDateTime *CreationDateTime `json:"CreationDateTime"`

	// Specified date and time the permissions will expire.
	// If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	ExpirationDateTime strfmt.DateTime `json:"ExpirationDateTime,omitempty"`

	// permissions
	// Required: true
	// Min Items: 1
	Permissions []string `json:"Permissions"`

	// Specifies the status of consent resource in code form.
	// Required: true
	// Enum: [Authorised AwaitingAuthorisation Rejected Revoked]
	Status *string `json:"Status"`

	// status update date time
	// Required: true
	// Format: date-time
	StatusUpdateDateTime *StatusUpdateDateTime `json:"StatusUpdateDateTime"`

	// Specified start date and time for the transaction query period.
	// If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	TransactionFromDateTime strfmt.DateTime `json:"TransactionFromDateTime,omitempty"`

	// Specified end date and time for the transaction query period.
	// If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	TransactionToDateTime strfmt.DateTime `json:"TransactionToDateTime,omitempty"`
}

// Validate validates this o b read consent response1 data
func (m *OBReadConsentResponse1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusUpdateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionFromDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionToDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadConsentResponse1Data) validateConsentID(formats strfmt.Registry) error {

	if err := validate.Required("Data"+"."+"ConsentId", "body", m.ConsentID); err != nil {
		return err
	}

	if err := validate.MinLength("Data"+"."+"ConsentId", "body", *m.ConsentID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Data"+"."+"ConsentId", "body", *m.ConsentID, 128); err != nil {
		return err
	}

	return nil
}

func (m *OBReadConsentResponse1Data) validateCreationDateTime(formats strfmt.Registry) error {

	if err := validate.Required("Data"+"."+"CreationDateTime", "body", m.CreationDateTime); err != nil {
		return err
	}

	if err := validate.Required("Data"+"."+"CreationDateTime", "body", m.CreationDateTime); err != nil {
		return err
	}

	if m.CreationDateTime != nil {
		if err := m.CreationDateTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data" + "." + "CreationDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1Data) validateExpirationDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("Data"+"."+"ExpirationDateTime", "body", "date-time", m.ExpirationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var oBReadConsentResponse1DataPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ReadAccountsBasic","ReadAccountsDetail","ReadBalances","ReadBeneficiariesBasic","ReadBeneficiariesDetail","ReadDirectDebits","ReadOffers","ReadPAN","ReadParty","ReadPartyPSU","ReadProducts","ReadScheduledPaymentsBasic","ReadScheduledPaymentsDetail","ReadStandingOrdersBasic","ReadStandingOrdersDetail","ReadStatementsBasic","ReadStatementsDetail","ReadTransactionsBasic","ReadTransactionsCredits","ReadTransactionsDebits","ReadTransactionsDetail"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadConsentResponse1DataPermissionsItemsEnum = append(oBReadConsentResponse1DataPermissionsItemsEnum, v)
	}
}

func (m *OBReadConsentResponse1Data) validatePermissionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadConsentResponse1DataPermissionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadConsentResponse1Data) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("Data"+"."+"Permissions", "body", m.Permissions); err != nil {
		return err
	}

	iPermissionsSize := int64(len(m.Permissions))

	if err := validate.MinItems("Data"+"."+"Permissions", "body", iPermissionsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Permissions); i++ {

		// value enum
		if err := m.validatePermissionsItemsEnum("Data"+"."+"Permissions"+"."+strconv.Itoa(i), "body", m.Permissions[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBReadConsentResponse1DataTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Authorised","AwaitingAuthorisation","Rejected","Revoked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadConsentResponse1DataTypeStatusPropEnum = append(oBReadConsentResponse1DataTypeStatusPropEnum, v)
	}
}

const (

	// OBReadConsentResponse1DataStatusAuthorised captures enum value "Authorised"
	OBReadConsentResponse1DataStatusAuthorised string = "Authorised"

	// OBReadConsentResponse1DataStatusAwaitingAuthorisation captures enum value "AwaitingAuthorisation"
	OBReadConsentResponse1DataStatusAwaitingAuthorisation string = "AwaitingAuthorisation"

	// OBReadConsentResponse1DataStatusRejected captures enum value "Rejected"
	OBReadConsentResponse1DataStatusRejected string = "Rejected"

	// OBReadConsentResponse1DataStatusRevoked captures enum value "Revoked"
	OBReadConsentResponse1DataStatusRevoked string = "Revoked"
)

// prop value enum
func (m *OBReadConsentResponse1Data) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadConsentResponse1DataTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadConsentResponse1Data) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Data"+"."+"Status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("Data"+"."+"Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *OBReadConsentResponse1Data) validateStatusUpdateDateTime(formats strfmt.Registry) error {

	if err := validate.Required("Data"+"."+"StatusUpdateDateTime", "body", m.StatusUpdateDateTime); err != nil {
		return err
	}

	if err := validate.Required("Data"+"."+"StatusUpdateDateTime", "body", m.StatusUpdateDateTime); err != nil {
		return err
	}

	if m.StatusUpdateDateTime != nil {
		if err := m.StatusUpdateDateTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data" + "." + "StatusUpdateDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1Data) validateTransactionFromDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionFromDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("Data"+"."+"TransactionFromDateTime", "body", "date-time", m.TransactionFromDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBReadConsentResponse1Data) validateTransactionToDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionToDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("Data"+"."+"TransactionToDateTime", "body", "date-time", m.TransactionToDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read consent response1 data based on the context it is used
func (m *OBReadConsentResponse1Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreationDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusUpdateDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadConsentResponse1Data) contextValidateCreationDateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationDateTime != nil {
		if err := m.CreationDateTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data" + "." + "CreationDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsentResponse1Data) contextValidateStatusUpdateDateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusUpdateDateTime != nil {
		if err := m.StatusUpdateDateTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data" + "." + "StatusUpdateDateTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadConsentResponse1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadConsentResponse1Data) UnmarshalBinary(b []byte) error {
	var res OBReadConsentResponse1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
