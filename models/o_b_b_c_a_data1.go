// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBBCAData1 BCA
//
// swagger:model OBBCAData1
type OBBCAData1 struct {

	// credit interest
	CreditInterest *OBBCAData1CreditInterest `json:"CreditInterest,omitempty"`

	// OtherFeesCharges
	//
	// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
	OtherFeesCharges []*OBBCAData1OtherFeesChargesItems0 `json:"OtherFeesCharges"`

	// overdraft
	Overdraft *OBBCAData1Overdraft `json:"Overdraft,omitempty"`

	// product details
	ProductDetails *OBBCAData1ProductDetails `json:"ProductDetails,omitempty"`
}

// Validate validates this o b b c a data1
func (m *OBBCAData1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1) validateCreditInterest(formats strfmt.Registry) error {
	if swag.IsZero(m.CreditInterest) { // not required
		return nil
	}

	if m.CreditInterest != nil {
		if err := m.CreditInterest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1) validateOtherFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeesCharges); i++ {
		if swag.IsZero(m.OtherFeesCharges[i]) { // not required
			continue
		}

		if m.OtherFeesCharges[i] != nil {
			if err := m.OtherFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1) validateOverdraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Overdraft) { // not required
		return nil
	}

	if m.Overdraft != nil {
		if err := m.Overdraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Overdraft")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1) validateProductDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductDetails) { // not required
		return nil
	}

	if m.ProductDetails != nil {
		if err := m.ProductDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b b c a data1 based on the context it is used
func (m *OBBCAData1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreditInterest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1) contextValidateCreditInterest(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditInterest != nil {
		if err := m.CreditInterest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1) contextValidateOtherFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeesCharges); i++ {

		if m.OtherFeesCharges[i] != nil {
			if err := m.OtherFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1) contextValidateOverdraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Overdraft != nil {
		if err := m.Overdraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Overdraft")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1) contextValidateProductDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductDetails != nil {
		if err := m.ProductDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1) UnmarshalBinary(b []byte) error {
	var res OBBCAData1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1CreditInterest CreditInterest
//
// Details about the interest that may be payable to the BCA account holders
//
// swagger:model OBBCAData1CreditInterest
type OBBCAData1CreditInterest struct {

	// TierBandSet
	//
	// The group of tiers or bands for which credit interest can be applied.
	// Required: true
	// Min Items: 1
	TierBandSet []*OBBCAData1CreditInterestTierBandSetItems0 `json:"TierBandSet"`
}

// Validate validates this o b b c a data1 credit interest
func (m *OBBCAData1CreditInterest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTierBandSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterest) validateTierBandSet(formats strfmt.Registry) error {

	if err := validate.Required("CreditInterest"+"."+"TierBandSet", "body", m.TierBandSet); err != nil {
		return err
	}

	iTierBandSetSize := int64(len(m.TierBandSet))

	if err := validate.MinItems("CreditInterest"+"."+"TierBandSet", "body", iTierBandSetSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TierBandSet); i++ {
		if swag.IsZero(m.TierBandSet[i]) { // not required
			continue
		}

		if m.TierBandSet[i] != nil {
			if err := m.TierBandSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreditInterest" + "." + "TierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 credit interest based on the context it is used
func (m *OBBCAData1CreditInterest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTierBandSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterest) contextValidateTierBandSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TierBandSet); i++ {

		if m.TierBandSet[i] != nil {
			if err := m.TierBandSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreditInterest" + "." + "TierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1CreditInterest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1CreditInterest) UnmarshalBinary(b []byte) error {
	var res OBBCAData1CreditInterest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1CreditInterestTierBandSetItems0 The group of tiers or bands for which credit interest can be applied.
//
// swagger:model OBBCAData1CreditInterestTierBandSetItems0
type OBBCAData1CreditInterestTierBandSetItems0 struct {

	// CalculationMethod
	//
	// Methods of calculating interest
	// Enum: [Compound SimpleInterest]
	CalculationMethod string `json:"CalculationMethod,omitempty"`

	// Destination
	//
	// Describes whether accrued interest is payable only to the BCA or to another bank account
	// Required: true
	// Enum: [PayAway SelfCredit]
	Destination *string `json:"Destination"`

	// Notes
	//
	// Optional additional notes to supplement the Tier Band Set details
	Notes []string `json:"Notes"`

	// TierBand
	//
	// Tier Band Details
	// Required: true
	// Min Items: 1
	TierBand []*OBBCAData1CreditInterestTierBandSetItems0TierBandItems0 `json:"TierBand"`

	// TierBandMethod
	//
	// The methodology of how credit interest is paid/applied. It can be:-
	//
	// 1. Banded
	// Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
	//
	// 2. Tiered
	// Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
	//
	// 3. Whole
	// The same interest rate is applied irrespective of the BCA balance
	// Required: true
	// Enum: [Banded Tiered Whole]
	TierBandMethod *string `json:"TierBandMethod"`
}

// Validate validates this o b b c a data1 credit interest tier band set items0
func (m *OBBCAData1CreditInterestTierBandSetItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBandMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Compound","SimpleInterest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0CalculationMethodCompound captures enum value "Compound"
	OBBCAData1CreditInterestTierBandSetItems0CalculationMethodCompound string = "Compound"

	// OBBCAData1CreditInterestTierBandSetItems0CalculationMethodSimpleInterest captures enum value "SimpleInterest"
	OBBCAData1CreditInterestTierBandSetItems0CalculationMethodSimpleInterest string = "SimpleInterest"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0) validateCalculationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0) validateCalculationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationMethodEnum("CalculationMethod", "body", m.CalculationMethod); err != nil {
		return err
	}

	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PayAway","SelfCredit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0DestinationPayAway captures enum value "PayAway"
	OBBCAData1CreditInterestTierBandSetItems0DestinationPayAway string = "PayAway"

	// OBBCAData1CreditInterestTierBandSetItems0DestinationSelfCredit captures enum value "SelfCredit"
	OBBCAData1CreditInterestTierBandSetItems0DestinationSelfCredit string = "SelfCredit"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0) validateDestinationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("Destination", "body", m.Destination); err != nil {
		return err
	}

	// value enum
	if err := m.validateDestinationEnum("Destination", "body", *m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0) validateTierBand(formats strfmt.Registry) error {

	if err := validate.Required("TierBand", "body", m.TierBand); err != nil {
		return err
	}

	iTierBandSize := int64(len(m.TierBand))

	if err := validate.MinItems("TierBand", "body", iTierBandSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TierBand); i++ {
		if swag.IsZero(m.TierBand[i]) { // not required
			continue
		}

		if m.TierBand[i] != nil {
			if err := m.TierBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Banded","Tiered","Whole"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0TierBandMethodBanded captures enum value "Banded"
	OBBCAData1CreditInterestTierBandSetItems0TierBandMethodBanded string = "Banded"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandMethodTiered captures enum value "Tiered"
	OBBCAData1CreditInterestTierBandSetItems0TierBandMethodTiered string = "Tiered"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandMethodWhole captures enum value "Whole"
	OBBCAData1CreditInterestTierBandSetItems0TierBandMethodWhole string = "Whole"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0) validateTierBandMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0) validateTierBandMethod(formats strfmt.Registry) error {

	if err := validate.Required("TierBandMethod", "body", m.TierBandMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierBandMethodEnum("TierBandMethod", "body", *m.TierBandMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b b c a data1 credit interest tier band set items0 based on the context it is used
func (m *OBBCAData1CreditInterestTierBandSetItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTierBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0) contextValidateTierBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TierBand); i++ {

		if m.TierBand[i] != nil {
			if err := m.TierBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1CreditInterestTierBandSetItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0 Tier Band Details
//
// swagger:model OBBCAData1CreditInterestTierBandSetItems0TierBandItems0
type OBBCAData1CreditInterestTierBandSetItems0TierBandItems0 struct {

	// AER
	//
	// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.
	//
	// Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
	// Required: true
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	AER *string `json:"AER"`

	// ApplicationFrequency
	//
	// How often is interest applied to the BCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's BCA.
	// Required: true
	// Enum: [Daily HalfYearly Monthly Other Quarterly PerStatementDate Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// BankInterestRate
	//
	// Bank Interest for the BCA product
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	BankInterestRate string `json:"BankInterestRate,omitempty"`

	// BankInterestRateType
	//
	// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the BCA.
	// Enum: [Gross Other]
	BankInterestRateType string `json:"BankInterestRateType,omitempty"`

	// CalculationFrequency
	//
	// How often is credit interest calculated for the account.
	// Enum: [Daily HalfYearly Monthly Other Quarterly PerStatementDate Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// DepositInterestAppliedCoverage
	//
	// Amount on which Interest applied.
	// Enum: [Banded Tiered Whole]
	DepositInterestAppliedCoverage string `json:"DepositInterestAppliedCoverage,omitempty"`

	// FixedVariableInterestRateType
	//
	// Type of interest rate, Fixed or Variable
	// Required: true
	// Enum: [Fixed Variable]
	FixedVariableInterestRateType *string `json:"FixedVariableInterestRateType"`

	// Identification
	//
	// Unique and unambiguous identification of a  Tier Band for a BCA.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the Tier Band details
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other bank interest type
	OtherBankInterestType *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType `json:"OtherBankInterestType,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// TierValueMaximum
	//
	// Maximum deposit value for which the credit interest tier applies.
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMaximum string `json:"TierValueMaximum,omitempty"`

	// TierValueMinimum
	//
	// Minimum deposit value for which the credit interest tier applies.
	// Required: true
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMinimum *string `json:"TierValueMinimum"`
}

// Validate validates this o b b c a data1 credit interest tier band set items0 tier band items0
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankInterestRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepositInterestAppliedCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedVariableInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherBankInterestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMinimum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateAER(formats strfmt.Registry) error {

	if err := validate.Required("AER", "body", m.AER); err != nil {
		return err
	}

	if err := validate.Pattern("AER", "body", *m.AER, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Daily","HalfYearly","Monthly","Other","Quarterly","PerStatementDate","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyDaily string = "Daily"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyHalfYearly captures enum value "HalfYearly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyHalfYearly string = "HalfYearly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyOther captures enum value "Other"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyOther string = "Other"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyPerStatementDate captures enum value "PerStatementDate"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyPerStatementDate string = "PerStatementDate"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRate(formats strfmt.Registry) error {
	if swag.IsZero(m.BankInterestRate) { // not required
		return nil
	}

	if err := validate.Pattern("BankInterestRate", "body", m.BankInterestRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Gross","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeGross captures enum value "Gross"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeGross string = "Gross"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeOther captures enum value "Other"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeOther string = "Other"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.BankInterestRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBankInterestRateTypeEnum("BankInterestRateType", "body", m.BankInterestRateType); err != nil {
		return err
	}

	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Daily","HalfYearly","Monthly","Other","Quarterly","PerStatementDate","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyDaily captures enum value "Daily"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyDaily string = "Daily"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyHalfYearly captures enum value "HalfYearly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyHalfYearly string = "HalfYearly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyMonthly string = "Monthly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyOther captures enum value "Other"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyOther string = "Other"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyPerStatementDate captures enum value "PerStatementDate"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyPerStatementDate string = "PerStatementDate"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyWeekly string = "Weekly"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Banded","Tiered","Whole"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageBanded captures enum value "Banded"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageBanded string = "Banded"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageTiered captures enum value "Tiered"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageTiered string = "Tiered"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageWhole captures enum value "Whole"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageWhole string = "Whole"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateDepositInterestAppliedCoverageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateDepositInterestAppliedCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.DepositInterestAppliedCoverage) { // not required
		return nil
	}

	// value enum
	if err := m.validateDepositInterestAppliedCoverageEnum("DepositInterestAppliedCoverage", "body", m.DepositInterestAppliedCoverage); err != nil {
		return err
	}

	return nil
}

var oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Fixed","Variable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum = append(oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum, v)
	}
}

const (

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeFixed captures enum value "Fixed"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeFixed string = "Fixed"

	// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeVariable captures enum value "Variable"
	OBBCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeVariable string = "Variable"
)

// prop value enum
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateFixedVariableInterestRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateFixedVariableInterestRateType(formats strfmt.Registry) error {

	if err := validate.Required("FixedVariableInterestRateType", "body", m.FixedVariableInterestRateType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFixedVariableInterestRateTypeEnum("FixedVariableInterestRateType", "body", *m.FixedVariableInterestRateType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateOtherBankInterestType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherBankInterestType) { // not required
		return nil
	}

	if m.OtherBankInterestType != nil {
		if err := m.OtherBankInterestType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateTierValueMaximum(formats strfmt.Registry) error {
	if swag.IsZero(m.TierValueMaximum) { // not required
		return nil
	}

	if err := validate.Pattern("TierValueMaximum", "body", m.TierValueMaximum, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) validateTierValueMinimum(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMinimum", "body", m.TierValueMinimum); err != nil {
		return err
	}

	if err := validate.Pattern("TierValueMinimum", "body", *m.TierValueMinimum, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b b c a data1 credit interest tier band set items0 tier band items0 based on the context it is used
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherBankInterestType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherBankInterestType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherBankInterestType != nil {
		if err := m.OtherBankInterestType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1CreditInterestTierBandSetItems0TierBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies that are not available in the standard code list
//
// swagger:model OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency
type OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 credit interest tier band set items0 tier band items0 other application frequency
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 credit interest tier band set items0 tier band items0 other application frequency based on context it is used
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType OtherBankInterestType
//
// Other interest rate types which are not available in the standard code list
//
// swagger:model OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType
type OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 credit interest tier band set items0 tier band items0 other bank interest type
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherBankInterestType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherBankInterestType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherBankInterestType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherBankInterestType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherBankInterestType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherBankInterestType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherBankInterestType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherBankInterestType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherBankInterestType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 credit interest tier band set items0 tier band items0 other bank interest type based on context it is used
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in the standard code set.
//
// swagger:model OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency
type OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 credit interest tier band set items0 tier band items0 other calculation frequency
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 credit interest tier band set items0 tier band items0 other calculation frequency based on context it is used
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0 Contains details of fees and charges which are not associated with either Overdraft or features/benefits
//
// swagger:model OBBCAData1OtherFeesChargesItems0
type OBBCAData1OtherFeesChargesItems0 struct {

	// FeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
	FeeChargeCap []*OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0 `json:"FeeChargeCap"`

	// FeeChargeDetail
	//
	// Other fees/charges details
	// Required: true
	// Min Items: 1
	FeeChargeDetail []*OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0 `json:"FeeChargeDetail"`

	// other tariff type
	OtherTariffType *OBBCAData1OtherFeesChargesItems0OtherTariffType `json:"OtherTariffType,omitempty"`

	// TariffName
	//
	// Name of the tariff
	// Max Length: 350
	// Min Length: 1
	TariffName string `json:"TariffName,omitempty"`

	// TariffType
	//
	// TariffType which defines the fee and charges.
	// Enum: [Electronic Mixed Other]
	TariffType string `json:"TariffType,omitempty"`
}

// Validate validates this o b b c a data1 other fees charges items0
func (m *OBBCAData1OtherFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherTariffType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTariffName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTariffType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) validateFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.FeeChargeCap); i++ {
		if swag.IsZero(m.FeeChargeCap[i]) { // not required
			continue
		}

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) validateFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("FeeChargeDetail", "body", m.FeeChargeDetail); err != nil {
		return err
	}

	iFeeChargeDetailSize := int64(len(m.FeeChargeDetail))

	if err := validate.MinItems("FeeChargeDetail", "body", iFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeChargeDetail); i++ {
		if swag.IsZero(m.FeeChargeDetail[i]) { // not required
			continue
		}

		if m.FeeChargeDetail[i] != nil {
			if err := m.FeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) validateOtherTariffType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherTariffType) { // not required
		return nil
	}

	if m.OtherTariffType != nil {
		if err := m.OtherTariffType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) validateTariffName(formats strfmt.Registry) error {
	if swag.IsZero(m.TariffName) { // not required
		return nil
	}

	if err := validate.MinLength("TariffName", "body", m.TariffName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("TariffName", "body", m.TariffName, 350); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0TypeTariffTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Electronic","Mixed","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0TypeTariffTypePropEnum = append(oBBCAData1OtherFeesChargesItems0TypeTariffTypePropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0TariffTypeElectronic captures enum value "Electronic"
	OBBCAData1OtherFeesChargesItems0TariffTypeElectronic string = "Electronic"

	// OBBCAData1OtherFeesChargesItems0TariffTypeMixed captures enum value "Mixed"
	OBBCAData1OtherFeesChargesItems0TariffTypeMixed string = "Mixed"

	// OBBCAData1OtherFeesChargesItems0TariffTypeOther captures enum value "Other"
	OBBCAData1OtherFeesChargesItems0TariffTypeOther string = "Other"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0) validateTariffTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0TypeTariffTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) validateTariffType(formats strfmt.Registry) error {
	if swag.IsZero(m.TariffType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTariffTypeEnum("TariffType", "body", m.TariffType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b b c a data1 other fees charges items0 based on the context it is used
func (m *OBBCAData1OtherFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherTariffType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) contextValidateFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeCap); i++ {

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) contextValidateFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeDetail); i++ {

		if m.FeeChargeDetail[i] != nil {
			if err := m.FeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0) contextValidateOtherTariffType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherTariffType != nil {
		if err := m.OtherTariffType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular or group of fee/charge
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0
type OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Min Max type
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Free text for adding  extra details for fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge cap items0
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Other","ServiceCAccountFee","ServiceCAccountFeeMonthly","ServiceCAccountFeeQuarterly","ServiceCFixedTariff","ServiceCBusiDepAccBreakage","ServiceCMinimumMonthlyFee","ServiceCOther"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 other fees charges items0 fee charge cap items0 based on the context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0
type OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge cap items0 other fee type items0
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge cap items0 other fee type items0 based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0 Other fees/charges details
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0 struct {

	// ApplicationFrequency
	//
	// How frequently the fee/charge is applied to the account
	// Required: true
	// Enum: [OnClosing OnOpening ChargingPeriod Daily PerItem Monthly OnAnniversary Other PerHundredPounds PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// CalculationFrequency
	//
	// How frequently the fee/charge is calculated
	// Enum: [OnClosing OnOpening ChargingPeriod Daily PerItem Monthly OnAnniversary Other PerHundredPounds PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// FeeAmount
	//
	// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeAmount string `json:"FeeAmount,omitempty"`

	// fee applicable range
	FeeApplicableRange *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange `json:"FeeApplicableRange,omitempty"`

	// FeeCategory
	//
	// Categorisation of fees and charges into standard categories.
	// Required: true
	// Enum: [Other Servicing]
	FeeCategory *string `json:"FeeCategory"`

	// FeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
	FeeChargeCap []*OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0 `json:"FeeChargeCap"`

	// FeeRate
	//
	// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	FeeRate string `json:"FeeRate,omitempty"`

	// FeeRateType
	//
	// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
	// Enum: [Gross Other]
	FeeRateType string `json:"FeeRateType,omitempty"`

	// FeeType
	//
	// Fee/Charge Type
	// Required: true
	// Enum: [Other ServiceCAccountFee ServiceCAccountFeeMonthly ServiceCAccountFeeQuarterly ServiceCFixedTariff ServiceCBusiDepAccBreakage ServiceCMinimumMonthlyFee ServiceCOther]
	FeeType *string `json:"FeeType"`

	// NegotiableIndicator
	//
	// Fee/charge which is usually negotiable rather than a fixed amount
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the fee/charge details.
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// other fee category type
	OtherFeeCategoryType *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType `json:"OtherFeeCategoryType,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType `json:"OtherFeeType,omitempty"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeApplicableRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeCategoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnClosing","OnOpening","ChargingPeriod","Daily","PerItem","Monthly","OnAnniversary","Other","PerHundredPounds","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeApplicationFrequencyPropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOnClosing captures enum value "OnClosing"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOnClosing string = "OnClosing"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOnOpening captures enum value "OnOpening"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOnOpening string = "OnOpening"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyDaily string = "Daily"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerItem captures enum value "PerItem"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerItem string = "PerItem"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOnAnniversary captures enum value "OnAnniversary"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOnAnniversary string = "OnAnniversary"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOther captures enum value "Other"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyOther string = "Other"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerHundredPounds captures enum value "PerHundredPounds"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerHundredPounds string = "PerHundredPounds"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerHour captures enum value "PerHour"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerHour string = "PerHour"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerOccurrence string = "PerOccurrence"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerSheet captures enum value "PerSheet"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerSheet string = "PerSheet"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerTransaction captures enum value "PerTransaction"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerTransaction string = "PerTransaction"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencySixMonthly captures enum value "SixMonthly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencySixMonthly string = "SixMonthly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyStatementMonthly string = "StatementMonthly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnClosing","OnOpening","ChargingPeriod","Daily","PerItem","Monthly","OnAnniversary","Other","PerHundredPounds","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeCalculationFrequencyPropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOnClosing captures enum value "OnClosing"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOnClosing string = "OnClosing"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOnOpening captures enum value "OnOpening"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOnOpening string = "OnOpening"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyDaily captures enum value "Daily"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyDaily string = "Daily"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerItem captures enum value "PerItem"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerItem string = "PerItem"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyMonthly string = "Monthly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOnAnniversary captures enum value "OnAnniversary"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOnAnniversary string = "OnAnniversary"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOther captures enum value "Other"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyOther string = "Other"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerHundredPounds captures enum value "PerHundredPounds"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerHundredPounds string = "PerHundredPounds"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerHour captures enum value "PerHour"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerHour string = "PerHour"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerOccurrence string = "PerOccurrence"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerSheet captures enum value "PerSheet"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerSheet string = "PerSheet"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerTransaction captures enum value "PerTransaction"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerTransaction string = "PerTransaction"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencySixMonthly captures enum value "SixMonthly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencySixMonthly string = "SixMonthly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyStatementMonthly string = "StatementMonthly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyWeekly string = "Weekly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeAmount", "body", m.FeeAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeApplicableRange(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeApplicableRange) { // not required
		return nil
	}

	if m.FeeApplicableRange != nil {
		if err := m.FeeApplicableRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeApplicableRange")
			}
			return err
		}
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Other","Servicing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeCategoryPropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeCategoryPropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeCategoryOther captures enum value "Other"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeCategoryOther string = "Other"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeCategoryServicing captures enum value "Servicing"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeCategoryServicing string = "Servicing"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeCategory(formats strfmt.Registry) error {

	if err := validate.Required("FeeCategory", "body", m.FeeCategory); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeCategoryEnum("FeeCategory", "body", *m.FeeCategory); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.FeeChargeCap); i++ {
		if swag.IsZero(m.FeeChargeCap[i]) { // not required
			continue
		}

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeRate", "body", m.FeeRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Gross","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeRateTypePropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeRateTypePropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeRateTypeGross captures enum value "Gross"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeRateTypeGross string = "Gross"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeRateTypeOther captures enum value "Other"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeRateTypeOther string = "Other"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeRateTypeEnum("FeeRateType", "body", m.FeeRateType); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Other","ServiceCAccountFee","ServiceCAccountFeeMonthly","ServiceCAccountFeeQuarterly","ServiceCFixedTariff","ServiceCBusiDepAccBreakage","ServiceCMinimumMonthlyFee","ServiceCOther"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeTypePropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeTypePropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeOther captures enum value "Other"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeOther string = "Other"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCAccountFee captures enum value "ServiceCAccountFee"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCAccountFee string = "ServiceCAccountFee"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCAccountFeeMonthly captures enum value "ServiceCAccountFeeMonthly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCAccountFeeMonthly string = "ServiceCAccountFeeMonthly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCAccountFeeQuarterly captures enum value "ServiceCAccountFeeQuarterly"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCAccountFeeQuarterly string = "ServiceCAccountFeeQuarterly"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCFixedTariff captures enum value "ServiceCFixedTariff"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCFixedTariff string = "ServiceCFixedTariff"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCBusiDepAccBreakage captures enum value "ServiceCBusiDepAccBreakage"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCBusiDepAccBreakage string = "ServiceCBusiDepAccBreakage"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCMinimumMonthlyFee captures enum value "ServiceCMinimumMonthlyFee"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCMinimumMonthlyFee string = "ServiceCMinimumMonthlyFee"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCOther captures enum value "ServiceCOther"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeTypeServiceCOther string = "ServiceCOther"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0TypeFeeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeTypeEnum("FeeType", "body", *m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateOtherFeeCategoryType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeCategoryType) { // not required
		return nil
	}

	if m.OtherFeeCategoryType != nil {
		if err := m.OtherFeeCategoryType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeCategoryType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b b c a data1 other fees charges items0 fee charge detail items0 based on the context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeApplicableRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeCategoryType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeApplicableRange(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeApplicableRange != nil {
		if err := m.FeeApplicableRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeApplicableRange")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeCap); i++ {

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherFeeCategoryType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeCategoryType != nil {
		if err := m.OtherFeeCategoryType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeCategoryType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange FeeApplicableRange
//
// Range or amounts or rates for which the fee/charge applies
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange struct {

	// MaximumAmount
	//
	// Maximum Amount on which fee is applicable (where it is expressed as an amount)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	MaximumAmount string `json:"MaximumAmount,omitempty"`

	// MaximumRate
	//
	// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	MaximumRate string `json:"MaximumRate,omitempty"`

	// MinimumAmount
	//
	// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	MinimumAmount string `json:"MinimumAmount,omitempty"`

	// MinimumRate
	//
	// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	MinimumRate string `json:"MinimumRate,omitempty"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 fee applicable range
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaximumAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMaximumAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MaximumAmount", "body", m.MaximumAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMaximumRate(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MaximumRate", "body", m.MaximumRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMinimumAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MinimumAmount", "body", m.MinimumAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMinimumRate(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MinimumRate", "body", m.MinimumRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge detail items0 fee applicable range based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular or group of fee/charge
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Min Max type
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Free text for adding  extra details for fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 fee charge cap items0
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Other","ServiceCAccountFee","ServiceCAccountFeeMonthly","ServiceCAccountFeeQuarterly","ServiceCFixedTariff","ServiceCBusiDepAccBreakage","ServiceCMinimumMonthlyFee","ServiceCOther"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 other fees charges items0 fee charge detail items0 fee charge cap items0 based on the context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 fee charge cap items0 other fee type items0
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge detail items0 fee charge cap items0 other fee type items0 based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies not covered in the standard code list
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other application frequency
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other application frequency based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in standard code set.
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other calculation frequency
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other calculation frequency based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType OtherFeeCategoryType
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other fee category type
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeCategoryType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeCategoryType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeCategoryType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeCategoryType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeCategoryType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeCategoryType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeCategoryType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeCategoryType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeCategoryType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other fee category type based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeCategoryType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType OtherFeeRateType
//
// Other fee rate type which is not available in the standard code set
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other fee rate type
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeRateType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other fee rate type based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeRateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType OtherFeeType
//
// Other Fee/charge type which is not available in the standard code set
//
// swagger:model OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType
type OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// FeeCategory
	//
	// Categorisation of fees and charges into standard categories.
	// Required: true
	// Enum: [Other Servicing]
	FeeCategory *string `json:"FeeCategory"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other fee type
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Other","Servicing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum = append(oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum, v)
	}
}

const (

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeFeeCategoryOther captures enum value "Other"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeFeeCategoryOther string = "Other"

	// OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeFeeCategoryServicing captures enum value "Servicing"
	OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeFeeCategoryServicing string = "Servicing"
)

// prop value enum
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) validateFeeCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) validateFeeCategory(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"FeeCategory", "body", m.FeeCategory); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeCategoryEnum("OtherFeeType"+"."+"FeeCategory", "body", *m.FeeCategory); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 fee charge detail items0 other fee type based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0FeeChargeDetailItems0OtherFeeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OtherFeesChargesItems0OtherTariffType OtherTariffType
//
// Other tariff type which is not in the standard list.
//
// swagger:model OBBCAData1OtherFeesChargesItems0OtherTariffType
type OBBCAData1OtherFeesChargesItems0OtherTariffType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 other fees charges items0 other tariff type
func (m *OBBCAData1OtherFeesChargesItems0OtherTariffType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0OtherTariffType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherTariffType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherTariffType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherTariffType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0OtherTariffType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherTariffType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherTariffType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherTariffType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OtherFeesChargesItems0OtherTariffType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherTariffType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherTariffType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherTariffType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 other fees charges items0 other tariff type based on context it is used
func (m *OBBCAData1OtherFeesChargesItems0OtherTariffType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0OtherTariffType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OtherFeesChargesItems0OtherTariffType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OtherFeesChargesItems0OtherTariffType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1Overdraft Overdraft
//
// Borrowing details
//
// swagger:model OBBCAData1Overdraft
type OBBCAData1Overdraft struct {

	// Notes
	//
	// Associated Notes about the overdraft rates
	Notes []string `json:"Notes"`

	// OverdraftTierBandSet
	//
	// Tier band set details
	// Required: true
	// Min Items: 1
	OverdraftTierBandSet []*OBBCAData1OverdraftOverdraftTierBandSetItems0 `json:"OverdraftTierBandSet"`
}

// Validate validates this o b b c a data1 overdraft
func (m *OBBCAData1Overdraft) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftTierBandSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1Overdraft) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Overdraft"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Overdraft"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1Overdraft) validateOverdraftTierBandSet(formats strfmt.Registry) error {

	if err := validate.Required("Overdraft"+"."+"OverdraftTierBandSet", "body", m.OverdraftTierBandSet); err != nil {
		return err
	}

	iOverdraftTierBandSetSize := int64(len(m.OverdraftTierBandSet))

	if err := validate.MinItems("Overdraft"+"."+"OverdraftTierBandSet", "body", iOverdraftTierBandSetSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftTierBandSet); i++ {
		if swag.IsZero(m.OverdraftTierBandSet[i]) { // not required
			continue
		}

		if m.OverdraftTierBandSet[i] != nil {
			if err := m.OverdraftTierBandSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Overdraft" + "." + "OverdraftTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft based on the context it is used
func (m *OBBCAData1Overdraft) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftTierBandSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1Overdraft) contextValidateOverdraftTierBandSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftTierBandSet); i++ {

		if m.OverdraftTierBandSet[i] != nil {
			if err := m.OverdraftTierBandSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Overdraft" + "." + "OverdraftTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1Overdraft) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1Overdraft) UnmarshalBinary(b []byte) error {
	var res OBBCAData1Overdraft
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0 Tier band set details
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0 struct {

	// AuthorisedIndicator
	//
	// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
	AuthorisedIndicator bool `json:"AuthorisedIndicator,omitempty"`

	// BufferAmount
	//
	// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	BufferAmount string `json:"BufferAmount,omitempty"`

	// Identification
	//
	// Unique and unambiguous identification of a  Tier Band for a overdraft product.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the overdraft Tier Band Set details
	Notes []string `json:"Notes"`

	// OverdraftFeesCharges
	//
	// Overdraft fees and charges details
	OverdraftFeesCharges []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 `json:"OverdraftFeesCharges"`

	// OverdraftTierBand
	//
	// Provides overdraft details for a specific tier or band
	// Required: true
	// Min Items: 1
	OverdraftTierBand []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 `json:"OverdraftTierBand"`

	// OverdraftType
	//
	// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
	// Enum: [Committed OnDemand]
	OverdraftType string `json:"OverdraftType,omitempty"`

	// TierBandMethod
	//
	// The methodology of how overdraft is charged. It can be:
	// 'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable).
	// 'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
	// 'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
	// Required: true
	// Enum: [Banded Tiered Whole]
	TierBandMethod *string `json:"TierBandMethod"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBufferAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftTierBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBandMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateBufferAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.BufferAmount) { // not required
		return nil
	}

	if err := validate.Pattern("BufferAmount", "body", m.BufferAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {
		if swag.IsZero(m.OverdraftFeesCharges[i]) { // not required
			continue
		}

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftTierBand(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftTierBand", "body", m.OverdraftTierBand); err != nil {
		return err
	}

	iOverdraftTierBandSize := int64(len(m.OverdraftTierBand))

	if err := validate.MinItems("OverdraftTierBand", "body", iOverdraftTierBandSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftTierBand); i++ {
		if swag.IsZero(m.OverdraftTierBand[i]) { // not required
			continue
		}

		if m.OverdraftTierBand[i] != nil {
			if err := m.OverdraftTierBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Committed","OnDemand"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeCommitted captures enum value "Committed"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeCommitted string = "Committed"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeOnDemand captures enum value "OnDemand"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeOnDemand string = "OnDemand"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftType(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverdraftTypeEnum("OverdraftType", "body", m.OverdraftType); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Banded","Tiered","Whole"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodBanded captures enum value "Banded"
	OBBCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodBanded string = "Banded"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodTiered captures enum value "Tiered"
	OBBCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodTiered string = "Tiered"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodWhole captures enum value "Whole"
	OBBCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodWhole string = "Whole"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateTierBandMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) validateTierBandMethod(formats strfmt.Registry) error {

	if err := validate.Required("TierBandMethod", "body", m.TierBandMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierBandMethodEnum("TierBandMethod", "body", *m.TierBandMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftTierBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) contextValidateOverdraftFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) contextValidateOverdraftTierBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftTierBand); i++ {

		if m.OverdraftTierBand[i] != nil {
			if err := m.OverdraftTierBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 Overdraft fees and charges details
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 struct {

	// OverdraftFeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
	OverdraftFeeChargeCap []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`

	// OverdraftFeeChargeDetail
	//
	// Details about the fees/charges
	// Required: true
	// Min Items: 1
	OverdraftFeeChargeDetail []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 `json:"OverdraftFeeChargeDetail"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeDetail", "body", m.OverdraftFeeChargeDetail); err != nil {
		return err
	}

	iOverdraftFeeChargeDetailSize := int64(len(m.OverdraftFeeChargeDetail))

	if err := validate.MinItems("OverdraftFeeChargeDetail", "body", iOverdraftFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {
		if swag.IsZero(m.OverdraftFeeChargeDetail[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Min Max type
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","AnnualReview","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0 based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 Details about the fees/charges
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 struct {

	// ApplicationFrequency
	//
	// Frequency at which the overdraft charge is applied to the account
	// Required: true
	// Enum: [OnClosing OnOpening ChargingPeriod Daily PerItem Monthly OnAnniversary Other PerHundredPounds PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// CalculationFrequency
	//
	// How often is the overdraft fee/charge calculated for the account.
	// Enum: [OnClosing OnOpening ChargingPeriod Daily PerItem Monthly OnAnniversary Other PerHundredPounds PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// FeeAmount
	//
	// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeAmount string `json:"FeeAmount,omitempty"`

	// FeeRate
	//
	// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	FeeRate string `json:"FeeRate,omitempty"`

	// FeeRateType
	//
	// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Enum: [Gross Other]
	FeeRateType string `json:"FeeRateType,omitempty"`

	// FeeType
	//
	// Overdraft fee type
	// Required: true
	// Enum: [ArrangedOverdraft AnnualReview EmergencyBorrowing BorrowingItem OverdraftRenewal OverdraftSetup Surcharge TempOverdraft UnauthorisedBorrowing UnauthorisedPaidTrans Other UnauthorisedUnpaidTrans]
	FeeType *string `json:"FeeType"`

	// IncrementalBorrowingAmount
	//
	// Every additional tranche of an overdraft balance to which an overdraft fee is applied
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	IncrementalBorrowingAmount string `json:"IncrementalBorrowingAmount,omitempty"`

	// NegotiableIndicator
	//
	// Indicates whether fee and charges are negotiable
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// Notes
	//
	// Free text for capturing any other info related to Overdraft Fees Charge Details
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType `json:"OtherFeeType,omitempty"`

	// OverdraftControlIndicator
	//
	// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`

	// OverdraftFeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
	OverdraftFeeChargeCap []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBorrowingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnClosing","OnOpening","ChargingPeriod","Daily","PerItem","Monthly","OnAnniversary","Other","PerHundredPounds","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnClosing captures enum value "OnClosing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnClosing string = "OnClosing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnOpening captures enum value "OnOpening"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnOpening string = "OnOpening"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily string = "Daily"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem captures enum value "PerItem"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem string = "PerItem"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAnniversary captures enum value "OnAnniversary"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAnniversary string = "OnAnniversary"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther string = "Other"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHundredPounds captures enum value "PerHundredPounds"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHundredPounds string = "PerHundredPounds"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour captures enum value "PerHour"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour string = "PerHour"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence string = "PerOccurrence"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet captures enum value "PerSheet"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet string = "PerSheet"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction captures enum value "PerTransaction"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction string = "PerTransaction"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly captures enum value "SixMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly string = "SixMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly string = "StatementMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnClosing","OnOpening","ChargingPeriod","Daily","PerItem","Monthly","OnAnniversary","Other","PerHundredPounds","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnClosing captures enum value "OnClosing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnClosing string = "OnClosing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnOpening captures enum value "OnOpening"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnOpening string = "OnOpening"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily captures enum value "Daily"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily string = "Daily"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem captures enum value "PerItem"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem string = "PerItem"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly string = "Monthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAnniversary captures enum value "OnAnniversary"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAnniversary string = "OnAnniversary"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther string = "Other"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHundredPounds captures enum value "PerHundredPounds"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHundredPounds string = "PerHundredPounds"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour captures enum value "PerHour"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour string = "PerHour"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence string = "PerOccurrence"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet captures enum value "PerSheet"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet string = "PerSheet"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction captures enum value "PerTransaction"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction string = "PerTransaction"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly captures enum value "SixMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly string = "SixMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly string = "StatementMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly string = "Weekly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeAmount", "body", m.FeeAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeRate", "body", m.FeeRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Gross","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross captures enum value "Gross"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross string = "Gross"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther string = "Other"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeRateTypeEnum("FeeRateType", "body", m.FeeRateType); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","AnnualReview","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft captures enum value "ArrangedOverdraft"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft string = "ArrangedOverdraft"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview captures enum value "AnnualReview"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview string = "AnnualReview"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing captures enum value "EmergencyBorrowing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing string = "EmergencyBorrowing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem captures enum value "BorrowingItem"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem string = "BorrowingItem"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal captures enum value "OverdraftRenewal"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal string = "OverdraftRenewal"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup captures enum value "OverdraftSetup"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup string = "OverdraftSetup"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge captures enum value "Surcharge"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge string = "Surcharge"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft captures enum value "TempOverdraft"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft string = "TempOverdraft"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing captures enum value "UnauthorisedBorrowing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing string = "UnauthorisedBorrowing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans captures enum value "UnauthorisedPaidTrans"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans string = "UnauthorisedPaidTrans"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther string = "Other"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans captures enum value "UnauthorisedUnpaidTrans"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans string = "UnauthorisedUnpaidTrans"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeTypeEnum("FeeType", "body", *m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateIncrementalBorrowingAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBorrowingAmount) { // not required
		return nil
	}

	if err := validate.Pattern("IncrementalBorrowingAmount", "body", m.IncrementalBorrowingAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies that are not available in the standard code list
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in the standard code set.
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType OtherFeeRateType
//
// Other fee rate type code which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeRateType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType OtherFeeType
//
// Other Fee type which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Min Max type
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","AnnualReview","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0 based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 Provides overdraft details for a specific tier or band
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 struct {

	// AgreementLengthMax
	//
	// Specifies the maximum length of a band for a fixed overdraft agreement
	AgreementLengthMax float32 `json:"AgreementLengthMax,omitempty"`

	// AgreementLengthMin
	//
	// Specifies the minimum length of a band for a fixed overdraft agreement
	AgreementLengthMin float32 `json:"AgreementLengthMin,omitempty"`

	// AgreementPeriod
	//
	// Specifies the period of a fixed length overdraft agreement
	// Enum: [Day Half Year Month Quarter Week Year]
	AgreementPeriod string `json:"AgreementPeriod,omitempty"`

	// BankGuaranteedIndicator
	//
	// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
	BankGuaranteedIndicator bool `json:"BankGuaranteedIndicator,omitempty"`

	// EAR
	//
	// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
	// used interchangeably), being the actual annual interest rate of an Overdraft.
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	EAR string `json:"EAR,omitempty"`

	// Identification
	//
	// Unique and unambiguous identification of a  Tier Band for a overdraft.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the Tier/band details
	Notes []string `json:"Notes"`

	// OverdraftFeesCharges
	//
	// Overdraft fees and charges
	OverdraftFeesCharges []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 `json:"OverdraftFeesCharges"`

	// OverdraftInterestChargingCoverage
	//
	// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is £2k and the interest tiers are:- 0-£500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the ‘Whole’ of the account balance,  and in the 2nd that it is ‘Tiered’.
	// Enum: [Banded Tiered Whole]
	OverdraftInterestChargingCoverage string `json:"OverdraftInterestChargingCoverage,omitempty"`

	// RepresentativeAPR
	//
	// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	RepresentativeAPR string `json:"RepresentativeAPR,omitempty"`

	// TierValueMax
	//
	// Maximum value of Overdraft Tier/Band
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMax string `json:"TierValueMax,omitempty"`

	// TierValueMin
	//
	// Minimum value of Overdraft Tier/Band
	// Required: true
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMin *string `json:"TierValueMin"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreementPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEAR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftInterestChargingCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepresentativeAPR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodDay captures enum value "Day"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodDay string = "Day"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodHalfYear captures enum value "Half Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodHalfYear string = "Half Year"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodMonth captures enum value "Month"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodMonth string = "Month"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodQuarter captures enum value "Quarter"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodQuarter string = "Quarter"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodWeek captures enum value "Week"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodWeek string = "Week"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodYear captures enum value "Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateAgreementPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateAgreementPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.AgreementPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateAgreementPeriodEnum("AgreementPeriod", "body", m.AgreementPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateEAR(formats strfmt.Registry) error {
	if swag.IsZero(m.EAR) { // not required
		return nil
	}

	if err := validate.Pattern("EAR", "body", m.EAR, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {
		if swag.IsZero(m.OverdraftFeesCharges[i]) { // not required
			continue
		}

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Banded","Tiered","Whole"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageBanded captures enum value "Banded"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageBanded string = "Banded"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageTiered captures enum value "Tiered"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageTiered string = "Tiered"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageWhole captures enum value "Whole"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageWhole string = "Whole"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftInterestChargingCoverageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftInterestChargingCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftInterestChargingCoverage) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverdraftInterestChargingCoverageEnum("OverdraftInterestChargingCoverage", "body", m.OverdraftInterestChargingCoverage); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateRepresentativeAPR(formats strfmt.Registry) error {
	if swag.IsZero(m.RepresentativeAPR) { // not required
		return nil
	}

	if err := validate.Pattern("RepresentativeAPR", "body", m.RepresentativeAPR, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateTierValueMax(formats strfmt.Registry) error {
	if swag.IsZero(m.TierValueMax) { // not required
		return nil
	}

	if err := validate.Pattern("TierValueMax", "body", m.TierValueMax, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateTierValueMin(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMin", "body", m.TierValueMin); err != nil {
		return err
	}

	if err := validate.Pattern("TierValueMin", "body", *m.TierValueMin, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) contextValidateOverdraftFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 Overdraft fees and charges
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 struct {

	// OverdraftFeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
	OverdraftFeeChargeCap []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`

	// OverdraftFeeChargeDetail
	//
	// Details about the fees/charges
	// Required: true
	// Min Items: 1
	OverdraftFeeChargeDetail []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 `json:"OverdraftFeeChargeDetail"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeDetail", "body", m.OverdraftFeeChargeDetail); err != nil {
		return err
	}

	iOverdraftFeeChargeDetailSize := int64(len(m.OverdraftFeeChargeDetail))

	if err := validate.MinItems("OverdraftFeeChargeDetail", "body", iOverdraftFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {
		if swag.IsZero(m.OverdraftFeeChargeDetail[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Min Max type
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","AnnualReview","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0 based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 Details about the fees/charges
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 struct {

	// ApplicationFrequency
	//
	// Frequency at which the overdraft charge is applied to the account
	// Required: true
	// Enum: [OnClosing OnOpening ChargingPeriod Daily PerItem Monthly OnAnniversary Other PerHundredPounds PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// CalculationFrequency
	//
	// How often is the overdraft fee/charge calculated for the account.
	// Enum: [OnClosing OnOpening ChargingPeriod Daily PerItem Monthly OnAnniversary Other PerHundredPounds PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// FeeAmount
	//
	// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeAmount string `json:"FeeAmount,omitempty"`

	// FeeRate
	//
	// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	FeeRate string `json:"FeeRate,omitempty"`

	// FeeRateType
	//
	// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Enum: [Gross Other]
	FeeRateType string `json:"FeeRateType,omitempty"`

	// FeeType
	//
	// Overdraft fee type
	// Required: true
	// Enum: [ArrangedOverdraft AnnualReview EmergencyBorrowing BorrowingItem OverdraftRenewal OverdraftSetup Surcharge TempOverdraft UnauthorisedBorrowing UnauthorisedPaidTrans Other UnauthorisedUnpaidTrans]
	FeeType *string `json:"FeeType"`

	// IncrementalBorrowingAmount
	//
	// Every additional tranche of an overdraft balance to which an overdraft fee is applied
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	IncrementalBorrowingAmount string `json:"IncrementalBorrowingAmount,omitempty"`

	// NegotiableIndicator
	//
	// Indicates whether fee and charges are negotiable
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// Notes
	//
	// Free text for capturing any other info related to Overdraft Fees Charge Details
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType `json:"OtherFeeType,omitempty"`

	// OverdraftControlIndicator
	//
	// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`

	// OverdraftFeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
	OverdraftFeeChargeCap []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBorrowingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnClosing","OnOpening","ChargingPeriod","Daily","PerItem","Monthly","OnAnniversary","Other","PerHundredPounds","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnClosing captures enum value "OnClosing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnClosing string = "OnClosing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnOpening captures enum value "OnOpening"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnOpening string = "OnOpening"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily string = "Daily"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem captures enum value "PerItem"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem string = "PerItem"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAnniversary captures enum value "OnAnniversary"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAnniversary string = "OnAnniversary"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther string = "Other"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHundredPounds captures enum value "PerHundredPounds"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHundredPounds string = "PerHundredPounds"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour captures enum value "PerHour"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour string = "PerHour"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence string = "PerOccurrence"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet captures enum value "PerSheet"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet string = "PerSheet"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction captures enum value "PerTransaction"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction string = "PerTransaction"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly captures enum value "SixMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly string = "SixMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly string = "StatementMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnClosing","OnOpening","ChargingPeriod","Daily","PerItem","Monthly","OnAnniversary","Other","PerHundredPounds","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnClosing captures enum value "OnClosing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnClosing string = "OnClosing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnOpening captures enum value "OnOpening"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnOpening string = "OnOpening"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily captures enum value "Daily"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily string = "Daily"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem captures enum value "PerItem"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem string = "PerItem"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly string = "Monthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAnniversary captures enum value "OnAnniversary"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAnniversary string = "OnAnniversary"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther string = "Other"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHundredPounds captures enum value "PerHundredPounds"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHundredPounds string = "PerHundredPounds"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour captures enum value "PerHour"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour string = "PerHour"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence string = "PerOccurrence"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet captures enum value "PerSheet"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet string = "PerSheet"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction captures enum value "PerTransaction"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction string = "PerTransaction"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly captures enum value "SixMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly string = "SixMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly string = "StatementMonthly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly string = "Weekly"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeAmount", "body", m.FeeAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeRate", "body", m.FeeRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Gross","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross captures enum value "Gross"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross string = "Gross"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther string = "Other"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeRateTypeEnum("FeeRateType", "body", m.FeeRateType); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","AnnualReview","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft captures enum value "ArrangedOverdraft"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft string = "ArrangedOverdraft"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview captures enum value "AnnualReview"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview string = "AnnualReview"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing captures enum value "EmergencyBorrowing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing string = "EmergencyBorrowing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem captures enum value "BorrowingItem"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem string = "BorrowingItem"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal captures enum value "OverdraftRenewal"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal string = "OverdraftRenewal"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup captures enum value "OverdraftSetup"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup string = "OverdraftSetup"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge captures enum value "Surcharge"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge string = "Surcharge"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft captures enum value "TempOverdraft"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft string = "TempOverdraft"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing captures enum value "UnauthorisedBorrowing"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing string = "UnauthorisedBorrowing"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans captures enum value "UnauthorisedPaidTrans"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans string = "UnauthorisedPaidTrans"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther captures enum value "Other"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther string = "Other"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans captures enum value "UnauthorisedUnpaidTrans"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans string = "UnauthorisedUnpaidTrans"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeTypeEnum("FeeType", "body", *m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateIncrementalBorrowingAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBorrowingAmount) { // not required
		return nil
	}

	if err := validate.Pattern("IncrementalBorrowingAmount", "body", m.IncrementalBorrowingAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies that are not available in the standard code list
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in the standard code set.
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType OtherFeeRateType
//
// Other fee rate type code which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeRateType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType OtherFeeType
//
// Other Fee type which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Min Max type
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","AnnualReview","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b b c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0 based on context it is used
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBBCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBBCAData1ProductDetails ProductDetails
//
// swagger:model OBBCAData1ProductDetails
type OBBCAData1ProductDetails struct {

	// FeeFreeLength
	//
	// The length/duration of the fee free period
	FeeFreeLength float32 `json:"FeeFreeLength,omitempty"`

	// FeeFreeLengthPeriod
	//
	// The unit of period (days, weeks, months etc.) of the promotional length
	// Enum: [Day Half Year Month Quarter Week Year]
	FeeFreeLengthPeriod string `json:"FeeFreeLengthPeriod,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the Core product details
	Notes []string `json:"Notes"`

	// Segment
	//
	// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
	//
	// Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd
	// With respect to BCA products, they are segmented in relation to different markets that they wish to focus on.
	Segment []string `json:"Segment"`
}

// Validate validates this o b b c a data1 product details
func (m *OBBCAData1ProductDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeFreeLengthPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBBCAData1ProductDetailsTypeFeeFreeLengthPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1ProductDetailsTypeFeeFreeLengthPeriodPropEnum = append(oBBCAData1ProductDetailsTypeFeeFreeLengthPeriodPropEnum, v)
	}
}

const (

	// OBBCAData1ProductDetailsFeeFreeLengthPeriodDay captures enum value "Day"
	OBBCAData1ProductDetailsFeeFreeLengthPeriodDay string = "Day"

	// OBBCAData1ProductDetailsFeeFreeLengthPeriodHalfYear captures enum value "Half Year"
	OBBCAData1ProductDetailsFeeFreeLengthPeriodHalfYear string = "Half Year"

	// OBBCAData1ProductDetailsFeeFreeLengthPeriodMonth captures enum value "Month"
	OBBCAData1ProductDetailsFeeFreeLengthPeriodMonth string = "Month"

	// OBBCAData1ProductDetailsFeeFreeLengthPeriodQuarter captures enum value "Quarter"
	OBBCAData1ProductDetailsFeeFreeLengthPeriodQuarter string = "Quarter"

	// OBBCAData1ProductDetailsFeeFreeLengthPeriodWeek captures enum value "Week"
	OBBCAData1ProductDetailsFeeFreeLengthPeriodWeek string = "Week"

	// OBBCAData1ProductDetailsFeeFreeLengthPeriodYear captures enum value "Year"
	OBBCAData1ProductDetailsFeeFreeLengthPeriodYear string = "Year"
)

// prop value enum
func (m *OBBCAData1ProductDetails) validateFeeFreeLengthPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1ProductDetailsTypeFeeFreeLengthPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1ProductDetails) validateFeeFreeLengthPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeFreeLengthPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeFreeLengthPeriodEnum("ProductDetails"+"."+"FeeFreeLengthPeriod", "body", m.FeeFreeLengthPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBBCAData1ProductDetails) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("ProductDetails"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("ProductDetails"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

var oBBCAData1ProductDetailsSegmentItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ClientAccount","Standard","NonCommercialChaitiesClbSoc","NonCommercialPublicAuthGovt","Religious","SectorSpecific","Startup","Switcher"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBBCAData1ProductDetailsSegmentItemsEnum = append(oBBCAData1ProductDetailsSegmentItemsEnum, v)
	}
}

func (m *OBBCAData1ProductDetails) validateSegmentItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBBCAData1ProductDetailsSegmentItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBBCAData1ProductDetails) validateSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.Segment) { // not required
		return nil
	}

	for i := 0; i < len(m.Segment); i++ {

		// value enum
		if err := m.validateSegmentItemsEnum("ProductDetails"+"."+"Segment"+"."+strconv.Itoa(i), "body", m.Segment[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this o b b c a data1 product details based on context it is used
func (m *OBBCAData1ProductDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBBCAData1ProductDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBBCAData1ProductDetails) UnmarshalBinary(b []byte) error {
	var res OBBCAData1ProductDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
