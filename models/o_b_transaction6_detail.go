// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBTransaction6Detail Provides further details on an entry in the report.
//
// swagger:model OBTransaction6Detail
type OBTransaction6Detail struct {

	// account Id
	// Required: true
	AccountID *AccountID `json:"AccountId"`

	// address line
	AddressLine AddressLine `json:"AddressLine,omitempty"`

	// amount
	// Required: true
	Amount *OBActiveOrHistoricCurrencyAndAmount9 `json:"Amount"`

	// balance
	Balance *OBTransactionCashBalance `json:"Balance,omitempty"`

	// bank transaction code
	BankTransactionCode *OBBankTransactionCodeStructure1 `json:"BankTransactionCode,omitempty"`

	// booking date time
	// Required: true
	// Format: date-time
	BookingDateTime *BookingDateTime `json:"BookingDateTime"`

	// card instrument
	CardInstrument *OBTransactionCardInstrument1 `json:"CardInstrument,omitempty"`

	// charge amount
	ChargeAmount *OBActiveOrHistoricCurrencyAndAmount10 `json:"ChargeAmount,omitempty"`

	// credit debit indicator
	// Required: true
	CreditDebitIndicator *OBCreditDebitCode1 `json:"CreditDebitIndicator"`

	// creditor account
	CreditorAccount *OBCashAccount60 `json:"CreditorAccount,omitempty"`

	// creditor agent
	CreditorAgent *OBBranchAndFinancialInstitutionIdentification61 `json:"CreditorAgent,omitempty"`

	// currency exchange
	CurrencyExchange *OBCurrencyExchange5 `json:"CurrencyExchange,omitempty"`

	// debtor account
	DebtorAccount *OBCashAccount61 `json:"DebtorAccount,omitempty"`

	// debtor agent
	DebtorAgent *OBBranchAndFinancialInstitutionIdentification62 `json:"DebtorAgent,omitempty"`

	// merchant details
	MerchantDetails *OBMerchantDetails1 `json:"MerchantDetails,omitempty"`

	// proprietary bank transaction code
	ProprietaryBankTransactionCode *ProprietaryBankTransactionCodeStructure1 `json:"ProprietaryBankTransactionCode,omitempty"`

	// statement reference
	StatementReference []StatementReference `json:"StatementReference"`

	// status
	// Required: true
	Status *OBEntryStatus1Code `json:"Status"`

	// supplementary data
	SupplementaryData OBSupplementaryData1 `json:"SupplementaryData,omitempty"`

	// transaction Id
	TransactionID TransactionID `json:"TransactionId,omitempty"`

	// transaction information
	TransactionInformation TransactionInformation `json:"TransactionInformation,omitempty"`

	// transaction mutability
	TransactionMutability OBTransactionMutability1Code `json:"TransactionMutability,omitempty"`

	// transaction reference
	TransactionReference TransactionReference `json:"TransactionReference,omitempty"`

	// value date time
	// Format: date-time
	ValueDateTime ValueDateTime `json:"ValueDateTime,omitempty"`
}

// Validate validates this o b transaction6 detail
func (m *OBTransaction6Detail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankTransactionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookingDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditDebitIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditorAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditorAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProprietaryBankTransactionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatementReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionMutability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBTransaction6Detail) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if m.AccountID != nil {
		if err := m.AccountID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateAddressLine(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressLine) { // not required
		return nil
	}

	if err := m.AddressLine.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AddressLine")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("Amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Balance")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateBankTransactionCode(formats strfmt.Registry) error {
	if swag.IsZero(m.BankTransactionCode) { // not required
		return nil
	}

	if m.BankTransactionCode != nil {
		if err := m.BankTransactionCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BankTransactionCode")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateBookingDateTime(formats strfmt.Registry) error {

	if err := validate.Required("BookingDateTime", "body", m.BookingDateTime); err != nil {
		return err
	}

	if err := validate.Required("BookingDateTime", "body", m.BookingDateTime); err != nil {
		return err
	}

	if m.BookingDateTime != nil {
		if err := m.BookingDateTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BookingDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateCardInstrument(formats strfmt.Registry) error {
	if swag.IsZero(m.CardInstrument) { // not required
		return nil
	}

	if m.CardInstrument != nil {
		if err := m.CardInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CardInstrument")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateChargeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeAmount) { // not required
		return nil
	}

	if m.ChargeAmount != nil {
		if err := m.ChargeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ChargeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateCreditDebitIndicator(formats strfmt.Registry) error {

	if err := validate.Required("CreditDebitIndicator", "body", m.CreditDebitIndicator); err != nil {
		return err
	}

	if err := validate.Required("CreditDebitIndicator", "body", m.CreditDebitIndicator); err != nil {
		return err
	}

	if m.CreditDebitIndicator != nil {
		if err := m.CreditDebitIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditDebitIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateCreditorAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.CreditorAccount) { // not required
		return nil
	}

	if m.CreditorAccount != nil {
		if err := m.CreditorAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateCreditorAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.CreditorAgent) { // not required
		return nil
	}

	if m.CreditorAgent != nil {
		if err := m.CreditorAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditorAgent")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateCurrencyExchange(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrencyExchange) { // not required
		return nil
	}

	if m.CurrencyExchange != nil {
		if err := m.CurrencyExchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrencyExchange")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateDebtorAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.DebtorAccount) { // not required
		return nil
	}

	if m.DebtorAccount != nil {
		if err := m.DebtorAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DebtorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateDebtorAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.DebtorAgent) { // not required
		return nil
	}

	if m.DebtorAgent != nil {
		if err := m.DebtorAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DebtorAgent")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateMerchantDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchantDetails) { // not required
		return nil
	}

	if m.MerchantDetails != nil {
		if err := m.MerchantDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MerchantDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateProprietaryBankTransactionCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ProprietaryBankTransactionCode) { // not required
		return nil
	}

	if m.ProprietaryBankTransactionCode != nil {
		if err := m.ProprietaryBankTransactionCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProprietaryBankTransactionCode")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateStatementReference(formats strfmt.Registry) error {
	if swag.IsZero(m.StatementReference) { // not required
		return nil
	}

	for i := 0; i < len(m.StatementReference); i++ {

		if err := m.StatementReference[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StatementReference" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *OBTransaction6Detail) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) validateTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionID) { // not required
		return nil
	}

	if err := m.TransactionID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionId")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) validateTransactionInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionInformation) { // not required
		return nil
	}

	if err := m.TransactionInformation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionInformation")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) validateTransactionMutability(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionMutability) { // not required
		return nil
	}

	if err := m.TransactionMutability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionMutability")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) validateTransactionReference(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionReference) { // not required
		return nil
	}

	if err := m.TransactionReference.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionReference")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) validateValueDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueDateTime) { // not required
		return nil
	}

	if err := m.ValueDateTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ValueDateTime")
		}
		return err
	}

	return nil
}

// ContextValidate validate this o b transaction6 detail based on the context it is used
func (m *OBTransaction6Detail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddressLine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBankTransactionCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBookingDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCardInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChargeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditDebitIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditorAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditorAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrencyExchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebtorAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebtorAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchantDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProprietaryBankTransactionCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatementReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionMutability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValueDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBTransaction6Detail) contextValidateAccountID(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountID != nil {
		if err := m.AccountID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateAddressLine(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AddressLine.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AddressLine")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if m.Balance != nil {
		if err := m.Balance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Balance")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateBankTransactionCode(ctx context.Context, formats strfmt.Registry) error {

	if m.BankTransactionCode != nil {
		if err := m.BankTransactionCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BankTransactionCode")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateBookingDateTime(ctx context.Context, formats strfmt.Registry) error {

	if m.BookingDateTime != nil {
		if err := m.BookingDateTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BookingDateTime")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateCardInstrument(ctx context.Context, formats strfmt.Registry) error {

	if m.CardInstrument != nil {
		if err := m.CardInstrument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CardInstrument")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateChargeAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.ChargeAmount != nil {
		if err := m.ChargeAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ChargeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateCreditDebitIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditDebitIndicator != nil {
		if err := m.CreditDebitIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditDebitIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateCreditorAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditorAccount != nil {
		if err := m.CreditorAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateCreditorAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditorAgent != nil {
		if err := m.CreditorAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditorAgent")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateCurrencyExchange(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrencyExchange != nil {
		if err := m.CurrencyExchange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CurrencyExchange")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateDebtorAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.DebtorAccount != nil {
		if err := m.DebtorAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DebtorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateDebtorAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.DebtorAgent != nil {
		if err := m.DebtorAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DebtorAgent")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateMerchantDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.MerchantDetails != nil {
		if err := m.MerchantDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MerchantDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateProprietaryBankTransactionCode(ctx context.Context, formats strfmt.Registry) error {

	if m.ProprietaryBankTransactionCode != nil {
		if err := m.ProprietaryBankTransactionCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProprietaryBankTransactionCode")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateStatementReference(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatementReference); i++ {

		if err := m.StatementReference[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StatementReference" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateTransactionID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TransactionID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionId")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateTransactionInformation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TransactionInformation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionInformation")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateTransactionMutability(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TransactionMutability.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionMutability")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateTransactionReference(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TransactionReference.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionReference")
		}
		return err
	}

	return nil
}

func (m *OBTransaction6Detail) contextValidateValueDateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ValueDateTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ValueDateTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBTransaction6Detail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBTransaction6Detail) UnmarshalBinary(b []byte) error {
	var res OBTransaction6Detail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
