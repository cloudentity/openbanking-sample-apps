// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBPCAData1 PCA
//
// swagger:model OBPCAData1
type OBPCAData1 struct {

	// credit interest
	CreditInterest *OBPCAData1CreditInterest `json:"CreditInterest,omitempty"`

	// other fees charges
	OtherFeesCharges *OBPCAData1OtherFeesCharges `json:"OtherFeesCharges,omitempty"`

	// overdraft
	Overdraft *OBPCAData1Overdraft `json:"Overdraft,omitempty"`

	// product details
	ProductDetails *OBPCAData1ProductDetails `json:"ProductDetails,omitempty"`
}

// Validate validates this o b p c a data1
func (m *OBPCAData1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1) validateCreditInterest(formats strfmt.Registry) error {
	if swag.IsZero(m.CreditInterest) { // not required
		return nil
	}

	if m.CreditInterest != nil {
		if err := m.CreditInterest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1) validateOtherFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeesCharges) { // not required
		return nil
	}

	if m.OtherFeesCharges != nil {
		if err := m.OtherFeesCharges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeesCharges")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1) validateOverdraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Overdraft) { // not required
		return nil
	}

	if m.Overdraft != nil {
		if err := m.Overdraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Overdraft")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1) validateProductDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductDetails) { // not required
		return nil
	}

	if m.ProductDetails != nil {
		if err := m.ProductDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b p c a data1 based on the context it is used
func (m *OBPCAData1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreditInterest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1) contextValidateCreditInterest(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditInterest != nil {
		if err := m.CreditInterest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1) contextValidateOtherFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeesCharges != nil {
		if err := m.OtherFeesCharges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeesCharges")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1) contextValidateOverdraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Overdraft != nil {
		if err := m.Overdraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Overdraft")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1) contextValidateProductDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductDetails != nil {
		if err := m.ProductDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1) UnmarshalBinary(b []byte) error {
	var res OBPCAData1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1CreditInterest CreditInterest
//
// Details about the interest that may be payable to the PCA account holders
//
// swagger:model OBPCAData1CreditInterest
type OBPCAData1CreditInterest struct {

	// TierBandSet
	//
	// The group of tiers or bands for which credit interest can be applied.
	// Required: true
	// Min Items: 1
	TierBandSet []*OBPCAData1CreditInterestTierBandSetItems0 `json:"TierBandSet"`
}

// Validate validates this o b p c a data1 credit interest
func (m *OBPCAData1CreditInterest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTierBandSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterest) validateTierBandSet(formats strfmt.Registry) error {

	if err := validate.Required("CreditInterest"+"."+"TierBandSet", "body", m.TierBandSet); err != nil {
		return err
	}

	iTierBandSetSize := int64(len(m.TierBandSet))

	if err := validate.MinItems("CreditInterest"+"."+"TierBandSet", "body", iTierBandSetSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TierBandSet); i++ {
		if swag.IsZero(m.TierBandSet[i]) { // not required
			continue
		}

		if m.TierBandSet[i] != nil {
			if err := m.TierBandSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreditInterest" + "." + "TierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 credit interest based on the context it is used
func (m *OBPCAData1CreditInterest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTierBandSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterest) contextValidateTierBandSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TierBandSet); i++ {

		if m.TierBandSet[i] != nil {
			if err := m.TierBandSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreditInterest" + "." + "TierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1CreditInterest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1CreditInterest) UnmarshalBinary(b []byte) error {
	var res OBPCAData1CreditInterest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1CreditInterestTierBandSetItems0 The group of tiers or bands for which credit interest can be applied.
//
// swagger:model OBPCAData1CreditInterestTierBandSetItems0
type OBPCAData1CreditInterestTierBandSetItems0 struct {

	// CalculationMethod
	//
	// Methods of calculating interest
	// Enum: [Compound SimpleInterest]
	CalculationMethod string `json:"CalculationMethod,omitempty"`

	// Destination
	//
	// Describes whether accrued interest is payable only to the PCA or to another bank account
	// Enum: [PayAway SelfCredit]
	Destination string `json:"Destination,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the Tier Band Set details
	Notes []string `json:"Notes"`

	// TierBand
	//
	// Tier Band Details
	// Required: true
	// Min Items: 1
	TierBand []*OBPCAData1CreditInterestTierBandSetItems0TierBandItems0 `json:"TierBand"`

	// TierBandMethod
	//
	// The methodology of how credit interest is charged. It can be:-
	//
	// 1. Banded
	// Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
	//
	// 2. Tiered
	// Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
	//
	// 3. Whole
	// The same interest rate is applied irrespective of the PCA balance
	// Required: true
	// Enum: [Tiered Whole]
	TierBandMethod *string `json:"TierBandMethod"`
}

// Validate validates this o b p c a data1 credit interest tier band set items0
func (m *OBPCAData1CreditInterestTierBandSetItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBandMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Compound","SimpleInterest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0CalculationMethodCompound captures enum value "Compound"
	OBPCAData1CreditInterestTierBandSetItems0CalculationMethodCompound string = "Compound"

	// OBPCAData1CreditInterestTierBandSetItems0CalculationMethodSimpleInterest captures enum value "SimpleInterest"
	OBPCAData1CreditInterestTierBandSetItems0CalculationMethodSimpleInterest string = "SimpleInterest"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0) validateCalculationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TypeCalculationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0) validateCalculationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationMethodEnum("CalculationMethod", "body", m.CalculationMethod); err != nil {
		return err
	}

	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PayAway","SelfCredit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0DestinationPayAway captures enum value "PayAway"
	OBPCAData1CreditInterestTierBandSetItems0DestinationPayAway string = "PayAway"

	// OBPCAData1CreditInterestTierBandSetItems0DestinationSelfCredit captures enum value "SelfCredit"
	OBPCAData1CreditInterestTierBandSetItems0DestinationSelfCredit string = "SelfCredit"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0) validateDestinationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TypeDestinationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	// value enum
	if err := m.validateDestinationEnum("Destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0) validateTierBand(formats strfmt.Registry) error {

	if err := validate.Required("TierBand", "body", m.TierBand); err != nil {
		return err
	}

	iTierBandSize := int64(len(m.TierBand))

	if err := validate.MinItems("TierBand", "body", iTierBandSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TierBand); i++ {
		if swag.IsZero(m.TierBand[i]) { // not required
			continue
		}

		if m.TierBand[i] != nil {
			if err := m.TierBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tiered","Whole"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0TierBandMethodTiered captures enum value "Tiered"
	OBPCAData1CreditInterestTierBandSetItems0TierBandMethodTiered string = "Tiered"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandMethodWhole captures enum value "Whole"
	OBPCAData1CreditInterestTierBandSetItems0TierBandMethodWhole string = "Whole"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0) validateTierBandMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TypeTierBandMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0) validateTierBandMethod(formats strfmt.Registry) error {

	if err := validate.Required("TierBandMethod", "body", m.TierBandMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierBandMethodEnum("TierBandMethod", "body", *m.TierBandMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b p c a data1 credit interest tier band set items0 based on the context it is used
func (m *OBPCAData1CreditInterestTierBandSetItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTierBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0) contextValidateTierBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TierBand); i++ {

		if m.TierBand[i] != nil {
			if err := m.TierBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1CreditInterestTierBandSetItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0 Tier Band Details
//
// swagger:model OBPCAData1CreditInterestTierBandSetItems0TierBandItems0
type OBPCAData1CreditInterestTierBandSetItems0TierBandItems0 struct {

	// AER
	//
	// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.
	//
	// Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
	// Required: true
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	AER *string `json:"AER"`

	// ApplicationFrequency
	//
	// How often is interest applied to the PCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's PCA.
	// Required: true
	// Enum: [PerAcademicTerm Daily HalfYearly Monthly Other Quarterly PerStatementDate Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// BankInterestRate
	//
	// Bank Interest for the PCA product
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	BankInterestRate string `json:"BankInterestRate,omitempty"`

	// BankInterestRateType
	//
	// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the PCA.
	// Enum: [LinkedBaseRate Gross Net Other]
	BankInterestRateType string `json:"BankInterestRateType,omitempty"`

	// CalculationFrequency
	//
	// How often is credit interest calculated for the account.
	// Enum: [PerAcademicTerm Daily HalfYearly Monthly Other Quarterly PerStatementDate Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// DepositInterestAppliedCoverage
	//
	// Amount on which Interest applied.
	// Enum: [Tiered Whole]
	DepositInterestAppliedCoverage string `json:"DepositInterestAppliedCoverage,omitempty"`

	// FixedVariableInterestRateType
	//
	// Type of interest rate, Fixed or Variable
	// Required: true
	// Enum: [Fixed Variable]
	FixedVariableInterestRateType *string `json:"FixedVariableInterestRateType"`

	// Identification
	//
	// Unique and unambiguous identification of a  Tier Band for a PCA.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the Tier Band details
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other bank interest type
	OtherBankInterestType *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType `json:"OtherBankInterestType,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// TierValueMaximum
	//
	// Maximum deposit value for which the credit interest tier applies.
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMaximum string `json:"TierValueMaximum,omitempty"`

	// TierValueMinimum
	//
	// Minimum deposit value for which the credit interest tier applies.
	// Required: true
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMinimum *string `json:"TierValueMinimum"`
}

// Validate validates this o b p c a data1 credit interest tier band set items0 tier band items0
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankInterestRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepositInterestAppliedCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedVariableInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherBankInterestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMinimum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateAER(formats strfmt.Registry) error {

	if err := validate.Required("AER", "body", m.AER); err != nil {
		return err
	}

	if err := validate.Pattern("AER", "body", *m.AER, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PerAcademicTerm","Daily","HalfYearly","Monthly","Other","Quarterly","PerStatementDate","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyPerAcademicTerm captures enum value "PerAcademicTerm"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyPerAcademicTerm string = "PerAcademicTerm"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyDaily string = "Daily"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyHalfYearly captures enum value "HalfYearly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyHalfYearly string = "HalfYearly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyOther captures enum value "Other"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyOther string = "Other"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyPerStatementDate captures enum value "PerStatementDate"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyPerStatementDate string = "PerStatementDate"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRate(formats strfmt.Registry) error {
	if swag.IsZero(m.BankInterestRate) { // not required
		return nil
	}

	if err := validate.Pattern("BankInterestRate", "body", m.BankInterestRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LinkedBaseRate","Gross","Net","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeLinkedBaseRate captures enum value "LinkedBaseRate"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeLinkedBaseRate string = "LinkedBaseRate"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeGross captures enum value "Gross"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeGross string = "Gross"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeNet captures enum value "Net"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeNet string = "Net"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeOther captures enum value "Other"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeOther string = "Other"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.BankInterestRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBankInterestRateTypeEnum("BankInterestRateType", "body", m.BankInterestRateType); err != nil {
		return err
	}

	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PerAcademicTerm","Daily","HalfYearly","Monthly","Other","Quarterly","PerStatementDate","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyPerAcademicTerm captures enum value "PerAcademicTerm"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyPerAcademicTerm string = "PerAcademicTerm"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyDaily captures enum value "Daily"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyDaily string = "Daily"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyHalfYearly captures enum value "HalfYearly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyHalfYearly string = "HalfYearly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyMonthly string = "Monthly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyOther captures enum value "Other"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyOther string = "Other"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyPerStatementDate captures enum value "PerStatementDate"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyPerStatementDate string = "PerStatementDate"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyWeekly string = "Weekly"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tiered","Whole"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageTiered captures enum value "Tiered"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageTiered string = "Tiered"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageWhole captures enum value "Whole"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageWhole string = "Whole"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateDepositInterestAppliedCoverageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateDepositInterestAppliedCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.DepositInterestAppliedCoverage) { // not required
		return nil
	}

	// value enum
	if err := m.validateDepositInterestAppliedCoverageEnum("DepositInterestAppliedCoverage", "body", m.DepositInterestAppliedCoverage); err != nil {
		return err
	}

	return nil
}

var oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Fixed","Variable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum = append(oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum, v)
	}
}

const (

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeFixed captures enum value "Fixed"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeFixed string = "Fixed"

	// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeVariable captures enum value "Variable"
	OBPCAData1CreditInterestTierBandSetItems0TierBandItems0FixedVariableInterestRateTypeVariable string = "Variable"
)

// prop value enum
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateFixedVariableInterestRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1CreditInterestTierBandSetItems0TierBandItems0TypeFixedVariableInterestRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateFixedVariableInterestRateType(formats strfmt.Registry) error {

	if err := validate.Required("FixedVariableInterestRateType", "body", m.FixedVariableInterestRateType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFixedVariableInterestRateTypeEnum("FixedVariableInterestRateType", "body", *m.FixedVariableInterestRateType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateOtherBankInterestType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherBankInterestType) { // not required
		return nil
	}

	if m.OtherBankInterestType != nil {
		if err := m.OtherBankInterestType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateTierValueMaximum(formats strfmt.Registry) error {
	if swag.IsZero(m.TierValueMaximum) { // not required
		return nil
	}

	if err := validate.Pattern("TierValueMaximum", "body", m.TierValueMaximum, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) validateTierValueMinimum(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMinimum", "body", m.TierValueMinimum); err != nil {
		return err
	}

	if err := validate.Pattern("TierValueMinimum", "body", *m.TierValueMinimum, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b p c a data1 credit interest tier band set items0 tier band items0 based on the context it is used
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherBankInterestType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherBankInterestType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherBankInterestType != nil {
		if err := m.OtherBankInterestType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1CreditInterestTierBandSetItems0TierBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies that are not available in the standard code list
//
// swagger:model OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency
type OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 credit interest tier band set items0 tier band items0 other application frequency
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 credit interest tier band set items0 tier band items0 other application frequency based on context it is used
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType OtherBankInterestType
//
// Other interest rate types which are not available in the standard code list
//
// swagger:model OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType
type OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 credit interest tier band set items0 tier band items0 other bank interest type
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherBankInterestType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherBankInterestType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherBankInterestType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherBankInterestType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherBankInterestType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherBankInterestType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherBankInterestType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherBankInterestType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherBankInterestType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 credit interest tier band set items0 tier band items0 other bank interest type based on context it is used
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in the standard code set.
//
// swagger:model OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency
type OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 credit interest tier band set items0 tier band items0 other calculation frequency
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 credit interest tier band set items0 tier band items0 other calculation frequency based on context it is used
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1CreditInterestTierBandSetItems0TierBandItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesCharges OtherFeesCharges
//
// Contains details of fees and charges which are not associated with either borrowing or features/benefits
//
// swagger:model OBPCAData1OtherFeesCharges
type OBPCAData1OtherFeesCharges struct {

	// FeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge
	FeeChargeCap []*OBPCAData1OtherFeesChargesFeeChargeCapItems0 `json:"FeeChargeCap"`

	// FeeChargeDetail
	//
	// Other fees/charges details
	// Required: true
	// Min Items: 1
	FeeChargeDetail []*OBPCAData1OtherFeesChargesFeeChargeDetailItems0 `json:"FeeChargeDetail"`
}

// Validate validates this o b p c a data1 other fees charges
func (m *OBPCAData1OtherFeesCharges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesCharges) validateFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.FeeChargeCap); i++ {
		if swag.IsZero(m.FeeChargeCap[i]) { // not required
			continue
		}

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeesCharges" + "." + "FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OtherFeesCharges) validateFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeesCharges"+"."+"FeeChargeDetail", "body", m.FeeChargeDetail); err != nil {
		return err
	}

	iFeeChargeDetailSize := int64(len(m.FeeChargeDetail))

	if err := validate.MinItems("OtherFeesCharges"+"."+"FeeChargeDetail", "body", iFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeChargeDetail); i++ {
		if swag.IsZero(m.FeeChargeDetail[i]) { // not required
			continue
		}

		if m.FeeChargeDetail[i] != nil {
			if err := m.FeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeesCharges" + "." + "FeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 other fees charges based on the context it is used
func (m *OBPCAData1OtherFeesCharges) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesCharges) contextValidateFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeCap); i++ {

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeesCharges" + "." + "FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OtherFeesCharges) contextValidateFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeDetail); i++ {

		if m.FeeChargeDetail[i] != nil {
			if err := m.FeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeesCharges" + "." + "FeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesCharges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesCharges) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesCharges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeCapItems0
type OBPCAData1OtherFeesChargesFeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [AcademicTerm Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Free text for adding  extra details for fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b p c a data1 other fees charges fee charge cap items0
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AcademicTerm","Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodAcademicTerm string = "AcademicTerm"

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ServiceCAccountFee","ServiceCAccountFeeMonthly","ServiceCOther","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeCapItems0FeeTypeItemsEnum = append(oBPCAData1OtherFeesChargesFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBPCAData1OtherFeesChargesFeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBPCAData1OtherFeesChargesFeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 other fees charges fee charge cap items0 based on the context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0
type OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 other fees charges fee charge cap items0 other fee type items0
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge cap items0 other fee type items0 based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0 Other fees/charges details
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0 struct {

	// ApplicationFrequency
	//
	// How frequently the fee/charge is applied to the account
	// Required: true
	// Enum: [AccountClosing AccountOpening AcademicTerm ChargingPeriod Daily PerItem Monthly OnAccountAnniversary Other PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// CalculationFrequency
	//
	// How frequently the fee/charge is calculated
	// Enum: [AccountClosing AccountOpening AcademicTerm ChargingPeriod Daily PerItem Monthly OnAccountAnniversary Other PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// FeeAmount
	//
	// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeAmount string `json:"FeeAmount,omitempty"`

	// fee applicable range
	FeeApplicableRange *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange `json:"FeeApplicableRange,omitempty"`

	// FeeCategory
	//
	// Categorisation of fees and charges into standard categories.
	// Required: true
	// Enum: [Other Servicing]
	FeeCategory *string `json:"FeeCategory"`

	// FeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge
	FeeChargeCap []*OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0 `json:"FeeChargeCap"`

	// FeeRate
	//
	// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	FeeRate string `json:"FeeRate,omitempty"`

	// FeeRateType
	//
	// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
	// Enum: [LinkedBaseRate Gross Net Other]
	FeeRateType string `json:"FeeRateType,omitempty"`

	// FeeType
	//
	// Fee/Charge Type
	// Required: true
	// Enum: [ServiceCAccountFee ServiceCAccountFeeMonthly ServiceCOther Other]
	FeeType *string `json:"FeeType"`

	// Notes
	//
	// Optional additional notes to supplement the fee/charge details.
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// other fee category type
	OtherFeeCategoryType *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType `json:"OtherFeeCategoryType,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType `json:"OtherFeeType,omitempty"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeApplicableRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeCategoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountClosing","AccountOpening","AcademicTerm","ChargingPeriod","Daily","PerItem","Monthly","OnAccountAnniversary","Other","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeApplicationFrequencyPropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyAccountClosing captures enum value "AccountClosing"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyAccountClosing string = "AccountClosing"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyAccountOpening captures enum value "AccountOpening"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyAccountOpening string = "AccountOpening"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyAcademicTerm string = "AcademicTerm"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyDaily string = "Daily"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerItem captures enum value "PerItem"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerItem string = "PerItem"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyOnAccountAnniversary captures enum value "OnAccountAnniversary"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyOnAccountAnniversary string = "OnAccountAnniversary"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyOther captures enum value "Other"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyOther string = "Other"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerHour captures enum value "PerHour"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerHour string = "PerHour"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerOccurrence string = "PerOccurrence"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerSheet captures enum value "PerSheet"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerSheet string = "PerSheet"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerTransaction captures enum value "PerTransaction"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerTransaction string = "PerTransaction"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencySixMonthly captures enum value "SixMonthly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencySixMonthly string = "SixMonthly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyStatementMonthly string = "StatementMonthly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountClosing","AccountOpening","AcademicTerm","ChargingPeriod","Daily","PerItem","Monthly","OnAccountAnniversary","Other","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeCalculationFrequencyPropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyAccountClosing captures enum value "AccountClosing"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyAccountClosing string = "AccountClosing"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyAccountOpening captures enum value "AccountOpening"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyAccountOpening string = "AccountOpening"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyAcademicTerm string = "AcademicTerm"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyDaily captures enum value "Daily"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyDaily string = "Daily"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerItem captures enum value "PerItem"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerItem string = "PerItem"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyMonthly string = "Monthly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyOnAccountAnniversary captures enum value "OnAccountAnniversary"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyOnAccountAnniversary string = "OnAccountAnniversary"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyOther captures enum value "Other"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyOther string = "Other"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerHour captures enum value "PerHour"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerHour string = "PerHour"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerOccurrence string = "PerOccurrence"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerSheet captures enum value "PerSheet"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerSheet string = "PerSheet"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerTransaction captures enum value "PerTransaction"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerTransaction string = "PerTransaction"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencySixMonthly captures enum value "SixMonthly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencySixMonthly string = "SixMonthly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyStatementMonthly string = "StatementMonthly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyWeekly string = "Weekly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeAmount", "body", m.FeeAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeApplicableRange(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeApplicableRange) { // not required
		return nil
	}

	if m.FeeApplicableRange != nil {
		if err := m.FeeApplicableRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeApplicableRange")
			}
			return err
		}
	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Other","Servicing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeCategoryPropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeCategoryPropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeCategoryOther captures enum value "Other"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeCategoryOther string = "Other"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeCategoryServicing captures enum value "Servicing"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeCategoryServicing string = "Servicing"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeCategory(formats strfmt.Registry) error {

	if err := validate.Required("FeeCategory", "body", m.FeeCategory); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeCategoryEnum("FeeCategory", "body", *m.FeeCategory); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.FeeChargeCap); i++ {
		if swag.IsZero(m.FeeChargeCap[i]) { // not required
			continue
		}

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeRate", "body", m.FeeRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LinkedBaseRate","Gross","Net","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeRateTypePropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeRateTypePropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeLinkedBaseRate captures enum value "LinkedBaseRate"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeLinkedBaseRate string = "LinkedBaseRate"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeGross captures enum value "Gross"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeGross string = "Gross"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeNet captures enum value "Net"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeNet string = "Net"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeOther captures enum value "Other"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeRateTypeOther string = "Other"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeRateTypeEnum("FeeRateType", "body", m.FeeRateType); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ServiceCAccountFee","ServiceCAccountFeeMonthly","ServiceCOther","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeTypePropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeTypePropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeServiceCAccountFee captures enum value "ServiceCAccountFee"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeServiceCAccountFee string = "ServiceCAccountFee"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeServiceCAccountFeeMonthly captures enum value "ServiceCAccountFeeMonthly"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeServiceCAccountFeeMonthly string = "ServiceCAccountFeeMonthly"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeServiceCOther captures enum value "ServiceCOther"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeServiceCOther string = "ServiceCOther"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeOther captures enum value "Other"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeTypeOther string = "Other"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0TypeFeeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeTypeEnum("FeeType", "body", *m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateOtherFeeCategoryType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeCategoryType) { // not required
		return nil
	}

	if m.OtherFeeCategoryType != nil {
		if err := m.OtherFeeCategoryType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeCategoryType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b p c a data1 other fees charges fee charge detail items0 based on the context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeApplicableRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeCategoryType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) contextValidateFeeApplicableRange(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeApplicableRange != nil {
		if err := m.FeeApplicableRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeApplicableRange")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) contextValidateFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeCap); i++ {

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) contextValidateOtherFeeCategoryType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeCategoryType != nil {
		if err := m.OtherFeeCategoryType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeCategoryType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange FeeApplicableRange
//
// Range or amounts or rates for which the fee/charge applies
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange struct {

	// MaximumAmount
	//
	// Maximum Amount on which fee is applicable (where it is expressed as an amount)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	MaximumAmount string `json:"MaximumAmount,omitempty"`

	// MaximumRate
	//
	// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	MaximumRate string `json:"MaximumRate,omitempty"`

	// MinimumAmount
	//
	// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	MinimumAmount string `json:"MinimumAmount,omitempty"`

	// MinimumRate
	//
	// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	MinimumRate string `json:"MinimumRate,omitempty"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 fee applicable range
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaximumAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) validateMaximumAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MaximumAmount", "body", m.MaximumAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) validateMaximumRate(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MaximumRate", "body", m.MaximumRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) validateMinimumAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MinimumAmount", "body", m.MinimumAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) validateMinimumRate(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MinimumRate", "body", m.MinimumRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge detail items0 fee applicable range based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeApplicableRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [AcademicTerm Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Free text for adding  extra details for fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 fee charge cap items0
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AcademicTerm","Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodAcademicTerm string = "AcademicTerm"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ServiceCAccountFee","ServiceCAccountFeeMonthly","ServiceCOther","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 other fees charges fee charge detail items0 fee charge cap items0 based on the context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 fee charge cap items0 other fee type items0
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge detail items0 fee charge cap items0 other fee type items0 based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies not covered in the standard code list
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 other application frequency
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge detail items0 other application frequency based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in standard code set.
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 other calculation frequency
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge detail items0 other calculation frequency based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType OtherFeeCategoryType
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 other fee category type
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeCategoryType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeCategoryType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeCategoryType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeCategoryType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeCategoryType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeCategoryType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeCategoryType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeCategoryType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeCategoryType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge detail items0 other fee category type based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeCategoryType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType OtherFeeRateType
//
// Other fee rate type which is not available in the standard code set
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 other fee rate type
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeRateType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge detail items0 other fee rate type based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeRateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType OtherFeeType
//
// Other Fee/charge type which is not available in the standard code set
//
// swagger:model OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType
type OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// FeeCategory
	//
	// Categorisation of fees and charges into standard categories.
	// Required: true
	// Enum: [Other Servicing]
	FeeCategory *string `json:"FeeCategory"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 other fees charges fee charge detail items0 other fee type
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Other","Servicing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum = append(oBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum, v)
	}
}

const (

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeFeeCategoryOther captures enum value "Other"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeFeeCategoryOther string = "Other"

	// OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeFeeCategoryServicing captures enum value "Servicing"
	OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeFeeCategoryServicing string = "Servicing"
)

// prop value enum
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) validateFeeCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeTypeTypeFeeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) validateFeeCategory(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"FeeCategory", "body", m.FeeCategory); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeCategoryEnum("OtherFeeType"+"."+"FeeCategory", "body", *m.FeeCategory); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 other fees charges fee charge detail items0 other fee type based on context it is used
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OtherFeesChargesFeeChargeDetailItems0OtherFeeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1Overdraft Overdraft
//
// Details about Overdraft rates, fees & charges
//
// swagger:model OBPCAData1Overdraft
type OBPCAData1Overdraft struct {

	// Notes
	//
	// Associated Notes about the overdraft rates
	Notes []string `json:"Notes"`

	// OverdraftTierBandSet
	//
	// Tier band set details
	// Required: true
	// Min Items: 1
	OverdraftTierBandSet []*OBPCAData1OverdraftOverdraftTierBandSetItems0 `json:"OverdraftTierBandSet"`
}

// Validate validates this o b p c a data1 overdraft
func (m *OBPCAData1Overdraft) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftTierBandSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1Overdraft) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Overdraft"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Overdraft"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1Overdraft) validateOverdraftTierBandSet(formats strfmt.Registry) error {

	if err := validate.Required("Overdraft"+"."+"OverdraftTierBandSet", "body", m.OverdraftTierBandSet); err != nil {
		return err
	}

	iOverdraftTierBandSetSize := int64(len(m.OverdraftTierBandSet))

	if err := validate.MinItems("Overdraft"+"."+"OverdraftTierBandSet", "body", iOverdraftTierBandSetSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftTierBandSet); i++ {
		if swag.IsZero(m.OverdraftTierBandSet[i]) { // not required
			continue
		}

		if m.OverdraftTierBandSet[i] != nil {
			if err := m.OverdraftTierBandSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Overdraft" + "." + "OverdraftTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft based on the context it is used
func (m *OBPCAData1Overdraft) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftTierBandSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1Overdraft) contextValidateOverdraftTierBandSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftTierBandSet); i++ {

		if m.OverdraftTierBandSet[i] != nil {
			if err := m.OverdraftTierBandSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Overdraft" + "." + "OverdraftTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1Overdraft) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1Overdraft) UnmarshalBinary(b []byte) error {
	var res OBPCAData1Overdraft
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0 Tier band set details
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0 struct {

	// AuthorisedIndicator
	//
	// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
	AuthorisedIndicator bool `json:"AuthorisedIndicator,omitempty"`

	// BufferAmount
	//
	// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	BufferAmount string `json:"BufferAmount,omitempty"`

	// Identification
	//
	// Unique and unambiguous identification of a  Tier Band for a overdraft product.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the overdraft Tier Band Set details
	Notes []string `json:"Notes"`

	// OverdraftFeesCharges
	//
	// Overdraft fees and charges details
	OverdraftFeesCharges []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 `json:"OverdraftFeesCharges"`

	// OverdraftTierBand
	//
	// Provides overdraft details for a specific tier or band
	// Required: true
	// Min Items: 1
	OverdraftTierBand []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 `json:"OverdraftTierBand"`

	// OverdraftType
	//
	// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
	// Enum: [Committed OnDemand Other]
	OverdraftType string `json:"OverdraftType,omitempty"`

	// TierBandMethod
	//
	// The methodology of how overdraft is charged. It can be:
	// 'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable).
	// 'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
	// 'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
	// Required: true
	// Enum: [Tiered Whole Banded]
	TierBandMethod *string `json:"TierBandMethod"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBufferAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftTierBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBandMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateBufferAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.BufferAmount) { // not required
		return nil
	}

	if err := validate.Pattern("BufferAmount", "body", m.BufferAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {
		if swag.IsZero(m.OverdraftFeesCharges[i]) { // not required
			continue
		}

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftTierBand(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftTierBand", "body", m.OverdraftTierBand); err != nil {
		return err
	}

	iOverdraftTierBandSize := int64(len(m.OverdraftTierBand))

	if err := validate.MinItems("OverdraftTierBand", "body", iOverdraftTierBandSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftTierBand); i++ {
		if swag.IsZero(m.OverdraftTierBand[i]) { // not required
			continue
		}

		if m.OverdraftTierBand[i] != nil {
			if err := m.OverdraftTierBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Committed","OnDemand","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeCommitted captures enum value "Committed"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeCommitted string = "Committed"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeOnDemand captures enum value "OnDemand"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeOnDemand string = "OnDemand"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTypeOther string = "Other"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateOverdraftType(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverdraftTypeEnum("OverdraftType", "body", m.OverdraftType); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tiered","Whole","Banded"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodTiered captures enum value "Tiered"
	OBPCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodTiered string = "Tiered"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodWhole captures enum value "Whole"
	OBPCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodWhole string = "Whole"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodBanded captures enum value "Banded"
	OBPCAData1OverdraftOverdraftTierBandSetItems0TierBandMethodBanded string = "Banded"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateTierBandMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) validateTierBandMethod(formats strfmt.Registry) error {

	if err := validate.Required("TierBandMethod", "body", m.TierBandMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierBandMethodEnum("TierBandMethod", "body", *m.TierBandMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftTierBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) contextValidateOverdraftFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) contextValidateOverdraftTierBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftTierBand); i++ {

		if m.OverdraftTierBand[i] != nil {
			if err := m.OverdraftTierBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 Overdraft fees and charges details
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 struct {

	// OverdraftFeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge
	OverdraftFeeChargeCap []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`

	// OverdraftFeeChargeDetail
	//
	// Details about the fees/charges
	// Required: true
	// Min Items: 1
	OverdraftFeeChargeDetail []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 `json:"OverdraftFeeChargeDetail"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeDetail", "body", m.OverdraftFeeChargeDetail); err != nil {
		return err
	}

	iOverdraftFeeChargeDetailSize := int64(len(m.OverdraftFeeChargeDetail))

	if err := validate.MinItems("OverdraftFeeChargeDetail", "body", iOverdraftFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {
		if swag.IsZero(m.OverdraftFeeChargeDetail[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [AcademicTerm Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`

	// OverdraftControlIndicator
	//
	// Specifies for the overdraft control feature/benefit
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AcademicTerm","Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","AnnualReview","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0 based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 Details about the fees/charges
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 struct {

	// ApplicationFrequency
	//
	// Frequency at which the overdraft charge is applied to the account
	// Required: true
	// Enum: [AccountClosing AccountOpening AcademicTerm ChargingPeriod Daily PerItem Monthly OnAccountAnniversary Other PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// CalculationFrequency
	//
	// How often is the overdraft fee/charge calculated for the account.
	// Enum: [AccountClosing AccountOpening AcademicTerm ChargingPeriod Daily PerItem Monthly OnAccountAnniversary Other PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// FeeAmount
	//
	// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeAmount string `json:"FeeAmount,omitempty"`

	// FeeRate
	//
	// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	FeeRate string `json:"FeeRate,omitempty"`

	// FeeRateType
	//
	// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Enum: [LinkedBaseRate Gross Net Other]
	FeeRateType string `json:"FeeRateType,omitempty"`

	// FeeType
	//
	// Overdraft fee type
	// Required: true
	// Enum: [ArrangedOverdraft EmergencyBorrowing BorrowingItem OverdraftRenewal AnnualReview OverdraftSetup Surcharge TempOverdraft UnauthorisedBorrowing UnauthorisedPaidTrans Other UnauthorisedUnpaidTrans]
	FeeType *string `json:"FeeType"`

	// IncrementalBorrowingAmount
	//
	// Every additional tranche of an overdraft balance to which an overdraft fee is applied
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	IncrementalBorrowingAmount string `json:"IncrementalBorrowingAmount,omitempty"`

	// Notes
	//
	// Free text for capturing any other info related to Overdraft Fees Charge Details
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType `json:"OtherFeeType,omitempty"`

	// OverdraftControlIndicator
	//
	// Specifies for the overdraft control feature/benefit
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`

	// overdraft fee charge cap
	OverdraftFeeChargeCap *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap `json:"OverdraftFeeChargeCap,omitempty"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBorrowingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountClosing","AccountOpening","AcademicTerm","ChargingPeriod","Daily","PerItem","Monthly","OnAccountAnniversary","Other","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountClosing captures enum value "AccountClosing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountClosing string = "AccountClosing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountOpening captures enum value "AccountOpening"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountOpening string = "AccountOpening"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily string = "Daily"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem captures enum value "PerItem"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem string = "PerItem"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAccountAnniversary captures enum value "OnAccountAnniversary"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAccountAnniversary string = "OnAccountAnniversary"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther string = "Other"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour captures enum value "PerHour"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour string = "PerHour"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence string = "PerOccurrence"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet captures enum value "PerSheet"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet string = "PerSheet"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction captures enum value "PerTransaction"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction string = "PerTransaction"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly captures enum value "SixMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly string = "SixMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly string = "StatementMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountClosing","AccountOpening","AcademicTerm","ChargingPeriod","Daily","PerItem","Monthly","OnAccountAnniversary","Other","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountClosing captures enum value "AccountClosing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountClosing string = "AccountClosing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountOpening captures enum value "AccountOpening"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountOpening string = "AccountOpening"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily captures enum value "Daily"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily string = "Daily"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem captures enum value "PerItem"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem string = "PerItem"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly string = "Monthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAccountAnniversary captures enum value "OnAccountAnniversary"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAccountAnniversary string = "OnAccountAnniversary"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther string = "Other"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour captures enum value "PerHour"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour string = "PerHour"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence string = "PerOccurrence"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet captures enum value "PerSheet"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet string = "PerSheet"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction captures enum value "PerTransaction"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction string = "PerTransaction"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly captures enum value "SixMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly string = "SixMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly string = "StatementMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly string = "Weekly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeAmount", "body", m.FeeAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeRate", "body", m.FeeRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LinkedBaseRate","Gross","Net","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeLinkedBaseRate captures enum value "LinkedBaseRate"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeLinkedBaseRate string = "LinkedBaseRate"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross captures enum value "Gross"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross string = "Gross"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeNet captures enum value "Net"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeNet string = "Net"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther string = "Other"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeRateTypeEnum("FeeRateType", "body", m.FeeRateType); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","AnnualReview","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft captures enum value "ArrangedOverdraft"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft string = "ArrangedOverdraft"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing captures enum value "EmergencyBorrowing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing string = "EmergencyBorrowing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem captures enum value "BorrowingItem"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem string = "BorrowingItem"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal captures enum value "OverdraftRenewal"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal string = "OverdraftRenewal"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview captures enum value "AnnualReview"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview string = "AnnualReview"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup captures enum value "OverdraftSetup"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup string = "OverdraftSetup"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge captures enum value "Surcharge"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge string = "Surcharge"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft captures enum value "TempOverdraft"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft string = "TempOverdraft"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing captures enum value "UnauthorisedBorrowing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing string = "UnauthorisedBorrowing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans captures enum value "UnauthorisedPaidTrans"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans string = "UnauthorisedPaidTrans"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther string = "Other"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans captures enum value "UnauthorisedUnpaidTrans"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans string = "UnauthorisedUnpaidTrans"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeTypeEnum("FeeType", "body", *m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateIncrementalBorrowingAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBorrowingAmount) { // not required
		return nil
	}

	if err := validate.Pattern("IncrementalBorrowingAmount", "body", m.IncrementalBorrowingAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	if m.OverdraftFeeChargeCap != nil {
		if err := m.OverdraftFeeChargeCap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OverdraftFeeChargeCap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	if m.OverdraftFeeChargeCap != nil {
		if err := m.OverdraftFeeChargeCap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OverdraftFeeChargeCap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies that are not available in the standard code list
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in the standard code set.
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType OtherFeeRateType
//
// Other fee rate type code which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeRateType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType OtherFeeType
//
// Other Fee type which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap OverdraftFeeChargeCap
//
// Details about any caps (maximum charges) that apply to a particular fee/charge
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [AcademicTerm Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0 `json:"OtherFeeType"`

	// OverdraftControlIndicator
	//
	// Specifies for the overdraft control feature/benefit
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AcademicTerm","Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodDay captures enum value "Day"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodDay string = "Day"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodHalfYear captures enum value "Half Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodHalfYear string = "Half Year"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodMonth captures enum value "Month"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodMonth string = "Month"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodQuarter captures enum value "Quarter"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodQuarter string = "Quarter"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodWeek captures enum value "Week"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodWeek string = "Week"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodYear captures enum value "Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("OverdraftFeeChargeCap"+"."+"CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("OverdraftFeeChargeCap"+"."+"FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","AnnualReview","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum, v)
	}
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeCap"+"."+"FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("OverdraftFeeChargeCap"+"."+"FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("OverdraftFeeChargeCap"+"."+"FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMinimum captures enum value "Minimum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMinimum string = "Minimum"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMaximum captures enum value "Maximum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeCap"+"."+"MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("OverdraftFeeChargeCap"+"."+"MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("OverdraftFeeChargeCap"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("OverdraftFeeChargeCap"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + "OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + "OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap other fee type items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap other fee type items0 based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 Provides overdraft details for a specific tier or band
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 struct {

	// BankGuaranteedIndicator
	//
	// Indicates that a bank provides the overdraft limit up to TierValueMIn to all customers automatically
	BankGuaranteedIndicator bool `json:"BankGuaranteedIndicator,omitempty"`

	// EAR
	//
	// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
	// used interchangeably), being the actual annual interest rate of an Overdraft.
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	EAR string `json:"EAR,omitempty"`

	// Identification
	//
	// Unique and unambiguous identification of a  Tier Band for a overdraft.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the Tier/band details
	Notes []string `json:"Notes"`

	// OverdraftFeesCharges
	//
	// Overdraft fees and charges
	OverdraftFeesCharges []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 `json:"OverdraftFeesCharges"`

	// OverdraftInterestChargingCoverage
	//
	// Interest charged on whole amount or tiered/banded
	// Enum: [Tiered Whole]
	OverdraftInterestChargingCoverage string `json:"OverdraftInterestChargingCoverage,omitempty"`

	// RepresentativeAPR
	//
	// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	RepresentativeAPR string `json:"RepresentativeAPR,omitempty"`

	// TierValueMax
	//
	// Maximum value of Overdraft Tier/Band
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMax string `json:"TierValueMax,omitempty"`

	// TierValueMin
	//
	// Minimum value of Overdraft Tier/Band
	// Required: true
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	TierValueMin *string `json:"TierValueMin"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEAR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftInterestChargingCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepresentativeAPR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateEAR(formats strfmt.Registry) error {
	if swag.IsZero(m.EAR) { // not required
		return nil
	}

	if err := validate.Pattern("EAR", "body", m.EAR, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {
		if swag.IsZero(m.OverdraftFeesCharges[i]) { // not required
			continue
		}

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tiered","Whole"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageTiered captures enum value "Tiered"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageTiered string = "Tiered"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageWhole captures enum value "Whole"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageWhole string = "Whole"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftInterestChargingCoverageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftInterestChargingCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftInterestChargingCoverage) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverdraftInterestChargingCoverageEnum("OverdraftInterestChargingCoverage", "body", m.OverdraftInterestChargingCoverage); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateRepresentativeAPR(formats strfmt.Registry) error {
	if swag.IsZero(m.RepresentativeAPR) { // not required
		return nil
	}

	if err := validate.Pattern("RepresentativeAPR", "body", m.RepresentativeAPR, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateTierValueMax(formats strfmt.Registry) error {
	if swag.IsZero(m.TierValueMax) { // not required
		return nil
	}

	if err := validate.Pattern("TierValueMax", "body", m.TierValueMax, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateTierValueMin(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMin", "body", m.TierValueMin); err != nil {
		return err
	}

	if err := validate.Pattern("TierValueMin", "body", *m.TierValueMin, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) contextValidateOverdraftFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 Overdraft fees and charges
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 struct {

	// OverdraftFeeChargeCap
	//
	// Details about any caps (maximum charges) that apply to a particular fee/charge
	OverdraftFeeChargeCap []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`

	// OverdraftFeeChargeDetail
	//
	// Details about the fees/charges
	// Required: true
	// Min Items: 1
	OverdraftFeeChargeDetail []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 `json:"OverdraftFeeChargeDetail"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeDetail", "body", m.OverdraftFeeChargeDetail); err != nil {
		return err
	}

	iOverdraftFeeChargeDetailSize := int64(len(m.OverdraftFeeChargeDetail))

	if err := validate.MinItems("OverdraftFeeChargeDetail", "body", iOverdraftFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {
		if swag.IsZero(m.OverdraftFeeChargeDetail[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [AcademicTerm Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`

	// OverdraftControlIndicator
	//
	// Specifies for the overdraft control feature/benefit
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AcademicTerm","Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay captures enum value "Day"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodDay string = "Day"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear captures enum value "Half Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodHalfYear string = "Half Year"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth captures enum value "Month"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodMonth string = "Month"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter captures enum value "Quarter"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodQuarter string = "Quarter"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek captures enum value "Week"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodWeek string = "Week"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear captures enum value "Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0CappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","AnnualReview","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum captures enum value "Minimum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMinimum string = "Minimum"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum captures enum value "Maximum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0MinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0TypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0 based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 Details about the fees/charges
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 struct {

	// ApplicationFrequency
	//
	// Frequency at which the overdraft charge is applied to the account
	// Required: true
	// Enum: [AccountClosing AccountOpening AcademicTerm ChargingPeriod Daily PerItem Monthly OnAccountAnniversary Other PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// CalculationFrequency
	//
	// How often is the overdraft fee/charge calculated for the account.
	// Enum: [AccountClosing AccountOpening AcademicTerm ChargingPeriod Daily PerItem Monthly OnAccountAnniversary Other PerHour PerOccurrence PerSheet PerTransaction PerTransactionAmount PerTransactionPercentage Quarterly SixMonthly StatementMonthly Weekly Yearly]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// FeeAmount
	//
	// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeAmount string `json:"FeeAmount,omitempty"`

	// FeeRate
	//
	// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	FeeRate string `json:"FeeRate,omitempty"`

	// FeeRateType
	//
	// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
	// Enum: [LinkedBaseRate Gross Net Other]
	FeeRateType string `json:"FeeRateType,omitempty"`

	// FeeType
	//
	// Overdraft fee type
	// Required: true
	// Enum: [ArrangedOverdraft EmergencyBorrowing BorrowingItem OverdraftRenewal AnnualReview OverdraftSetup Surcharge TempOverdraft UnauthorisedBorrowing UnauthorisedPaidTrans Other UnauthorisedUnpaidTrans]
	FeeType *string `json:"FeeType"`

	// IncrementalBorrowingAmount
	//
	// Every additional tranche of an overdraft balance to which an overdraft fee is applied
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	IncrementalBorrowingAmount string `json:"IncrementalBorrowingAmount,omitempty"`

	// Notes
	//
	// Free text for capturing any other info related to Overdraft Fees Charge Details
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType `json:"OtherFeeType,omitempty"`

	// OverdraftControlIndicator
	//
	// Specifies for the overdraft control feature/benefit
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`

	// overdraft fee charge cap
	OverdraftFeeChargeCap *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap `json:"OverdraftFeeChargeCap,omitempty"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBorrowingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountClosing","AccountOpening","AcademicTerm","ChargingPeriod","Daily","PerItem","Monthly","OnAccountAnniversary","Other","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountClosing captures enum value "AccountClosing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountClosing string = "AccountClosing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountOpening captures enum value "AccountOpening"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAccountOpening string = "AccountOpening"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily captures enum value "Daily"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyDaily string = "Daily"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem captures enum value "PerItem"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerItem string = "PerItem"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyMonthly string = "Monthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAccountAnniversary captures enum value "OnAccountAnniversary"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOnAccountAnniversary string = "OnAccountAnniversary"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyOther string = "Other"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour captures enum value "PerHour"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerHour string = "PerHour"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerOccurrence string = "PerOccurrence"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet captures enum value "PerSheet"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerSheet string = "PerSheet"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction captures enum value "PerTransaction"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransaction string = "PerTransaction"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly captures enum value "SixMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencySixMonthly string = "SixMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyStatementMonthly string = "StatementMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyWeekly string = "Weekly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly captures enum value "Yearly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0ApplicationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountClosing","AccountOpening","AcademicTerm","ChargingPeriod","Daily","PerItem","Monthly","OnAccountAnniversary","Other","PerHour","PerOccurrence","PerSheet","PerTransaction","PerTransactionAmount","PerTransactionPercentage","Quarterly","SixMonthly","StatementMonthly","Weekly","Yearly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountClosing captures enum value "AccountClosing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountClosing string = "AccountClosing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountOpening captures enum value "AccountOpening"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAccountOpening string = "AccountOpening"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod captures enum value "ChargingPeriod"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyChargingPeriod string = "ChargingPeriod"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily captures enum value "Daily"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyDaily string = "Daily"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem captures enum value "PerItem"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerItem string = "PerItem"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly captures enum value "Monthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyMonthly string = "Monthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAccountAnniversary captures enum value "OnAccountAnniversary"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOnAccountAnniversary string = "OnAccountAnniversary"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyOther string = "Other"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour captures enum value "PerHour"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerHour string = "PerHour"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence captures enum value "PerOccurrence"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerOccurrence string = "PerOccurrence"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet captures enum value "PerSheet"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerSheet string = "PerSheet"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction captures enum value "PerTransaction"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransaction string = "PerTransaction"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount captures enum value "PerTransactionAmount"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionAmount string = "PerTransactionAmount"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage captures enum value "PerTransactionPercentage"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyPerTransactionPercentage string = "PerTransactionPercentage"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly captures enum value "Quarterly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyQuarterly string = "Quarterly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly captures enum value "SixMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencySixMonthly string = "SixMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly captures enum value "StatementMonthly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyStatementMonthly string = "StatementMonthly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly captures enum value "Weekly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyWeekly string = "Weekly"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly captures enum value "Yearly"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0CalculationFrequencyYearly string = "Yearly"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeAmount", "body", m.FeeAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeRate", "body", m.FeeRate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LinkedBaseRate","Gross","Net","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeLinkedBaseRate captures enum value "LinkedBaseRate"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeLinkedBaseRate string = "LinkedBaseRate"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross captures enum value "Gross"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeGross string = "Gross"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeNet captures enum value "Net"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeNet string = "Net"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeRateTypeOther string = "Other"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeRateTypeEnum("FeeRateType", "body", m.FeeRateType); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","AnnualReview","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft captures enum value "ArrangedOverdraft"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeArrangedOverdraft string = "ArrangedOverdraft"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing captures enum value "EmergencyBorrowing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeEmergencyBorrowing string = "EmergencyBorrowing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem captures enum value "BorrowingItem"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeBorrowingItem string = "BorrowingItem"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal captures enum value "OverdraftRenewal"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftRenewal string = "OverdraftRenewal"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview captures enum value "AnnualReview"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeAnnualReview string = "AnnualReview"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup captures enum value "OverdraftSetup"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOverdraftSetup string = "OverdraftSetup"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge captures enum value "Surcharge"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeSurcharge string = "Surcharge"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft captures enum value "TempOverdraft"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeTempOverdraft string = "TempOverdraft"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing captures enum value "UnauthorisedBorrowing"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedBorrowing string = "UnauthorisedBorrowing"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans captures enum value "UnauthorisedPaidTrans"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedPaidTrans string = "UnauthorisedPaidTrans"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther captures enum value "Other"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeOther string = "Other"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans captures enum value "UnauthorisedUnpaidTrans"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0FeeTypeUnauthorisedUnpaidTrans string = "UnauthorisedUnpaidTrans"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0TypeFeeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeeTypeEnum("FeeType", "body", *m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateIncrementalBorrowingAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBorrowingAmount) { // not required
		return nil
	}

	if err := validate.Pattern("IncrementalBorrowingAmount", "body", m.IncrementalBorrowingAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	if m.OverdraftFeeChargeCap != nil {
		if err := m.OverdraftFeeChargeCap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OverdraftFeeChargeCap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	if m.OverdraftFeeChargeCap != nil {
		if err := m.OverdraftFeeChargeCap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OverdraftFeeChargeCap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency OtherApplicationFrequency
//
// Other application frequencies that are not available in the standard code list
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherApplicationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherApplicationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherApplicationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other application frequency based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherApplicationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency OtherCalculationFrequency
//
// Other calculation frequency which is not available in the standard code set.
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherCalculationFrequency"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherCalculationFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherCalculationFrequency"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other calculation frequency based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherCalculationFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType OtherFeeRateType
//
// Other fee rate type code which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeRateType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeRateType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee rate type based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeRateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType OtherFeeType
//
// Other Fee type which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("OtherFeeType"+"."+"Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherFeeType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherFeeType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherFeeType"+"."+"Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 other fee type based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OtherFeeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap OverdraftFeeChargeCap
//
// Details about any caps (maximum charges) that apply to a particular fee/charge
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap struct {

	// CappingPeriod
	//
	// Period e.g. day, week, month etc. for which the fee/charge is capped
	// Enum: [AcademicTerm Day Half Year Month Quarter Week Year]
	CappingPeriod string `json:"CappingPeriod,omitempty"`

	// FeeCapAmount
	//
	// Cap amount charged for a fee/charge
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	FeeCapAmount string `json:"FeeCapAmount,omitempty"`

	// FeeCapOccurrence
	//
	// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
	FeeCapOccurrence float32 `json:"FeeCapOccurrence,omitempty"`

	// FeeType
	//
	// Fee/charge type which is being capped
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// MinMaxType
	//
	// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
	// Required: true
	// Enum: [Minimum Maximum]
	MinMaxType *string `json:"MinMaxType"`

	// Notes
	//
	// Notes related to Overdraft fee charge cap
	Notes []string `json:"Notes"`

	// OtherFeeType
	//
	// Other fee type code which is not available in the standard code set
	OtherFeeType []*OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0 `json:"OtherFeeType"`

	// OverdraftControlIndicator
	//
	// Specifies for the overdraft control feature/benefit
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AcademicTerm","Day","Half Year","Month","Quarter","Week","Year"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodAcademicTerm captures enum value "AcademicTerm"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodAcademicTerm string = "AcademicTerm"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodDay captures enum value "Day"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodDay string = "Day"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodHalfYear captures enum value "Half Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodHalfYear string = "Half Year"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodMonth captures enum value "Month"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodMonth string = "Month"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodQuarter captures enum value "Quarter"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodQuarter string = "Quarter"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodWeek captures enum value "Week"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodWeek string = "Week"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodYear captures enum value "Year"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapCappingPeriodYear string = "Year"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateCappingPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeCappingPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateCappingPeriodEnum("OverdraftFeeChargeCap"+"."+"CappingPeriod", "body", m.CappingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := validate.Pattern("OverdraftFeeChargeCap"+"."+"FeeCapAmount", "body", m.FeeCapAmount, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ArrangedOverdraft","EmergencyBorrowing","BorrowingItem","OverdraftRenewal","AnnualReview","OverdraftSetup","Surcharge","TempOverdraft","UnauthorisedBorrowing","UnauthorisedPaidTrans","Other","UnauthorisedUnpaidTrans"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum, v)
	}
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapFeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeCap"+"."+"FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("OverdraftFeeChargeCap"+"."+"FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("OverdraftFeeChargeCap"+"."+"FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

var oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minimum","Maximum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum = append(oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum, v)
	}
}

const (

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMinimum captures enum value "Minimum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMinimum string = "Minimum"

	// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMaximum captures enum value "Maximum"
	OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapMinMaxTypeMaximum string = "Maximum"
)

// prop value enum
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateMinMaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapTypeMinMaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeCap"+"."+"MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinMaxTypeEnum("OverdraftFeeChargeCap"+"."+"MinMaxType", "body", *m.MinMaxType); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("OverdraftFeeChargeCap"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("OverdraftFeeChargeCap"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + "OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap based on the context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + "OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0
type OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0 struct {

	// Code
	//
	// The four letter Mnemonic used within an XML file to identify a code
	// Max Length: 4
	// Min Length: 0
	// Pattern: ^\w{0,4}$
	Code *string `json:"Code,omitempty"`

	// Description
	//
	// Description to describe the purpose of the code
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// Name
	//
	// Long name associated with the code
	// Required: true
	// Max Length: 70
	// Min Length: 1
	Name *string `json:"Name"`
}

// Validate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap other fee type items0
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MinLength("Code", "body", *m.Code, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("Code", "body", *m.Code, 4); err != nil {
		return err
	}

	if err := validate.Pattern("Code", "body", *m.Code, `^\w{0,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b p c a data1 overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap other fee type items0 based on context it is used
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBPCAData1OverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapOtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBPCAData1ProductDetails ProductDetails
//
// swagger:model OBPCAData1ProductDetails
type OBPCAData1ProductDetails struct {

	// MonthlyMaximumCharge
	//
	// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
	// Pattern: ^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$
	MonthlyMaximumCharge string `json:"MonthlyMaximumCharge,omitempty"`

	// Notes
	//
	// Optional additional notes to supplement the Core product details
	Notes []string `json:"Notes"`

	// Segment
	//
	// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
	//
	// Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd
	// With respect to PCA products, they are segmented in relation to different markets that they wish to focus on.
	Segment []string `json:"Segment"`
}

// Validate validates this o b p c a data1 product details
func (m *OBPCAData1ProductDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonthlyMaximumCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBPCAData1ProductDetails) validateMonthlyMaximumCharge(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthlyMaximumCharge) { // not required
		return nil
	}

	if err := validate.Pattern("ProductDetails"+"."+"MonthlyMaximumCharge", "body", m.MonthlyMaximumCharge, `^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBPCAData1ProductDetails) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("ProductDetails"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("ProductDetails"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

var oBPCAData1ProductDetailsSegmentItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Basic","BenefitAndReward","CreditInterest","Cashback","General","Graduate","Other","Overdraft","Packaged","Premium","Reward","Student","YoungAdult","Youth"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBPCAData1ProductDetailsSegmentItemsEnum = append(oBPCAData1ProductDetailsSegmentItemsEnum, v)
	}
}

func (m *OBPCAData1ProductDetails) validateSegmentItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBPCAData1ProductDetailsSegmentItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBPCAData1ProductDetails) validateSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.Segment) { // not required
		return nil
	}

	for i := 0; i < len(m.Segment); i++ {

		// value enum
		if err := m.validateSegmentItemsEnum("ProductDetails"+"."+"Segment"+"."+strconv.Itoa(i), "body", m.Segment[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this o b p c a data1 product details based on context it is used
func (m *OBPCAData1ProductDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBPCAData1ProductDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBPCAData1ProductDetails) UnmarshalBinary(b []byte) error {
	var res OBPCAData1ProductDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
