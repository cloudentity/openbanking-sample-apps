// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBReadOffer1 o b read offer1
//
// swagger:model OBReadOffer1
type OBReadOffer1 struct {

	// data
	// Required: true
	Data *OBReadOffer1Data `json:"Data"`

	// links
	Links *Links `json:"Links,omitempty"`

	// meta
	Meta *Meta `json:"Meta,omitempty"`
}

// Validate validates this o b read offer1
func (m *OBReadOffer1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1) validateData(formats strfmt.Registry) error {

	if err := validate.Required("Data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read offer1 based on the context it is used
func (m *OBReadOffer1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadOffer1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadOffer1) UnmarshalBinary(b []byte) error {
	var res OBReadOffer1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadOffer1Data o b read offer1 data
//
// swagger:model OBReadOffer1Data
type OBReadOffer1Data struct {

	// offer
	Offer []*OBReadOffer1DataOfferItems0 `json:"Offer"`
}

// Validate validates this o b read offer1 data
func (m *OBReadOffer1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOffer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1Data) validateOffer(formats strfmt.Registry) error {
	if swag.IsZero(m.Offer) { // not required
		return nil
	}

	for i := 0; i < len(m.Offer); i++ {
		if swag.IsZero(m.Offer[i]) { // not required
			continue
		}

		if m.Offer[i] != nil {
			if err := m.Offer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "Offer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read offer1 data based on the context it is used
func (m *OBReadOffer1Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOffer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1Data) contextValidateOffer(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Offer); i++ {

		if m.Offer[i] != nil {
			if err := m.Offer[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "Offer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadOffer1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadOffer1Data) UnmarshalBinary(b []byte) error {
	var res OBReadOffer1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadOffer1DataOfferItems0 o b read offer1 data offer items0
//
// swagger:model OBReadOffer1DataOfferItems0
type OBReadOffer1DataOfferItems0 struct {

	// account Id
	// Required: true
	AccountID *AccountID `json:"AccountId"`

	// amount
	Amount *OBReadOffer1DataOfferItems0Amount `json:"Amount,omitempty"`

	// Further details of the offer.
	// Max Length: 500
	// Min Length: 1
	Description string `json:"Description,omitempty"`

	// Date and time at which the offer ends.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	EndDateTime strfmt.DateTime `json:"EndDateTime,omitempty"`

	// fee
	Fee *OBReadOffer1DataOfferItems0Fee `json:"Fee,omitempty"`

	// A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.
	// Max Length: 40
	// Min Length: 1
	OfferID string `json:"OfferId,omitempty"`

	// Offer type, in a coded form.
	// Enum: [BalanceTransfer LimitIncrease MoneyTransfer Other PromotionalRate]
	OfferType string `json:"OfferType,omitempty"`

	// Rate associated with the offer type.
	// Pattern: ^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$
	Rate string `json:"Rate,omitempty"`

	// Date and time at which the offer starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"StartDateTime,omitempty"`

	// Further details of the term of the offer.
	// Max Length: 500
	// Min Length: 1
	Term string `json:"Term,omitempty"`

	// URL (Uniform Resource Locator) where documentation on the offer can be found
	// Max Length: 256
	// Min Length: 1
	URL string `json:"URL,omitempty"`

	// Value associated with the offer type.
	Value int64 `json:"Value,omitempty"`
}

// Validate validates this o b read offer1 data offer items0
func (m *OBReadOffer1DataOfferItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if m.AccountID != nil {
		if err := m.AccountID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("Description", "body", m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Description", "body", m.Description, 500); err != nil {
		return err
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(m.Fee) { // not required
		return nil
	}

	if m.Fee != nil {
		if err := m.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fee")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateOfferID(formats strfmt.Registry) error {
	if swag.IsZero(m.OfferID) { // not required
		return nil
	}

	if err := validate.MinLength("OfferId", "body", m.OfferID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OfferId", "body", m.OfferID, 40); err != nil {
		return err
	}

	return nil
}

var oBReadOffer1DataOfferItems0TypeOfferTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BalanceTransfer","LimitIncrease","MoneyTransfer","Other","PromotionalRate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadOffer1DataOfferItems0TypeOfferTypePropEnum = append(oBReadOffer1DataOfferItems0TypeOfferTypePropEnum, v)
	}
}

const (

	// OBReadOffer1DataOfferItems0OfferTypeBalanceTransfer captures enum value "BalanceTransfer"
	OBReadOffer1DataOfferItems0OfferTypeBalanceTransfer string = "BalanceTransfer"

	// OBReadOffer1DataOfferItems0OfferTypeLimitIncrease captures enum value "LimitIncrease"
	OBReadOffer1DataOfferItems0OfferTypeLimitIncrease string = "LimitIncrease"

	// OBReadOffer1DataOfferItems0OfferTypeMoneyTransfer captures enum value "MoneyTransfer"
	OBReadOffer1DataOfferItems0OfferTypeMoneyTransfer string = "MoneyTransfer"

	// OBReadOffer1DataOfferItems0OfferTypeOther captures enum value "Other"
	OBReadOffer1DataOfferItems0OfferTypeOther string = "Other"

	// OBReadOffer1DataOfferItems0OfferTypePromotionalRate captures enum value "PromotionalRate"
	OBReadOffer1DataOfferItems0OfferTypePromotionalRate string = "PromotionalRate"
)

// prop value enum
func (m *OBReadOffer1DataOfferItems0) validateOfferTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadOffer1DataOfferItems0TypeOfferTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateOfferType(formats strfmt.Registry) error {
	if swag.IsZero(m.OfferType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOfferTypeEnum("OfferType", "body", m.OfferType); err != nil {
		return err
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateRate(formats strfmt.Registry) error {
	if swag.IsZero(m.Rate) { // not required
		return nil
	}

	if err := validate.Pattern("Rate", "body", m.Rate, `^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateTerm(formats strfmt.Registry) error {
	if swag.IsZero(m.Term) { // not required
		return nil
	}

	if err := validate.MinLength("Term", "body", m.Term, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Term", "body", m.Term, 500); err != nil {
		return err
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.MinLength("URL", "body", m.URL, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("URL", "body", m.URL, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read offer1 data offer items0 based on the context it is used
func (m *OBReadOffer1DataOfferItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1DataOfferItems0) contextValidateAccountID(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountID != nil {
		if err := m.AccountID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if m.Fee != nil {
		if err := m.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadOffer1DataOfferItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadOffer1DataOfferItems0) UnmarshalBinary(b []byte) error {
	var res OBReadOffer1DataOfferItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadOffer1DataOfferItems0Amount Amount of money associated with the offer type.
//
// swagger:model OBReadOffer1DataOfferItems0Amount
type OBReadOffer1DataOfferItems0Amount struct {

	// amount
	// Required: true
	Amount *OBActiveCurrencyAndAmountSimpleType `json:"Amount"`

	// currency
	// Required: true
	Currency *ActiveOrHistoricCurrencyCode1 `json:"Currency"`
}

// Validate validates this o b read offer1 data offer items0 amount
func (m *OBReadOffer1DataOfferItems0Amount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1DataOfferItems0Amount) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("Amount"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Required("Amount"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0Amount) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("Amount"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.Required("Amount"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read offer1 data offer items0 amount based on the context it is used
func (m *OBReadOffer1DataOfferItems0Amount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1DataOfferItems0Amount) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0Amount) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadOffer1DataOfferItems0Amount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadOffer1DataOfferItems0Amount) UnmarshalBinary(b []byte) error {
	var res OBReadOffer1DataOfferItems0Amount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadOffer1DataOfferItems0Fee Fee associated with the offer type.
//
// swagger:model OBReadOffer1DataOfferItems0Fee
type OBReadOffer1DataOfferItems0Fee struct {

	// amount
	// Required: true
	Amount *OBActiveCurrencyAndAmountSimpleType `json:"Amount"`

	// currency
	// Required: true
	Currency *ActiveOrHistoricCurrencyCode1 `json:"Currency"`
}

// Validate validates this o b read offer1 data offer items0 fee
func (m *OBReadOffer1DataOfferItems0Fee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1DataOfferItems0Fee) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("Fee"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Required("Fee"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fee" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0Fee) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("Fee"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.Required("Fee"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fee" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read offer1 data offer items0 fee based on the context it is used
func (m *OBReadOffer1DataOfferItems0Fee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadOffer1DataOfferItems0Fee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fee" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadOffer1DataOfferItems0Fee) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Fee" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadOffer1DataOfferItems0Fee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadOffer1DataOfferItems0Fee) UnmarshalBinary(b []byte) error {
	var res OBReadOffer1DataOfferItems0Fee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
