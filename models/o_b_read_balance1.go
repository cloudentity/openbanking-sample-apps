// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBReadBalance1 o b read balance1
//
// swagger:model OBReadBalance1
type OBReadBalance1 struct {

	// data
	// Required: true
	Data *OBReadBalance1Data `json:"Data"`

	// links
	Links *Links `json:"Links,omitempty"`

	// meta
	Meta *Meta `json:"Meta,omitempty"`
}

// Validate validates this o b read balance1
func (m *OBReadBalance1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1) validateData(formats strfmt.Registry) error {

	if err := validate.Required("Data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read balance1 based on the context it is used
func (m *OBReadBalance1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadBalance1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadBalance1) UnmarshalBinary(b []byte) error {
	var res OBReadBalance1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadBalance1Data o b read balance1 data
//
// swagger:model OBReadBalance1Data
type OBReadBalance1Data struct {

	// balance
	// Required: true
	// Min Items: 1
	Balance []*OBReadBalance1DataBalanceItems0 `json:"Balance"`
}

// Validate validates this o b read balance1 data
func (m *OBReadBalance1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1Data) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("Data"+"."+"Balance", "body", m.Balance); err != nil {
		return err
	}

	iBalanceSize := int64(len(m.Balance))

	if err := validate.MinItems("Data"+"."+"Balance", "body", iBalanceSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Balance); i++ {
		if swag.IsZero(m.Balance[i]) { // not required
			continue
		}

		if m.Balance[i] != nil {
			if err := m.Balance[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "Balance" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read balance1 data based on the context it is used
func (m *OBReadBalance1Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1Data) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Balance); i++ {

		if m.Balance[i] != nil {
			if err := m.Balance[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "Balance" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadBalance1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadBalance1Data) UnmarshalBinary(b []byte) error {
	var res OBReadBalance1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadBalance1DataBalanceItems0 Set of elements used to define the balance details.
//
// swagger:model OBReadBalance1DataBalanceItems0
type OBReadBalance1DataBalanceItems0 struct {

	// account Id
	// Required: true
	AccountID *AccountID `json:"AccountId"`

	// amount
	// Required: true
	Amount *OBReadBalance1DataBalanceItems0Amount `json:"Amount"`

	// credit debit indicator
	// Required: true
	CreditDebitIndicator *OBCreditDebitCode2 `json:"CreditDebitIndicator"`

	// credit line
	CreditLine []*OBReadBalance1DataBalanceItems0CreditLineItems0 `json:"CreditLine"`

	// Indicates the date (and time) of the balance.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Required: true
	// Format: date-time
	DateTime *strfmt.DateTime `json:"DateTime"`

	// type
	// Required: true
	Type *OBBalanceType1Code `json:"Type"`
}

// Validate validates this o b read balance1 data balance items0
func (m *OBReadBalance1DataBalanceItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditDebitIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if m.AccountID != nil {
		if err := m.AccountID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("Amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) validateCreditDebitIndicator(formats strfmt.Registry) error {

	if err := validate.Required("CreditDebitIndicator", "body", m.CreditDebitIndicator); err != nil {
		return err
	}

	if err := validate.Required("CreditDebitIndicator", "body", m.CreditDebitIndicator); err != nil {
		return err
	}

	if m.CreditDebitIndicator != nil {
		if err := m.CreditDebitIndicator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditDebitIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) validateCreditLine(formats strfmt.Registry) error {
	if swag.IsZero(m.CreditLine) { // not required
		return nil
	}

	for i := 0; i < len(m.CreditLine); i++ {
		if swag.IsZero(m.CreditLine[i]) { // not required
			continue
		}

		if m.CreditLine[i] != nil {
			if err := m.CreditLine[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreditLine" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) validateDateTime(formats strfmt.Registry) error {

	if err := validate.Required("DateTime", "body", m.DateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("DateTime", "body", "date-time", m.DateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read balance1 data balance items0 based on the context it is used
func (m *OBReadBalance1DataBalanceItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditDebitIndicator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditLine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0) contextValidateAccountID(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountID != nil {
		if err := m.AccountID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) contextValidateCreditDebitIndicator(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditDebitIndicator != nil {
		if err := m.CreditDebitIndicator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreditDebitIndicator")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) contextValidateCreditLine(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CreditLine); i++ {

		if m.CreditLine[i] != nil {
			if err := m.CreditLine[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CreditLine" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0) UnmarshalBinary(b []byte) error {
	var res OBReadBalance1DataBalanceItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadBalance1DataBalanceItems0Amount Amount of money of the cash balance.
//
// swagger:model OBReadBalance1DataBalanceItems0Amount
type OBReadBalance1DataBalanceItems0Amount struct {

	// amount
	// Required: true
	Amount *OBActiveCurrencyAndAmountSimpleType `json:"Amount"`

	// currency
	// Required: true
	Currency *ActiveOrHistoricCurrencyCode1 `json:"Currency"`
}

// Validate validates this o b read balance1 data balance items0 amount
func (m *OBReadBalance1DataBalanceItems0Amount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0Amount) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("Amount"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Required("Amount"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0Amount) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("Amount"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.Required("Amount"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read balance1 data balance items0 amount based on the context it is used
func (m *OBReadBalance1DataBalanceItems0Amount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0Amount) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0Amount) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0Amount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0Amount) UnmarshalBinary(b []byte) error {
	var res OBReadBalance1DataBalanceItems0Amount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadBalance1DataBalanceItems0CreditLineItems0 Set of elements used to provide details on the credit line.
//
// swagger:model OBReadBalance1DataBalanceItems0CreditLineItems0
type OBReadBalance1DataBalanceItems0CreditLineItems0 struct {

	// amount
	Amount *OBReadBalance1DataBalanceItems0CreditLineItems0Amount `json:"Amount,omitempty"`

	// Indicates whether or not the credit line is included in the balance of the account.
	// Usage: If not present, credit line is not included in the balance amount of the account.
	// Required: true
	Included *bool `json:"Included"`

	// Limit type, in a coded form.
	// Enum: [Available Credit Emergency Pre-Agreed Temporary]
	Type string `json:"Type,omitempty"`
}

// Validate validates this o b read balance1 data balance items0 credit line items0
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncluded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) validateIncluded(formats strfmt.Registry) error {

	if err := validate.Required("Included", "body", m.Included); err != nil {
		return err
	}

	return nil
}

var oBReadBalance1DataBalanceItems0CreditLineItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Available","Credit","Emergency","Pre-Agreed","Temporary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadBalance1DataBalanceItems0CreditLineItems0TypeTypePropEnum = append(oBReadBalance1DataBalanceItems0CreditLineItems0TypeTypePropEnum, v)
	}
}

const (

	// OBReadBalance1DataBalanceItems0CreditLineItems0TypeAvailable captures enum value "Available"
	OBReadBalance1DataBalanceItems0CreditLineItems0TypeAvailable string = "Available"

	// OBReadBalance1DataBalanceItems0CreditLineItems0TypeCredit captures enum value "Credit"
	OBReadBalance1DataBalanceItems0CreditLineItems0TypeCredit string = "Credit"

	// OBReadBalance1DataBalanceItems0CreditLineItems0TypeEmergency captures enum value "Emergency"
	OBReadBalance1DataBalanceItems0CreditLineItems0TypeEmergency string = "Emergency"

	// OBReadBalance1DataBalanceItems0CreditLineItems0TypePreDashAgreed captures enum value "Pre-Agreed"
	OBReadBalance1DataBalanceItems0CreditLineItems0TypePreDashAgreed string = "Pre-Agreed"

	// OBReadBalance1DataBalanceItems0CreditLineItems0TypeTemporary captures enum value "Temporary"
	OBReadBalance1DataBalanceItems0CreditLineItems0TypeTemporary string = "Temporary"
)

// prop value enum
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadBalance1DataBalanceItems0CreditLineItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read balance1 data balance items0 credit line items0 based on the context it is used
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0) UnmarshalBinary(b []byte) error {
	var res OBReadBalance1DataBalanceItems0CreditLineItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadBalance1DataBalanceItems0CreditLineItems0Amount Amount of money of the credit line.
//
// swagger:model OBReadBalance1DataBalanceItems0CreditLineItems0Amount
type OBReadBalance1DataBalanceItems0CreditLineItems0Amount struct {

	// amount
	// Required: true
	Amount *OBActiveCurrencyAndAmountSimpleType `json:"Amount"`

	// currency
	// Required: true
	Currency *ActiveOrHistoricCurrencyCode1 `json:"Currency"`
}

// Validate validates this o b read balance1 data balance items0 credit line items0 amount
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("Amount"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Required("Amount"+"."+"Amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("Amount"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.Required("Amount"+"."+"Currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read balance1 data balance items0 credit line items0 amount based on the context it is used
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Amount")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Amount" + "." + "Currency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadBalance1DataBalanceItems0CreditLineItems0Amount) UnmarshalBinary(b []byte) error {
	var res OBReadBalance1DataBalanceItems0CreditLineItems0Amount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
