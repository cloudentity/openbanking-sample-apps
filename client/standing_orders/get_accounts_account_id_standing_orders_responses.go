// Code generated by go-swagger; DO NOT EDIT.

package standing_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/openbanking-sample-apps/models"
)

// GetAccountsAccountIDStandingOrdersReader is a Reader for the GetAccountsAccountIDStandingOrders structure.
type GetAccountsAccountIDStandingOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountsAccountIDStandingOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountsAccountIDStandingOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAccountsAccountIDStandingOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAccountsAccountIDStandingOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccountsAccountIDStandingOrdersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAccountsAccountIDStandingOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAccountsAccountIDStandingOrdersMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetAccountsAccountIDStandingOrdersNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAccountsAccountIDStandingOrdersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccountsAccountIDStandingOrdersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccountsAccountIDStandingOrdersOK creates a GetAccountsAccountIDStandingOrdersOK with default headers values
func NewGetAccountsAccountIDStandingOrdersOK() *GetAccountsAccountIDStandingOrdersOK {
	return &GetAccountsAccountIDStandingOrdersOK{}
}

/* GetAccountsAccountIDStandingOrdersOK describes a response with status code 200, with default header values.

Standing Orders Read
*/
type GetAccountsAccountIDStandingOrdersOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBReadStandingOrder6
}

func (o *GetAccountsAccountIDStandingOrdersOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersOK  %+v", 200, o.Payload)
}
func (o *GetAccountsAccountIDStandingOrdersOK) GetPayload() *models.OBReadStandingOrder6 {
	return o.Payload
}

func (o *GetAccountsAccountIDStandingOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBReadStandingOrder6)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersBadRequest creates a GetAccountsAccountIDStandingOrdersBadRequest with default headers values
func NewGetAccountsAccountIDStandingOrdersBadRequest() *GetAccountsAccountIDStandingOrdersBadRequest {
	return &GetAccountsAccountIDStandingOrdersBadRequest{}
}

/* GetAccountsAccountIDStandingOrdersBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetAccountsAccountIDStandingOrdersBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBErrorResponse1
}

func (o *GetAccountsAccountIDStandingOrdersBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersBadRequest  %+v", 400, o.Payload)
}
func (o *GetAccountsAccountIDStandingOrdersBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetAccountsAccountIDStandingOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersUnauthorized creates a GetAccountsAccountIDStandingOrdersUnauthorized with default headers values
func NewGetAccountsAccountIDStandingOrdersUnauthorized() *GetAccountsAccountIDStandingOrdersUnauthorized {
	return &GetAccountsAccountIDStandingOrdersUnauthorized{}
}

/* GetAccountsAccountIDStandingOrdersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAccountsAccountIDStandingOrdersUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountsAccountIDStandingOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersUnauthorized ", 401)
}

func (o *GetAccountsAccountIDStandingOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersForbidden creates a GetAccountsAccountIDStandingOrdersForbidden with default headers values
func NewGetAccountsAccountIDStandingOrdersForbidden() *GetAccountsAccountIDStandingOrdersForbidden {
	return &GetAccountsAccountIDStandingOrdersForbidden{}
}

/* GetAccountsAccountIDStandingOrdersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAccountsAccountIDStandingOrdersForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBErrorResponse1
}

func (o *GetAccountsAccountIDStandingOrdersForbidden) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersForbidden  %+v", 403, o.Payload)
}
func (o *GetAccountsAccountIDStandingOrdersForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetAccountsAccountIDStandingOrdersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersNotFound creates a GetAccountsAccountIDStandingOrdersNotFound with default headers values
func NewGetAccountsAccountIDStandingOrdersNotFound() *GetAccountsAccountIDStandingOrdersNotFound {
	return &GetAccountsAccountIDStandingOrdersNotFound{}
}

/* GetAccountsAccountIDStandingOrdersNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetAccountsAccountIDStandingOrdersNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountsAccountIDStandingOrdersNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersNotFound ", 404)
}

func (o *GetAccountsAccountIDStandingOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersMethodNotAllowed creates a GetAccountsAccountIDStandingOrdersMethodNotAllowed with default headers values
func NewGetAccountsAccountIDStandingOrdersMethodNotAllowed() *GetAccountsAccountIDStandingOrdersMethodNotAllowed {
	return &GetAccountsAccountIDStandingOrdersMethodNotAllowed{}
}

/* GetAccountsAccountIDStandingOrdersMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAccountsAccountIDStandingOrdersMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountsAccountIDStandingOrdersMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersMethodNotAllowed ", 405)
}

func (o *GetAccountsAccountIDStandingOrdersMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersNotAcceptable creates a GetAccountsAccountIDStandingOrdersNotAcceptable with default headers values
func NewGetAccountsAccountIDStandingOrdersNotAcceptable() *GetAccountsAccountIDStandingOrdersNotAcceptable {
	return &GetAccountsAccountIDStandingOrdersNotAcceptable{}
}

/* GetAccountsAccountIDStandingOrdersNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetAccountsAccountIDStandingOrdersNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountsAccountIDStandingOrdersNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersNotAcceptable ", 406)
}

func (o *GetAccountsAccountIDStandingOrdersNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersTooManyRequests creates a GetAccountsAccountIDStandingOrdersTooManyRequests with default headers values
func NewGetAccountsAccountIDStandingOrdersTooManyRequests() *GetAccountsAccountIDStandingOrdersTooManyRequests {
	return &GetAccountsAccountIDStandingOrdersTooManyRequests{}
}

/* GetAccountsAccountIDStandingOrdersTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetAccountsAccountIDStandingOrdersTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountsAccountIDStandingOrdersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersTooManyRequests ", 429)
}

func (o *GetAccountsAccountIDStandingOrdersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountsAccountIDStandingOrdersInternalServerError creates a GetAccountsAccountIDStandingOrdersInternalServerError with default headers values
func NewGetAccountsAccountIDStandingOrdersInternalServerError() *GetAccountsAccountIDStandingOrdersInternalServerError {
	return &GetAccountsAccountIDStandingOrdersInternalServerError{}
}

/* GetAccountsAccountIDStandingOrdersInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAccountsAccountIDStandingOrdersInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBErrorResponse1
}

func (o *GetAccountsAccountIDStandingOrdersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /accounts/{AccountId}/standing-orders][%d] getAccountsAccountIdStandingOrdersInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAccountsAccountIDStandingOrdersInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetAccountsAccountIDStandingOrdersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
