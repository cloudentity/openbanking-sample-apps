// Code generated by go-swagger; DO NOT EDIT.

package account_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/openbanking-sample-apps/models"
)

// GetAccountAccessConsentsConsentIDReader is a Reader for the GetAccountAccessConsentsConsentID structure.
type GetAccountAccessConsentsConsentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountAccessConsentsConsentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountAccessConsentsConsentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAccountAccessConsentsConsentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAccountAccessConsentsConsentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccountAccessConsentsConsentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetAccountAccessConsentsConsentIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetAccountAccessConsentsConsentIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAccountAccessConsentsConsentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccountAccessConsentsConsentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccountAccessConsentsConsentIDOK creates a GetAccountAccessConsentsConsentIDOK with default headers values
func NewGetAccountAccessConsentsConsentIDOK() *GetAccountAccessConsentsConsentIDOK {
	return &GetAccountAccessConsentsConsentIDOK{}
}

/* GetAccountAccessConsentsConsentIDOK describes a response with status code 200, with default header values.

Account Access Consents Read
*/
type GetAccountAccessConsentsConsentIDOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBReadConsentResponse1
}

func (o *GetAccountAccessConsentsConsentIDOK) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdOK  %+v", 200, o.Payload)
}
func (o *GetAccountAccessConsentsConsentIDOK) GetPayload() *models.OBReadConsentResponse1 {
	return o.Payload
}

func (o *GetAccountAccessConsentsConsentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBReadConsentResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentsConsentIDBadRequest creates a GetAccountAccessConsentsConsentIDBadRequest with default headers values
func NewGetAccountAccessConsentsConsentIDBadRequest() *GetAccountAccessConsentsConsentIDBadRequest {
	return &GetAccountAccessConsentsConsentIDBadRequest{}
}

/* GetAccountAccessConsentsConsentIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetAccountAccessConsentsConsentIDBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBErrorResponse1
}

func (o *GetAccountAccessConsentsConsentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetAccountAccessConsentsConsentIDBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetAccountAccessConsentsConsentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentsConsentIDUnauthorized creates a GetAccountAccessConsentsConsentIDUnauthorized with default headers values
func NewGetAccountAccessConsentsConsentIDUnauthorized() *GetAccountAccessConsentsConsentIDUnauthorized {
	return &GetAccountAccessConsentsConsentIDUnauthorized{}
}

/* GetAccountAccessConsentsConsentIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAccountAccessConsentsConsentIDUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountAccessConsentsConsentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdUnauthorized ", 401)
}

func (o *GetAccountAccessConsentsConsentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountAccessConsentsConsentIDForbidden creates a GetAccountAccessConsentsConsentIDForbidden with default headers values
func NewGetAccountAccessConsentsConsentIDForbidden() *GetAccountAccessConsentsConsentIDForbidden {
	return &GetAccountAccessConsentsConsentIDForbidden{}
}

/* GetAccountAccessConsentsConsentIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAccountAccessConsentsConsentIDForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBErrorResponse1
}

func (o *GetAccountAccessConsentsConsentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdForbidden  %+v", 403, o.Payload)
}
func (o *GetAccountAccessConsentsConsentIDForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetAccountAccessConsentsConsentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountAccessConsentsConsentIDMethodNotAllowed creates a GetAccountAccessConsentsConsentIDMethodNotAllowed with default headers values
func NewGetAccountAccessConsentsConsentIDMethodNotAllowed() *GetAccountAccessConsentsConsentIDMethodNotAllowed {
	return &GetAccountAccessConsentsConsentIDMethodNotAllowed{}
}

/* GetAccountAccessConsentsConsentIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetAccountAccessConsentsConsentIDMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountAccessConsentsConsentIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdMethodNotAllowed ", 405)
}

func (o *GetAccountAccessConsentsConsentIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountAccessConsentsConsentIDNotAcceptable creates a GetAccountAccessConsentsConsentIDNotAcceptable with default headers values
func NewGetAccountAccessConsentsConsentIDNotAcceptable() *GetAccountAccessConsentsConsentIDNotAcceptable {
	return &GetAccountAccessConsentsConsentIDNotAcceptable{}
}

/* GetAccountAccessConsentsConsentIDNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetAccountAccessConsentsConsentIDNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountAccessConsentsConsentIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdNotAcceptable ", 406)
}

func (o *GetAccountAccessConsentsConsentIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountAccessConsentsConsentIDTooManyRequests creates a GetAccountAccessConsentsConsentIDTooManyRequests with default headers values
func NewGetAccountAccessConsentsConsentIDTooManyRequests() *GetAccountAccessConsentsConsentIDTooManyRequests {
	return &GetAccountAccessConsentsConsentIDTooManyRequests{}
}

/* GetAccountAccessConsentsConsentIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetAccountAccessConsentsConsentIDTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetAccountAccessConsentsConsentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdTooManyRequests ", 429)
}

func (o *GetAccountAccessConsentsConsentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetAccountAccessConsentsConsentIDInternalServerError creates a GetAccountAccessConsentsConsentIDInternalServerError with default headers values
func NewGetAccountAccessConsentsConsentIDInternalServerError() *GetAccountAccessConsentsConsentIDInternalServerError {
	return &GetAccountAccessConsentsConsentIDInternalServerError{}
}

/* GetAccountAccessConsentsConsentIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAccountAccessConsentsConsentIDInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	Payload *models.OBErrorResponse1
}

func (o *GetAccountAccessConsentsConsentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /account-access-consents/{ConsentId}][%d] getAccountAccessConsentsConsentIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAccountAccessConsentsConsentIDInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetAccountAccessConsentsConsentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
