// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAccountsAccountIDTransactionsParams creates a new GetAccountsAccountIDTransactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAccountsAccountIDTransactionsParams() *GetAccountsAccountIDTransactionsParams {
	return &GetAccountsAccountIDTransactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountsAccountIDTransactionsParamsWithTimeout creates a new GetAccountsAccountIDTransactionsParams object
// with the ability to set a timeout on a request.
func NewGetAccountsAccountIDTransactionsParamsWithTimeout(timeout time.Duration) *GetAccountsAccountIDTransactionsParams {
	return &GetAccountsAccountIDTransactionsParams{
		timeout: timeout,
	}
}

// NewGetAccountsAccountIDTransactionsParamsWithContext creates a new GetAccountsAccountIDTransactionsParams object
// with the ability to set a context for a request.
func NewGetAccountsAccountIDTransactionsParamsWithContext(ctx context.Context) *GetAccountsAccountIDTransactionsParams {
	return &GetAccountsAccountIDTransactionsParams{
		Context: ctx,
	}
}

// NewGetAccountsAccountIDTransactionsParamsWithHTTPClient creates a new GetAccountsAccountIDTransactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAccountsAccountIDTransactionsParamsWithHTTPClient(client *http.Client) *GetAccountsAccountIDTransactionsParams {
	return &GetAccountsAccountIDTransactionsParams{
		HTTPClient: client,
	}
}

/* GetAccountsAccountIDTransactionsParams contains all the parameters to send to the API endpoint
   for the get accounts account Id transactions operation.

   Typically these are written to a http.Request.
*/
type GetAccountsAccountIDTransactionsParams struct {

	/* AccountID.

	   AccountId
	*/
	AccountID string

	/* Authorization.

	   An Authorisation Token as per https://tools.ietf.org/html/rfc6750
	*/
	Authorization string

	/* FromBookingDateTime.

	     The UTC ISO 8601 Date Time to filter transactions FROM
	NB Time component is optional - set to 00:00:00 for just Date.
	If the Date Time contains a timezone, the ASPSP must ignore the timezone component.

	     Format: date-time
	*/
	FromBookingDateTime *strfmt.DateTime

	/* ToBookingDateTime.

	     The UTC ISO 8601 Date Time to filter transactions TO
	NB Time component is optional - set to 00:00:00 for just Date.
	If the Date Time contains a timezone, the ASPSP must ignore the timezone component.

	     Format: date-time
	*/
	ToBookingDateTime *strfmt.DateTime

	/* XCustomerUserAgent.

	   Indicates the user-agent that the PSU is using.
	*/
	XCustomerUserAgent *string

	/* XFapiAuthDate.

	     The time when the PSU last logged in with the TPP.
	All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:
	Sun, 10 Sep 2017 19:43:31 UTC
	*/
	XFapiAuthDate *string

	/* XFapiCustomerIPAddress.

	   The PSU's IP address if the PSU is currently logged in with the TPP.
	*/
	XFapiCustomerIPAddress *string

	/* XFapiInteractionID.

	   An RFC4122 UID used as a correlation id.
	*/
	XFapiInteractionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get accounts account Id transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccountsAccountIDTransactionsParams) WithDefaults() *GetAccountsAccountIDTransactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get accounts account Id transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccountsAccountIDTransactionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithTimeout(timeout time.Duration) *GetAccountsAccountIDTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithContext(ctx context.Context) *GetAccountsAccountIDTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithHTTPClient(client *http.Client) *GetAccountsAccountIDTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithAccountID(accountID string) *GetAccountsAccountIDTransactionsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithAuthorization adds the authorization to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithAuthorization(authorization string) *GetAccountsAccountIDTransactionsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithFromBookingDateTime adds the fromBookingDateTime to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithFromBookingDateTime(fromBookingDateTime *strfmt.DateTime) *GetAccountsAccountIDTransactionsParams {
	o.SetFromBookingDateTime(fromBookingDateTime)
	return o
}

// SetFromBookingDateTime adds the fromBookingDateTime to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetFromBookingDateTime(fromBookingDateTime *strfmt.DateTime) {
	o.FromBookingDateTime = fromBookingDateTime
}

// WithToBookingDateTime adds the toBookingDateTime to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithToBookingDateTime(toBookingDateTime *strfmt.DateTime) *GetAccountsAccountIDTransactionsParams {
	o.SetToBookingDateTime(toBookingDateTime)
	return o
}

// SetToBookingDateTime adds the toBookingDateTime to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetToBookingDateTime(toBookingDateTime *strfmt.DateTime) {
	o.ToBookingDateTime = toBookingDateTime
}

// WithXCustomerUserAgent adds the xCustomerUserAgent to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithXCustomerUserAgent(xCustomerUserAgent *string) *GetAccountsAccountIDTransactionsParams {
	o.SetXCustomerUserAgent(xCustomerUserAgent)
	return o
}

// SetXCustomerUserAgent adds the xCustomerUserAgent to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetXCustomerUserAgent(xCustomerUserAgent *string) {
	o.XCustomerUserAgent = xCustomerUserAgent
}

// WithXFapiAuthDate adds the xFapiAuthDate to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithXFapiAuthDate(xFapiAuthDate *string) *GetAccountsAccountIDTransactionsParams {
	o.SetXFapiAuthDate(xFapiAuthDate)
	return o
}

// SetXFapiAuthDate adds the xFapiAuthDate to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetXFapiAuthDate(xFapiAuthDate *string) {
	o.XFapiAuthDate = xFapiAuthDate
}

// WithXFapiCustomerIPAddress adds the xFapiCustomerIPAddress to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) *GetAccountsAccountIDTransactionsParams {
	o.SetXFapiCustomerIPAddress(xFapiCustomerIPAddress)
	return o
}

// SetXFapiCustomerIPAddress adds the xFapiCustomerIpAddress to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) {
	o.XFapiCustomerIPAddress = xFapiCustomerIPAddress
}

// WithXFapiInteractionID adds the xFapiInteractionID to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) WithXFapiInteractionID(xFapiInteractionID *string) *GetAccountsAccountIDTransactionsParams {
	o.SetXFapiInteractionID(xFapiInteractionID)
	return o
}

// SetXFapiInteractionID adds the xFapiInteractionId to the get accounts account Id transactions params
func (o *GetAccountsAccountIDTransactionsParams) SetXFapiInteractionID(xFapiInteractionID *string) {
	o.XFapiInteractionID = xFapiInteractionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountsAccountIDTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param AccountId
	if err := r.SetPathParam("AccountId", o.AccountID); err != nil {
		return err
	}

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.FromBookingDateTime != nil {

		// query param fromBookingDateTime
		var qrFromBookingDateTime strfmt.DateTime

		if o.FromBookingDateTime != nil {
			qrFromBookingDateTime = *o.FromBookingDateTime
		}
		qFromBookingDateTime := qrFromBookingDateTime.String()
		if qFromBookingDateTime != "" {

			if err := r.SetQueryParam("fromBookingDateTime", qFromBookingDateTime); err != nil {
				return err
			}
		}
	}

	if o.ToBookingDateTime != nil {

		// query param toBookingDateTime
		var qrToBookingDateTime strfmt.DateTime

		if o.ToBookingDateTime != nil {
			qrToBookingDateTime = *o.ToBookingDateTime
		}
		qToBookingDateTime := qrToBookingDateTime.String()
		if qToBookingDateTime != "" {

			if err := r.SetQueryParam("toBookingDateTime", qToBookingDateTime); err != nil {
				return err
			}
		}
	}

	if o.XCustomerUserAgent != nil {

		// header param x-customer-user-agent
		if err := r.SetHeaderParam("x-customer-user-agent", *o.XCustomerUserAgent); err != nil {
			return err
		}
	}

	if o.XFapiAuthDate != nil {

		// header param x-fapi-auth-date
		if err := r.SetHeaderParam("x-fapi-auth-date", *o.XFapiAuthDate); err != nil {
			return err
		}
	}

	if o.XFapiCustomerIPAddress != nil {

		// header param x-fapi-customer-ip-address
		if err := r.SetHeaderParam("x-fapi-customer-ip-address", *o.XFapiCustomerIPAddress); err != nil {
			return err
		}
	}

	if o.XFapiInteractionID != nil {

		// header param x-fapi-interaction-id
		if err := r.SetHeaderParam("x-fapi-interaction-id", *o.XFapiInteractionID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
