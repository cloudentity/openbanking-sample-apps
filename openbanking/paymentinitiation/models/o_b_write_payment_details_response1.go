// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBWritePaymentDetailsResponse1 o b write payment details response1
//
// swagger:model OBWritePaymentDetailsResponse1
type OBWritePaymentDetailsResponse1 struct {

	// data
	// Required: true
	Data *OBWritePaymentDetailsResponse1Data `json:"Data"`

	// links
	Links *Links `json:"Links,omitempty"`

	// meta
	Meta *Meta `json:"Meta,omitempty"`
}

// Validate validates this o b write payment details response1
func (m *OBWritePaymentDetailsResponse1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1) validateData(formats strfmt.Registry) error {

	if err := validate.Required("Data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b write payment details response1 based on the context it is used
func (m *OBWritePaymentDetailsResponse1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1) UnmarshalBinary(b []byte) error {
	var res OBWritePaymentDetailsResponse1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBWritePaymentDetailsResponse1Data o b write payment details response1 data
//
// swagger:model OBWritePaymentDetailsResponse1Data
type OBWritePaymentDetailsResponse1Data struct {

	// payment status
	PaymentStatus []*OBWritePaymentDetailsResponse1DataPaymentStatusItems0 `json:"PaymentStatus"`
}

// Validate validates this o b write payment details response1 data
func (m *OBWritePaymentDetailsResponse1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1Data) validatePaymentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentStatus); i++ {
		if swag.IsZero(m.PaymentStatus[i]) { // not required
			continue
		}

		if m.PaymentStatus[i] != nil {
			if err := m.PaymentStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "PaymentStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b write payment details response1 data based on the context it is used
func (m *OBWritePaymentDetailsResponse1Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaymentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1Data) contextValidatePaymentStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PaymentStatus); i++ {

		if m.PaymentStatus[i] != nil {
			if err := m.PaymentStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "PaymentStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1Data) UnmarshalBinary(b []byte) error {
	var res OBWritePaymentDetailsResponse1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBWritePaymentDetailsResponse1DataPaymentStatusItems0 Payment status details.
//
// swagger:model OBWritePaymentDetailsResponse1DataPaymentStatusItems0
type OBWritePaymentDetailsResponse1DataPaymentStatusItems0 struct {

	// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
	// Required: true
	// Max Length: 210
	// Min Length: 1
	PaymentTransactionID *string `json:"PaymentTransactionId"`

	// Status of a transfe, as assigned by the transaction administrator.
	// Required: true
	// Enum: [Accepted AcceptedCancellationRequest AcceptedCreditSettlementCompleted AcceptedCustomerProfile AcceptedFundsChecked AcceptedSettlementCompleted AcceptedSettlementInProcess AcceptedTechnicalValidation AcceptedWithChange AcceptedWithoutPosting Cancelled NoCancellationProcess PartiallyAcceptedCancellationRequest PartiallyAcceptedTechnicalCorrect PaymentCancelled Pending PendingCancellationRequest Received Rejected RejectedCancellationRequest]
	Status *string `json:"Status"`

	// status detail
	StatusDetail *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail `json:"StatusDetail,omitempty"`

	// Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Required: true
	// Format: date-time
	StatusUpdateDateTime *strfmt.DateTime `json:"StatusUpdateDateTime"`
}

// Validate validates this o b write payment details response1 data payment status items0
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusUpdateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) validatePaymentTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("PaymentTransactionId", "body", m.PaymentTransactionID); err != nil {
		return err
	}

	if err := validate.MinLength("PaymentTransactionId", "body", *m.PaymentTransactionID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("PaymentTransactionId", "body", *m.PaymentTransactionID, 210); err != nil {
		return err
	}

	return nil
}

var oBWritePaymentDetailsResponse1DataPaymentStatusItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","AcceptedCancellationRequest","AcceptedCreditSettlementCompleted","AcceptedCustomerProfile","AcceptedFundsChecked","AcceptedSettlementCompleted","AcceptedSettlementInProcess","AcceptedTechnicalValidation","AcceptedWithChange","AcceptedWithoutPosting","Cancelled","NoCancellationProcess","PartiallyAcceptedCancellationRequest","PartiallyAcceptedTechnicalCorrect","PaymentCancelled","Pending","PendingCancellationRequest","Received","Rejected","RejectedCancellationRequest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBWritePaymentDetailsResponse1DataPaymentStatusItems0TypeStatusPropEnum = append(oBWritePaymentDetailsResponse1DataPaymentStatusItems0TypeStatusPropEnum, v)
	}
}

const (

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAccepted captures enum value "Accepted"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAccepted string = "Accepted"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedCancellationRequest captures enum value "AcceptedCancellationRequest"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedCancellationRequest string = "AcceptedCancellationRequest"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedCreditSettlementCompleted captures enum value "AcceptedCreditSettlementCompleted"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedCreditSettlementCompleted string = "AcceptedCreditSettlementCompleted"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedCustomerProfile captures enum value "AcceptedCustomerProfile"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedCustomerProfile string = "AcceptedCustomerProfile"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedFundsChecked captures enum value "AcceptedFundsChecked"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedFundsChecked string = "AcceptedFundsChecked"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedSettlementCompleted captures enum value "AcceptedSettlementCompleted"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedSettlementCompleted string = "AcceptedSettlementCompleted"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedSettlementInProcess captures enum value "AcceptedSettlementInProcess"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedSettlementInProcess string = "AcceptedSettlementInProcess"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedTechnicalValidation captures enum value "AcceptedTechnicalValidation"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedTechnicalValidation string = "AcceptedTechnicalValidation"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedWithChange captures enum value "AcceptedWithChange"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedWithChange string = "AcceptedWithChange"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedWithoutPosting captures enum value "AcceptedWithoutPosting"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusAcceptedWithoutPosting string = "AcceptedWithoutPosting"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusCancelled captures enum value "Cancelled"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusCancelled string = "Cancelled"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusNoCancellationProcess captures enum value "NoCancellationProcess"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusNoCancellationProcess string = "NoCancellationProcess"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPartiallyAcceptedCancellationRequest captures enum value "PartiallyAcceptedCancellationRequest"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPartiallyAcceptedCancellationRequest string = "PartiallyAcceptedCancellationRequest"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPartiallyAcceptedTechnicalCorrect captures enum value "PartiallyAcceptedTechnicalCorrect"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPartiallyAcceptedTechnicalCorrect string = "PartiallyAcceptedTechnicalCorrect"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPaymentCancelled captures enum value "PaymentCancelled"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPaymentCancelled string = "PaymentCancelled"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPending captures enum value "Pending"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPending string = "Pending"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPendingCancellationRequest captures enum value "PendingCancellationRequest"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusPendingCancellationRequest string = "PendingCancellationRequest"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusReceived captures enum value "Received"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusReceived string = "Received"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusRejected captures enum value "Rejected"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusRejected string = "Rejected"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusRejectedCancellationRequest captures enum value "RejectedCancellationRequest"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusRejectedCancellationRequest string = "RejectedCancellationRequest"
)

// prop value enum
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBWritePaymentDetailsResponse1DataPaymentStatusItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) validateStatusDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusDetail) { // not required
		return nil
	}

	if m.StatusDetail != nil {
		if err := m.StatusDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StatusDetail")
			}
			return err
		}
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) validateStatusUpdateDateTime(formats strfmt.Registry) error {

	if err := validate.Required("StatusUpdateDateTime", "body", m.StatusUpdateDateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("StatusUpdateDateTime", "body", "date-time", m.StatusUpdateDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b write payment details response1 data payment status items0 based on the context it is used
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatusDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) contextValidateStatusDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusDetail != nil {
		if err := m.StatusDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("StatusDetail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0) UnmarshalBinary(b []byte) error {
	var res OBWritePaymentDetailsResponse1DataPaymentStatusItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail Payment status details as per underlying Payment Rail.
//
// swagger:model OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail
type OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail struct {

	// local instrument
	LocalInstrument OBExternalLocalInstrument1Code `json:"LocalInstrument,omitempty"`

	// Status of a transfer, as assigned by the transaction administrator.
	// Required: true
	// Max Length: 128
	// Min Length: 1
	Status *string `json:"Status"`

	// Reason Code provided for the status of a transfer.
	// Enum: [Cancelled PendingFailingSettlement PendingSettlement Proprietary ProprietaryRejection Suspended Unmatched]
	StatusReason string `json:"StatusReason,omitempty"`

	// Reason provided for the status of a transfer.
	// Max Length: 256
	// Min Length: 1
	StatusReasonDescription string `json:"StatusReasonDescription,omitempty"`
}

// Validate validates this o b write payment details response1 data payment status items0 status detail
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocalInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReasonDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) validateLocalInstrument(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalInstrument) { // not required
		return nil
	}

	if err := m.LocalInstrument.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StatusDetail" + "." + "LocalInstrument")
		}
		return err
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("StatusDetail"+"."+"Status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinLength("StatusDetail"+"."+"Status", "body", *m.Status, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("StatusDetail"+"."+"Status", "body", *m.Status, 128); err != nil {
		return err
	}

	return nil
}

var oBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailTypeStatusReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Cancelled","PendingFailingSettlement","PendingSettlement","Proprietary","ProprietaryRejection","Suspended","Unmatched"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailTypeStatusReasonPropEnum = append(oBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailTypeStatusReasonPropEnum, v)
	}
}

const (

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonCancelled captures enum value "Cancelled"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonCancelled string = "Cancelled"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonPendingFailingSettlement captures enum value "PendingFailingSettlement"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonPendingFailingSettlement string = "PendingFailingSettlement"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonPendingSettlement captures enum value "PendingSettlement"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonPendingSettlement string = "PendingSettlement"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonProprietary captures enum value "Proprietary"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonProprietary string = "Proprietary"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonProprietaryRejection captures enum value "ProprietaryRejection"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonProprietaryRejection string = "ProprietaryRejection"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonSuspended captures enum value "Suspended"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonSuspended string = "Suspended"

	// OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonUnmatched captures enum value "Unmatched"
	OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailStatusReasonUnmatched string = "Unmatched"
)

// prop value enum
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) validateStatusReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetailTypeStatusReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) validateStatusReason(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusReasonEnum("StatusDetail"+"."+"StatusReason", "body", m.StatusReason); err != nil {
		return err
	}

	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) validateStatusReasonDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusReasonDescription) { // not required
		return nil
	}

	if err := validate.MinLength("StatusDetail"+"."+"StatusReasonDescription", "body", m.StatusReasonDescription, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("StatusDetail"+"."+"StatusReasonDescription", "body", m.StatusReasonDescription, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b write payment details response1 data payment status items0 status detail based on the context it is used
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocalInstrument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) contextValidateLocalInstrument(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LocalInstrument.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StatusDetail" + "." + "LocalInstrument")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail) UnmarshalBinary(b []byte) error {
	var res OBWritePaymentDetailsResponse1DataPaymentStatusItems0StatusDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
