// Code generated by go-swagger; DO NOT EDIT.

package domestic_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/openbanking-sample-apps/openbanking/paymentinitiation/models"
)

// GetDomesticPaymentConsentsConsentIDReader is a Reader for the GetDomesticPaymentConsentsConsentID structure.
type GetDomesticPaymentConsentsConsentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomesticPaymentConsentsConsentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomesticPaymentConsentsConsentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDomesticPaymentConsentsConsentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDomesticPaymentConsentsConsentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDomesticPaymentConsentsConsentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDomesticPaymentConsentsConsentIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetDomesticPaymentConsentsConsentIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDomesticPaymentConsentsConsentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomesticPaymentConsentsConsentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDomesticPaymentConsentsConsentIDOK creates a GetDomesticPaymentConsentsConsentIDOK with default headers values
func NewGetDomesticPaymentConsentsConsentIDOK() *GetDomesticPaymentConsentsConsentIDOK {
	return &GetDomesticPaymentConsentsConsentIDOK{}
}

/* GetDomesticPaymentConsentsConsentIDOK describes a response with status code 200, with default header values.

Domestic Payment Consents Read
*/
type GetDomesticPaymentConsentsConsentIDOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteDomesticConsentResponse5
}

func (o *GetDomesticPaymentConsentsConsentIDOK) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdOK  %+v", 200, o.Payload)
}
func (o *GetDomesticPaymentConsentsConsentIDOK) GetPayload() *models.OBWriteDomesticConsentResponse5 {
	return o.Payload
}

func (o *GetDomesticPaymentConsentsConsentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteDomesticConsentResponse5)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticPaymentConsentsConsentIDBadRequest creates a GetDomesticPaymentConsentsConsentIDBadRequest with default headers values
func NewGetDomesticPaymentConsentsConsentIDBadRequest() *GetDomesticPaymentConsentsConsentIDBadRequest {
	return &GetDomesticPaymentConsentsConsentIDBadRequest{}
}

/* GetDomesticPaymentConsentsConsentIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetDomesticPaymentConsentsConsentIDBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetDomesticPaymentConsentsConsentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetDomesticPaymentConsentsConsentIDBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticPaymentConsentsConsentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticPaymentConsentsConsentIDUnauthorized creates a GetDomesticPaymentConsentsConsentIDUnauthorized with default headers values
func NewGetDomesticPaymentConsentsConsentIDUnauthorized() *GetDomesticPaymentConsentsConsentIDUnauthorized {
	return &GetDomesticPaymentConsentsConsentIDUnauthorized{}
}

/* GetDomesticPaymentConsentsConsentIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDomesticPaymentConsentsConsentIDUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticPaymentConsentsConsentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdUnauthorized ", 401)
}

func (o *GetDomesticPaymentConsentsConsentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticPaymentConsentsConsentIDForbidden creates a GetDomesticPaymentConsentsConsentIDForbidden with default headers values
func NewGetDomesticPaymentConsentsConsentIDForbidden() *GetDomesticPaymentConsentsConsentIDForbidden {
	return &GetDomesticPaymentConsentsConsentIDForbidden{}
}

/* GetDomesticPaymentConsentsConsentIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDomesticPaymentConsentsConsentIDForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetDomesticPaymentConsentsConsentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdForbidden  %+v", 403, o.Payload)
}
func (o *GetDomesticPaymentConsentsConsentIDForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticPaymentConsentsConsentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticPaymentConsentsConsentIDMethodNotAllowed creates a GetDomesticPaymentConsentsConsentIDMethodNotAllowed with default headers values
func NewGetDomesticPaymentConsentsConsentIDMethodNotAllowed() *GetDomesticPaymentConsentsConsentIDMethodNotAllowed {
	return &GetDomesticPaymentConsentsConsentIDMethodNotAllowed{}
}

/* GetDomesticPaymentConsentsConsentIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetDomesticPaymentConsentsConsentIDMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticPaymentConsentsConsentIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdMethodNotAllowed ", 405)
}

func (o *GetDomesticPaymentConsentsConsentIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticPaymentConsentsConsentIDNotAcceptable creates a GetDomesticPaymentConsentsConsentIDNotAcceptable with default headers values
func NewGetDomesticPaymentConsentsConsentIDNotAcceptable() *GetDomesticPaymentConsentsConsentIDNotAcceptable {
	return &GetDomesticPaymentConsentsConsentIDNotAcceptable{}
}

/* GetDomesticPaymentConsentsConsentIDNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetDomesticPaymentConsentsConsentIDNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticPaymentConsentsConsentIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdNotAcceptable ", 406)
}

func (o *GetDomesticPaymentConsentsConsentIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticPaymentConsentsConsentIDTooManyRequests creates a GetDomesticPaymentConsentsConsentIDTooManyRequests with default headers values
func NewGetDomesticPaymentConsentsConsentIDTooManyRequests() *GetDomesticPaymentConsentsConsentIDTooManyRequests {
	return &GetDomesticPaymentConsentsConsentIDTooManyRequests{}
}

/* GetDomesticPaymentConsentsConsentIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetDomesticPaymentConsentsConsentIDTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticPaymentConsentsConsentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdTooManyRequests ", 429)
}

func (o *GetDomesticPaymentConsentsConsentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticPaymentConsentsConsentIDInternalServerError creates a GetDomesticPaymentConsentsConsentIDInternalServerError with default headers values
func NewGetDomesticPaymentConsentsConsentIDInternalServerError() *GetDomesticPaymentConsentsConsentIDInternalServerError {
	return &GetDomesticPaymentConsentsConsentIDInternalServerError{}
}

/* GetDomesticPaymentConsentsConsentIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDomesticPaymentConsentsConsentIDInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetDomesticPaymentConsentsConsentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /domestic-payment-consents/{ConsentId}][%d] getDomesticPaymentConsentsConsentIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDomesticPaymentConsentsConsentIDInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticPaymentConsentsConsentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
