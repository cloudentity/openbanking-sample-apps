// Code generated by go-swagger; DO NOT EDIT.

package international_scheduled_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams creates a new GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams() *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	return &GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParamsWithTimeout creates a new GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams object
// with the ability to set a timeout on a request.
func NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParamsWithTimeout(timeout time.Duration) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	return &GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams{
		timeout: timeout,
	}
}

// NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParamsWithContext creates a new GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams object
// with the ability to set a context for a request.
func NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParamsWithContext(ctx context.Context) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	return &GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams{
		Context: ctx,
	}
}

// NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParamsWithHTTPClient creates a new GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParamsWithHTTPClient(client *http.Client) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	return &GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams{
		HTTPClient: client,
	}
}

/* GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams contains all the parameters to send to the API endpoint
   for the get international scheduled payment consents consent Id funds confirmation operation.

   Typically these are written to a http.Request.
*/
type GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams struct {

	/* Authorization.

	   An Authorisation Token as per https://tools.ietf.org/html/rfc6750
	*/
	Authorization string

	/* ConsentID.

	   ConsentId
	*/
	ConsentID string

	/* XCustomerUserAgent.

	   Indicates the user-agent that the PSU is using.
	*/
	XCustomerUserAgent *string

	/* XFapiAuthDate.

	     The time when the PSU last logged in with the TPP.
	All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:
	Sun, 10 Sep 2017 19:43:31 UTC
	*/
	XFapiAuthDate *string

	/* XFapiCustomerIPAddress.

	   The PSU's IP address if the PSU is currently logged in with the TPP.
	*/
	XFapiCustomerIPAddress *string

	/* XFapiInteractionID.

	   An RFC4122 UID used as a correlation id.
	*/
	XFapiInteractionID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get international scheduled payment consents consent Id funds confirmation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithDefaults() *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get international scheduled payment consents consent Id funds confirmation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithTimeout(timeout time.Duration) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithContext(ctx context.Context) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithHTTPClient(client *http.Client) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithAuthorization(authorization string) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithConsentID adds the consentID to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithConsentID(consentID string) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetConsentID(consentID)
	return o
}

// SetConsentID adds the consentId to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetConsentID(consentID string) {
	o.ConsentID = consentID
}

// WithXCustomerUserAgent adds the xCustomerUserAgent to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithXCustomerUserAgent(xCustomerUserAgent *string) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetXCustomerUserAgent(xCustomerUserAgent)
	return o
}

// SetXCustomerUserAgent adds the xCustomerUserAgent to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetXCustomerUserAgent(xCustomerUserAgent *string) {
	o.XCustomerUserAgent = xCustomerUserAgent
}

// WithXFapiAuthDate adds the xFapiAuthDate to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithXFapiAuthDate(xFapiAuthDate *string) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetXFapiAuthDate(xFapiAuthDate)
	return o
}

// SetXFapiAuthDate adds the xFapiAuthDate to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetXFapiAuthDate(xFapiAuthDate *string) {
	o.XFapiAuthDate = xFapiAuthDate
}

// WithXFapiCustomerIPAddress adds the xFapiCustomerIPAddress to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetXFapiCustomerIPAddress(xFapiCustomerIPAddress)
	return o
}

// SetXFapiCustomerIPAddress adds the xFapiCustomerIpAddress to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetXFapiCustomerIPAddress(xFapiCustomerIPAddress *string) {
	o.XFapiCustomerIPAddress = xFapiCustomerIPAddress
}

// WithXFapiInteractionID adds the xFapiInteractionID to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WithXFapiInteractionID(xFapiInteractionID *string) *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams {
	o.SetXFapiInteractionID(xFapiInteractionID)
	return o
}

// SetXFapiInteractionID adds the xFapiInteractionId to the get international scheduled payment consents consent Id funds confirmation params
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) SetXFapiInteractionID(xFapiInteractionID *string) {
	o.XFapiInteractionID = xFapiInteractionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetInternationalScheduledPaymentConsentsConsentIDFundsConfirmationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param ConsentId
	if err := r.SetPathParam("ConsentId", o.ConsentID); err != nil {
		return err
	}

	if o.XCustomerUserAgent != nil {

		// header param x-customer-user-agent
		if err := r.SetHeaderParam("x-customer-user-agent", *o.XCustomerUserAgent); err != nil {
			return err
		}
	}

	if o.XFapiAuthDate != nil {

		// header param x-fapi-auth-date
		if err := r.SetHeaderParam("x-fapi-auth-date", *o.XFapiAuthDate); err != nil {
			return err
		}
	}

	if o.XFapiCustomerIPAddress != nil {

		// header param x-fapi-customer-ip-address
		if err := r.SetHeaderParam("x-fapi-customer-ip-address", *o.XFapiCustomerIPAddress); err != nil {
			return err
		}
	}

	if o.XFapiInteractionID != nil {

		// header param x-fapi-interaction-id
		if err := r.SetHeaderParam("x-fapi-interaction-id", *o.XFapiInteractionID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
