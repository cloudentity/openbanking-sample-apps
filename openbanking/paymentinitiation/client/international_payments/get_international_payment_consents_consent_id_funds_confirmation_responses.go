// Code generated by go-swagger; DO NOT EDIT.

package international_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/openbanking-sample-apps/openbanking/paymentinitiation/models"
)

// GetInternationalPaymentConsentsConsentIDFundsConfirmationReader is a Reader for the GetInternationalPaymentConsentsConsentIDFundsConfirmation structure.
type GetInternationalPaymentConsentsConsentIDFundsConfirmationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationOK creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationOK with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationOK() *GetInternationalPaymentConsentsConsentIDFundsConfirmationOK {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationOK{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationOK describes a response with status code 200, with default header values.

International Payment Consents Read
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteFundsConfirmationResponse1
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationOK) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationOK  %+v", 200, o.Payload)
}
func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationOK) GetPayload() *models.OBWriteFundsConfirmationResponse1 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteFundsConfirmationResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest() *GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationBadRequest  %+v", 400, o.Payload)
}
func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized() *GetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationUnauthorized ", 401)
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden() *GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationForbidden  %+v", 403, o.Payload)
}
func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound() *GetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationNotFound ", 404)
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed() *GetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationMethodNotAllowed ", 405)
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable() *GetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationNotAcceptable ", 406)
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests() *GetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationTooManyRequests ", 429)
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError creates a GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError with default headers values
func NewGetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError() *GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError {
	return &GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError{}
}

/* GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}/funds-confirmation][%d] getInternationalPaymentConsentsConsentIdFundsConfirmationInternalServerError  %+v", 500, o.Payload)
}
func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDFundsConfirmationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
