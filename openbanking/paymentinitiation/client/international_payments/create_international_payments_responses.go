// Code generated by go-swagger; DO NOT EDIT.

package international_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/openbanking-sample-apps/openbanking/paymentinitiation/models"
)

// CreateInternationalPaymentsReader is a Reader for the CreateInternationalPayments structure.
type CreateInternationalPaymentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInternationalPaymentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateInternationalPaymentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInternationalPaymentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateInternationalPaymentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInternationalPaymentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInternationalPaymentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateInternationalPaymentsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCreateInternationalPaymentsNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateInternationalPaymentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateInternationalPaymentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInternationalPaymentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateInternationalPaymentsCreated creates a CreateInternationalPaymentsCreated with default headers values
func NewCreateInternationalPaymentsCreated() *CreateInternationalPaymentsCreated {
	return &CreateInternationalPaymentsCreated{}
}

/* CreateInternationalPaymentsCreated describes a response with status code 201, with default header values.

International Payments Created
*/
type CreateInternationalPaymentsCreated struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteInternationalResponse5
}

func (o *CreateInternationalPaymentsCreated) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsCreated  %+v", 201, o.Payload)
}
func (o *CreateInternationalPaymentsCreated) GetPayload() *models.OBWriteInternationalResponse5 {
	return o.Payload
}

func (o *CreateInternationalPaymentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteInternationalResponse5)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInternationalPaymentsBadRequest creates a CreateInternationalPaymentsBadRequest with default headers values
func NewCreateInternationalPaymentsBadRequest() *CreateInternationalPaymentsBadRequest {
	return &CreateInternationalPaymentsBadRequest{}
}

/* CreateInternationalPaymentsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateInternationalPaymentsBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *CreateInternationalPaymentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsBadRequest  %+v", 400, o.Payload)
}
func (o *CreateInternationalPaymentsBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *CreateInternationalPaymentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInternationalPaymentsUnauthorized creates a CreateInternationalPaymentsUnauthorized with default headers values
func NewCreateInternationalPaymentsUnauthorized() *CreateInternationalPaymentsUnauthorized {
	return &CreateInternationalPaymentsUnauthorized{}
}

/* CreateInternationalPaymentsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateInternationalPaymentsUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *CreateInternationalPaymentsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsUnauthorized ", 401)
}

func (o *CreateInternationalPaymentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalPaymentsForbidden creates a CreateInternationalPaymentsForbidden with default headers values
func NewCreateInternationalPaymentsForbidden() *CreateInternationalPaymentsForbidden {
	return &CreateInternationalPaymentsForbidden{}
}

/* CreateInternationalPaymentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateInternationalPaymentsForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *CreateInternationalPaymentsForbidden) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsForbidden  %+v", 403, o.Payload)
}
func (o *CreateInternationalPaymentsForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *CreateInternationalPaymentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInternationalPaymentsNotFound creates a CreateInternationalPaymentsNotFound with default headers values
func NewCreateInternationalPaymentsNotFound() *CreateInternationalPaymentsNotFound {
	return &CreateInternationalPaymentsNotFound{}
}

/* CreateInternationalPaymentsNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateInternationalPaymentsNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *CreateInternationalPaymentsNotFound) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsNotFound ", 404)
}

func (o *CreateInternationalPaymentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalPaymentsMethodNotAllowed creates a CreateInternationalPaymentsMethodNotAllowed with default headers values
func NewCreateInternationalPaymentsMethodNotAllowed() *CreateInternationalPaymentsMethodNotAllowed {
	return &CreateInternationalPaymentsMethodNotAllowed{}
}

/* CreateInternationalPaymentsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateInternationalPaymentsMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *CreateInternationalPaymentsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsMethodNotAllowed ", 405)
}

func (o *CreateInternationalPaymentsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalPaymentsNotAcceptable creates a CreateInternationalPaymentsNotAcceptable with default headers values
func NewCreateInternationalPaymentsNotAcceptable() *CreateInternationalPaymentsNotAcceptable {
	return &CreateInternationalPaymentsNotAcceptable{}
}

/* CreateInternationalPaymentsNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type CreateInternationalPaymentsNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *CreateInternationalPaymentsNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsNotAcceptable ", 406)
}

func (o *CreateInternationalPaymentsNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalPaymentsUnsupportedMediaType creates a CreateInternationalPaymentsUnsupportedMediaType with default headers values
func NewCreateInternationalPaymentsUnsupportedMediaType() *CreateInternationalPaymentsUnsupportedMediaType {
	return &CreateInternationalPaymentsUnsupportedMediaType{}
}

/* CreateInternationalPaymentsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type
*/
type CreateInternationalPaymentsUnsupportedMediaType struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *CreateInternationalPaymentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsUnsupportedMediaType ", 415)
}

func (o *CreateInternationalPaymentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalPaymentsTooManyRequests creates a CreateInternationalPaymentsTooManyRequests with default headers values
func NewCreateInternationalPaymentsTooManyRequests() *CreateInternationalPaymentsTooManyRequests {
	return &CreateInternationalPaymentsTooManyRequests{}
}

/* CreateInternationalPaymentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateInternationalPaymentsTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *CreateInternationalPaymentsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsTooManyRequests ", 429)
}

func (o *CreateInternationalPaymentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalPaymentsInternalServerError creates a CreateInternationalPaymentsInternalServerError with default headers values
func NewCreateInternationalPaymentsInternalServerError() *CreateInternationalPaymentsInternalServerError {
	return &CreateInternationalPaymentsInternalServerError{}
}

/* CreateInternationalPaymentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateInternationalPaymentsInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *CreateInternationalPaymentsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /international-payments][%d] createInternationalPaymentsInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateInternationalPaymentsInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *CreateInternationalPaymentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
