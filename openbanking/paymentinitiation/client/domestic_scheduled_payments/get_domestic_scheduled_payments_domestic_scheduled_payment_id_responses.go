// Code generated by go-swagger; DO NOT EDIT.

package domestic_scheduled_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/openbanking-sample-apps/openbanking/paymentinitiation/models"
)

// GetDomesticScheduledPaymentsDomesticScheduledPaymentIDReader is a Reader for the GetDomesticScheduledPaymentsDomesticScheduledPaymentID structure.
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK describes a response with status code 200, with default header values.

Domestic Scheduled Payments Read
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteDomesticScheduledResponse5
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdOK  %+v", 200, o.Payload)
}
func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK) GetPayload() *models.OBWriteDomesticScheduledResponse5 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteDomesticScheduledResponse5)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdUnauthorized ", 401)
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdForbidden  %+v", 403, o.Payload)
}
func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdNotFound ", 404)
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdMethodNotAllowed ", 405)
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdNotAcceptable ", 406)
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdTooManyRequests ", 429)
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError creates a GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError with default headers values
func NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError() *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError {
	return &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError{}
}

/* GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payments/{DomesticScheduledPaymentId}][%d] getDomesticScheduledPaymentsDomesticScheduledPaymentIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
