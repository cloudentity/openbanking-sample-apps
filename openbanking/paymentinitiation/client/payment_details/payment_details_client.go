// Code generated by go-swagger; DO NOT EDIT.

package payment_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment details API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment details API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDomesticPaymentsDomesticPaymentIDPaymentDetails(params *GetDomesticPaymentsDomesticPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentsDomesticPaymentIDPaymentDetailsOK, error)

	GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetails(params *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetailsOK, error)

	GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetails(params *GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetailsOK, error)

	GetFilePaymentsFilePaymentIDPaymentDetails(params *GetFilePaymentsFilePaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentsFilePaymentIDPaymentDetailsOK, error)

	GetInternationalPaymentsInternationalPaymentIDPaymentDetails(params *GetInternationalPaymentsInternationalPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentsInternationalPaymentIDPaymentDetailsOK, error)

	GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetails(params *GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetailsOK, error)

	GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetails(params *GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetailsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDomesticPaymentsDomesticPaymentIDPaymentDetails gets payment details
*/
func (a *Client) GetDomesticPaymentsDomesticPaymentIDPaymentDetails(params *GetDomesticPaymentsDomesticPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentsDomesticPaymentIDPaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticPaymentsDomesticPaymentIDPaymentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomesticPaymentsDomesticPaymentIdPaymentDetails",
		Method:             "GET",
		PathPattern:        "/domestic-payments/{DomesticPaymentId}/payment-details",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticPaymentsDomesticPaymentIDPaymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticPaymentsDomesticPaymentIDPaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomesticPaymentsDomesticPaymentIdPaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetails gets payment details
*/
func (a *Client) GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetails(params *GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetails",
		Method:             "GET",
		PathPattern:        "/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticScheduledPaymentsDomesticScheduledPaymentIDPaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetails gets payment details
*/
func (a *Client) GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetails(params *GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetails",
		Method:             "GET",
		PathPattern:        "/domestic-standing-orders/{DomesticStandingOrderId}/payment-details",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticStandingOrdersDomesticStandingOrderIDPaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentsFilePaymentIDPaymentDetails gets payment details
*/
func (a *Client) GetFilePaymentsFilePaymentIDPaymentDetails(params *GetFilePaymentsFilePaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentsFilePaymentIDPaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentsFilePaymentIDPaymentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFilePaymentsFilePaymentIdPaymentDetails",
		Method:             "GET",
		PathPattern:        "/file-payments/{FilePaymentId}/payment-details",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentsFilePaymentIDPaymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentsFilePaymentIDPaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFilePaymentsFilePaymentIdPaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalPaymentsInternationalPaymentIDPaymentDetails gets payment details
*/
func (a *Client) GetInternationalPaymentsInternationalPaymentIDPaymentDetails(params *GetInternationalPaymentsInternationalPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentsInternationalPaymentIDPaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalPaymentsInternationalPaymentIDPaymentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInternationalPaymentsInternationalPaymentIdPaymentDetails",
		Method:             "GET",
		PathPattern:        "/international-payments/{InternationalPaymentId}/payment-details",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalPaymentsInternationalPaymentIDPaymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalPaymentsInternationalPaymentIDPaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInternationalPaymentsInternationalPaymentIdPaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetails gets payment details
*/
func (a *Client) GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetails(params *GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetails",
		Method:             "GET",
		PathPattern:        "/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalScheduledPaymentsInternationalScheduledPaymentIDPaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetails gets payment details
*/
func (a *Client) GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetails(params *GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetails",
		Method:             "GET",
		PathPattern:        "/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details",
		ProducesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/jose+jwe", "application/json; charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalStandingOrdersInternationalStandingOrderPaymentIDPaymentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
