// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OBFeeFrequency1Code1 How often is the overdraft fee/charge calculated for the account.
//
// swagger:model OB_FeeFrequency1Code_1
type OBFeeFrequency1Code1 string

const (

	// OBFeeFrequency1Code1FEAC captures enum value "FEAC"
	OBFeeFrequency1Code1FEAC OBFeeFrequency1Code1 = "FEAC"

	// OBFeeFrequency1Code1FEAO captures enum value "FEAO"
	OBFeeFrequency1Code1FEAO OBFeeFrequency1Code1 = "FEAO"

	// OBFeeFrequency1Code1FECP captures enum value "FECP"
	OBFeeFrequency1Code1FECP OBFeeFrequency1Code1 = "FECP"

	// OBFeeFrequency1Code1FEDA captures enum value "FEDA"
	OBFeeFrequency1Code1FEDA OBFeeFrequency1Code1 = "FEDA"

	// OBFeeFrequency1Code1FEHO captures enum value "FEHO"
	OBFeeFrequency1Code1FEHO OBFeeFrequency1Code1 = "FEHO"

	// OBFeeFrequency1Code1FEI captures enum value "FEI"
	OBFeeFrequency1Code1FEI OBFeeFrequency1Code1 = "FEI"

	// OBFeeFrequency1Code1FEMO captures enum value "FEMO"
	OBFeeFrequency1Code1FEMO OBFeeFrequency1Code1 = "FEMO"

	// OBFeeFrequency1Code1FEOA captures enum value "FEOA"
	OBFeeFrequency1Code1FEOA OBFeeFrequency1Code1 = "FEOA"

	// OBFeeFrequency1Code1FEOT captures enum value "FEOT"
	OBFeeFrequency1Code1FEOT OBFeeFrequency1Code1 = "FEOT"

	// OBFeeFrequency1Code1FEPC captures enum value "FEPC"
	OBFeeFrequency1Code1FEPC OBFeeFrequency1Code1 = "FEPC"

	// OBFeeFrequency1Code1FEPH captures enum value "FEPH"
	OBFeeFrequency1Code1FEPH OBFeeFrequency1Code1 = "FEPH"

	// OBFeeFrequency1Code1FEPO captures enum value "FEPO"
	OBFeeFrequency1Code1FEPO OBFeeFrequency1Code1 = "FEPO"

	// OBFeeFrequency1Code1FEPS captures enum value "FEPS"
	OBFeeFrequency1Code1FEPS OBFeeFrequency1Code1 = "FEPS"

	// OBFeeFrequency1Code1FEPT captures enum value "FEPT"
	OBFeeFrequency1Code1FEPT OBFeeFrequency1Code1 = "FEPT"

	// OBFeeFrequency1Code1FEPTA captures enum value "FEPTA"
	OBFeeFrequency1Code1FEPTA OBFeeFrequency1Code1 = "FEPTA"

	// OBFeeFrequency1Code1FEPTP captures enum value "FEPTP"
	OBFeeFrequency1Code1FEPTP OBFeeFrequency1Code1 = "FEPTP"

	// OBFeeFrequency1Code1FEQU captures enum value "FEQU"
	OBFeeFrequency1Code1FEQU OBFeeFrequency1Code1 = "FEQU"

	// OBFeeFrequency1Code1FESM captures enum value "FESM"
	OBFeeFrequency1Code1FESM OBFeeFrequency1Code1 = "FESM"

	// OBFeeFrequency1Code1FEST captures enum value "FEST"
	OBFeeFrequency1Code1FEST OBFeeFrequency1Code1 = "FEST"

	// OBFeeFrequency1Code1FEWE captures enum value "FEWE"
	OBFeeFrequency1Code1FEWE OBFeeFrequency1Code1 = "FEWE"

	// OBFeeFrequency1Code1FEYE captures enum value "FEYE"
	OBFeeFrequency1Code1FEYE OBFeeFrequency1Code1 = "FEYE"
)

// for schema
var oBFeeFrequency1Code1Enum []interface{}

func init() {
	var res []OBFeeFrequency1Code1
	if err := json.Unmarshal([]byte(`["FEAC","FEAO","FECP","FEDA","FEHO","FEI","FEMO","FEOA","FEOT","FEPC","FEPH","FEPO","FEPS","FEPT","FEPTA","FEPTP","FEQU","FESM","FEST","FEWE","FEYE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBFeeFrequency1Code1Enum = append(oBFeeFrequency1Code1Enum, v)
	}
}

func (m OBFeeFrequency1Code1) validateOBFeeFrequency1Code1Enum(path, location string, value OBFeeFrequency1Code1) error {
	if err := validate.EnumCase(path, location, value, oBFeeFrequency1Code1Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this o b fee frequency1 code 1
func (m OBFeeFrequency1Code1) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOBFeeFrequency1Code1Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this o b fee frequency1 code 1 based on context it is used
func (m OBFeeFrequency1Code1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
