// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBAccount6Basic Unambiguous identification of the account to which credit and debit entries are made.
//
// swagger:model OBAccount6Basic
type OBAccount6Basic struct {

	// account Id
	// Required: true
	AccountID *AccountID `json:"AccountId"`

	// account sub type
	// Required: true
	AccountSubType *OBExternalAccountSubType1Code `json:"AccountSubType"`

	// account type
	// Required: true
	AccountType *OBExternalAccountType1Code `json:"AccountType"`

	// currency
	// Required: true
	Currency *ActiveOrHistoricCurrencyCode0 `json:"Currency"`

	// description
	Description Description0 `json:"Description,omitempty"`

	// maturity date
	// Format: date-time
	MaturityDate MaturityDate `json:"MaturityDate,omitempty"`

	// nickname
	Nickname Nickname `json:"Nickname,omitempty"`

	// opening date
	// Format: date-time
	OpeningDate OpeningDate `json:"OpeningDate,omitempty"`

	// status
	Status OBAccountStatus1Code `json:"Status,omitempty"`

	// status update date time
	// Format: date-time
	StatusUpdateDateTime StatusUpdateDateTime `json:"StatusUpdateDateTime,omitempty"`

	// switch status
	SwitchStatus OBExternalSwitchStatusCode `json:"SwitchStatus,omitempty"`
}

// Validate validates this o b account6 basic
func (m *OBAccount6Basic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountSubType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaturityDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpeningDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusUpdateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwitchStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBAccount6Basic) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if m.AccountID != nil {
		if err := m.AccountID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) validateAccountSubType(formats strfmt.Registry) error {

	if err := validate.Required("AccountSubType", "body", m.AccountSubType); err != nil {
		return err
	}

	if err := validate.Required("AccountSubType", "body", m.AccountSubType); err != nil {
		return err
	}

	if m.AccountSubType != nil {
		if err := m.AccountSubType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountSubType")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("AccountType", "body", m.AccountType); err != nil {
		return err
	}

	if err := validate.Required("AccountType", "body", m.AccountType); err != nil {
		return err
	}

	if m.AccountType != nil {
		if err := m.AccountType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountType")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("Currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.Required("Currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Currency")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := m.Description.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Description")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) validateMaturityDate(formats strfmt.Registry) error {
	if swag.IsZero(m.MaturityDate) { // not required
		return nil
	}

	if err := m.MaturityDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MaturityDate")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) validateNickname(formats strfmt.Registry) error {
	if swag.IsZero(m.Nickname) { // not required
		return nil
	}

	if err := m.Nickname.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Nickname")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) validateOpeningDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OpeningDate) { // not required
		return nil
	}

	if err := m.OpeningDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OpeningDate")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Status")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) validateStatusUpdateDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusUpdateDateTime) { // not required
		return nil
	}

	if err := m.StatusUpdateDateTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StatusUpdateDateTime")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) validateSwitchStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.SwitchStatus) { // not required
		return nil
	}

	if err := m.SwitchStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SwitchStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this o b account6 basic based on the context it is used
func (m *OBAccount6Basic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccountSubType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaturityDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNickname(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpeningDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusUpdateDateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwitchStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBAccount6Basic) contextValidateAccountID(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountID != nil {
		if err := m.AccountID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateAccountSubType(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountSubType != nil {
		if err := m.AccountSubType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountSubType")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateAccountType(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountType != nil {
		if err := m.AccountType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountType")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Currency")
			}
			return err
		}
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Description.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Description")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateMaturityDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaturityDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MaturityDate")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateNickname(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Nickname.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Nickname")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateOpeningDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OpeningDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OpeningDate")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Status")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateStatusUpdateDateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StatusUpdateDateTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StatusUpdateDateTime")
		}
		return err
	}

	return nil
}

func (m *OBAccount6Basic) contextValidateSwitchStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SwitchStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SwitchStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBAccount6Basic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBAccount6Basic) UnmarshalBinary(b []byte) error {
	var res OBAccount6Basic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
