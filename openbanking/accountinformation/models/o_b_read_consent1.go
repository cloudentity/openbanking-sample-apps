// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBReadConsent1 o b read consent1
//
// swagger:model OBReadConsent1
type OBReadConsent1 struct {

	// data
	// Required: true
	Data *OBReadConsent1Data `json:"Data"`

	// risk
	// Required: true
	Risk OBRisk2 `json:"Risk"`
}

// Validate validates this o b read consent1
func (m *OBReadConsent1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadConsent1) validateData(formats strfmt.Registry) error {

	if err := validate.Required("Data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadConsent1) validateRisk(formats strfmt.Registry) error {

	if m.Risk == nil {
		return errors.Required("Risk", "body", nil)
	}

	return nil
}

// ContextValidate validate this o b read consent1 based on the context it is used
func (m *OBReadConsent1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadConsent1) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadConsent1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadConsent1) UnmarshalBinary(b []byte) error {
	var res OBReadConsent1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadConsent1Data o b read consent1 data
//
// swagger:model OBReadConsent1Data
type OBReadConsent1Data struct {

	// Specified date and time the permissions will expire.
	// If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	ExpirationDateTime strfmt.DateTime `json:"ExpirationDateTime,omitempty"`

	// permissions
	// Required: true
	// Min Items: 1
	Permissions []string `json:"Permissions"`

	// Specified start date and time for the transaction query period.
	// If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	TransactionFromDateTime strfmt.DateTime `json:"TransactionFromDateTime,omitempty"`

	// Specified end date and time for the transaction query period.
	// If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	TransactionToDateTime strfmt.DateTime `json:"TransactionToDateTime,omitempty"`
}

// Validate validates this o b read consent1 data
func (m *OBReadConsent1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionFromDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionToDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadConsent1Data) validateExpirationDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("Data"+"."+"ExpirationDateTime", "body", "date-time", m.ExpirationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var oBReadConsent1DataPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ReadAccountsBasic","ReadAccountsDetail","ReadBalances","ReadBeneficiariesBasic","ReadBeneficiariesDetail","ReadDirectDebits","ReadOffers","ReadPAN","ReadParty","ReadPartyPSU","ReadProducts","ReadScheduledPaymentsBasic","ReadScheduledPaymentsDetail","ReadStandingOrdersBasic","ReadStandingOrdersDetail","ReadStatementsBasic","ReadStatementsDetail","ReadTransactionsBasic","ReadTransactionsCredits","ReadTransactionsDebits","ReadTransactionsDetail"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadConsent1DataPermissionsItemsEnum = append(oBReadConsent1DataPermissionsItemsEnum, v)
	}
}

func (m *OBReadConsent1Data) validatePermissionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadConsent1DataPermissionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadConsent1Data) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("Data"+"."+"Permissions", "body", m.Permissions); err != nil {
		return err
	}

	iPermissionsSize := int64(len(m.Permissions))

	if err := validate.MinItems("Data"+"."+"Permissions", "body", iPermissionsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Permissions); i++ {

		// value enum
		if err := m.validatePermissionsItemsEnum("Data"+"."+"Permissions"+"."+strconv.Itoa(i), "body", m.Permissions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadConsent1Data) validateTransactionFromDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionFromDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("Data"+"."+"TransactionFromDateTime", "body", "date-time", m.TransactionFromDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBReadConsent1Data) validateTransactionToDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionToDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("Data"+"."+"TransactionToDateTime", "body", "date-time", m.TransactionToDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b read consent1 data based on context it is used
func (m *OBReadConsent1Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBReadConsent1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadConsent1Data) UnmarshalBinary(b []byte) error {
	var res OBReadConsent1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
