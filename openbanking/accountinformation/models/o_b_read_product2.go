// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBReadProduct2 Product details of Other Product which is not avaiable in the standard list
//
// swagger:model OBReadProduct2
type OBReadProduct2 struct {

	// data
	// Required: true
	Data *OBReadProduct2Data `json:"Data"`

	// links
	Links *Links `json:"Links,omitempty"`

	// meta
	Meta *Meta `json:"Meta,omitempty"`
}

// Validate validates this o b read product2
func (m *OBReadProduct2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2) validateData(formats strfmt.Registry) error {

	if err := validate.Required("Data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 based on the context it is used
func (m *OBReadProduct2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Data")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Links")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2Data Aligning with the read write specs structure.
//
// swagger:model OBReadProduct2Data
type OBReadProduct2Data struct {

	// product
	Product []*OBReadProduct2DataProductItems0 `json:"Product"`
}

// Validate validates this o b read product2 data
func (m *OBReadProduct2Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2Data) validateProduct(formats strfmt.Registry) error {
	if swag.IsZero(m.Product) { // not required
		return nil
	}

	for i := 0; i < len(m.Product); i++ {
		if swag.IsZero(m.Product[i]) { // not required
			continue
		}

		if m.Product[i] != nil {
			if err := m.Product[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "Product" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data based on the context it is used
func (m *OBReadProduct2Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProduct(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2Data) contextValidateProduct(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Product); i++ {

		if m.Product[i] != nil {
			if err := m.Product[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + "Product" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2Data) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0 Product details associated with the Account
//
// swagger:model OBReadProduct2DataProductItems0
type OBReadProduct2DataProductItems0 struct {

	// account Id
	// Required: true
	AccountID *AccountID `json:"AccountId"`

	// b c a
	BCA *OBBCAData1 `json:"BCA,omitempty"`

	// Unique and unambiguous identification of a  Product Marketing State.
	// Max Length: 35
	// Min Length: 1
	MarketingStateID string `json:"MarketingStateId,omitempty"`

	// other product type
	OtherProductType *OBReadProduct2DataProductItems0OtherProductType `json:"OtherProductType,omitempty"`

	// p c a
	PCA *OBPCAData1 `json:"PCA,omitempty"`

	// The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
	// Max Length: 40
	// Min Length: 1
	ProductID string `json:"ProductId,omitempty"`

	// The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
	// Max Length: 350
	// Min Length: 1
	ProductName string `json:"ProductName,omitempty"`

	// Product type : Personal Current Account, Business Current Account
	// Required: true
	// Enum: [BusinessCurrentAccount CommercialCreditCard Other PersonalCurrentAccount SMELoan]
	ProductType *string `json:"ProductType"`

	// Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.
	// Max Length: 70
	// Min Length: 1
	SecondaryProductID string `json:"SecondaryProductId,omitempty"`
}

// Validate validates this o b read product2 data product items0
func (m *OBReadProduct2DataProductItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketingStateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryProductID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.Required("AccountId", "body", m.AccountID); err != nil {
		return err
	}

	if m.AccountID != nil {
		if err := m.AccountID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) validateBCA(formats strfmt.Registry) error {
	if swag.IsZero(m.BCA) { // not required
		return nil
	}

	if m.BCA != nil {
		if err := m.BCA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BCA")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) validateMarketingStateID(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketingStateID) { // not required
		return nil
	}

	if err := validate.MinLength("MarketingStateId", "body", m.MarketingStateID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("MarketingStateId", "body", m.MarketingStateID, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) validateOtherProductType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherProductType) { // not required
		return nil
	}

	if m.OtherProductType != nil {
		if err := m.OtherProductType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) validatePCA(formats strfmt.Registry) error {
	if swag.IsZero(m.PCA) { // not required
		return nil
	}

	if m.PCA != nil {
		if err := m.PCA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PCA")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) validateProductID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductID) { // not required
		return nil
	}

	if err := validate.MinLength("ProductId", "body", m.ProductID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ProductId", "body", m.ProductID, 40); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) validateProductName(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductName) { // not required
		return nil
	}

	if err := validate.MinLength("ProductName", "body", m.ProductName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ProductName", "body", m.ProductName, 350); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0TypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BusinessCurrentAccount","CommercialCreditCard","Other","PersonalCurrentAccount","SMELoan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0TypeProductTypePropEnum = append(oBReadProduct2DataProductItems0TypeProductTypePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0ProductTypeBusinessCurrentAccount captures enum value "BusinessCurrentAccount"
	OBReadProduct2DataProductItems0ProductTypeBusinessCurrentAccount string = "BusinessCurrentAccount"

	// OBReadProduct2DataProductItems0ProductTypeCommercialCreditCard captures enum value "CommercialCreditCard"
	OBReadProduct2DataProductItems0ProductTypeCommercialCreditCard string = "CommercialCreditCard"

	// OBReadProduct2DataProductItems0ProductTypeOther captures enum value "Other"
	OBReadProduct2DataProductItems0ProductTypeOther string = "Other"

	// OBReadProduct2DataProductItems0ProductTypePersonalCurrentAccount captures enum value "PersonalCurrentAccount"
	OBReadProduct2DataProductItems0ProductTypePersonalCurrentAccount string = "PersonalCurrentAccount"

	// OBReadProduct2DataProductItems0ProductTypeSMELoan captures enum value "SMELoan"
	OBReadProduct2DataProductItems0ProductTypeSMELoan string = "SMELoan"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0TypeProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0) validateProductType(formats strfmt.Registry) error {

	if err := validate.Required("ProductType", "body", m.ProductType); err != nil {
		return err
	}

	// value enum
	if err := m.validateProductTypeEnum("ProductType", "body", *m.ProductType); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) validateSecondaryProductID(formats strfmt.Registry) error {
	if swag.IsZero(m.SecondaryProductID) { // not required
		return nil
	}

	if err := validate.MinLength("SecondaryProductId", "body", m.SecondaryProductID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("SecondaryProductId", "body", m.SecondaryProductID, 70); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBCA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherProductType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePCA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0) contextValidateAccountID(ctx context.Context, formats strfmt.Registry) error {

	if m.AccountID != nil {
		if err := m.AccountID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountId")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) contextValidateBCA(ctx context.Context, formats strfmt.Registry) error {

	if m.BCA != nil {
		if err := m.BCA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BCA")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) contextValidateOtherProductType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherProductType != nil {
		if err := m.OtherProductType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0) contextValidatePCA(ctx context.Context, formats strfmt.Registry) error {

	if m.PCA != nil {
		if err := m.PCA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PCA")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductType Other product type details associated with the account.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductType
type OBReadProduct2DataProductItems0OtherProductType struct {

	// credit interest
	CreditInterest *OBReadProduct2DataProductItems0OtherProductTypeCreditInterest `json:"CreditInterest,omitempty"`

	// Description of the Product associated with the account
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Description *string `json:"Description"`

	// loan interest
	LoanInterest *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest `json:"LoanInterest,omitempty"`

	// Long name associated with the product
	// Required: true
	// Max Length: 350
	// Min Length: 1
	Name *string `json:"Name"`

	// other fees charges
	OtherFeesCharges []*OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0 `json:"OtherFeesCharges"`

	// overdraft
	Overdraft *OBReadProduct2DataProductItems0OtherProductTypeOverdraft `json:"Overdraft,omitempty"`

	// product details
	ProductDetails *OBReadProduct2DataProductItems0OtherProductTypeProductDetails `json:"ProductDetails,omitempty"`

	// repayment
	Repayment *OBReadProduct2DataProductItems0OtherProductTypeRepayment `json:"Repayment,omitempty"`

	// supplementary data
	SupplementaryData OBSupplementaryData1 `json:"SupplementaryData,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type
func (m *OBReadProduct2DataProductItems0OtherProductType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepayment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateCreditInterest(formats strfmt.Registry) error {
	if swag.IsZero(m.CreditInterest) { // not required
		return nil
	}

	if m.CreditInterest != nil {
		if err := m.CreditInterest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "CreditInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("OtherProductType"+"."+"Description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherProductType"+"."+"Description", "body", *m.Description, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateLoanInterest(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanInterest) { // not required
		return nil
	}

	if m.LoanInterest != nil {
		if err := m.LoanInterest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "LoanInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("OtherProductType"+"."+"Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("OtherProductType"+"."+"Name", "body", *m.Name, 350); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateOtherFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeesCharges); i++ {
		if swag.IsZero(m.OtherFeesCharges[i]) { // not required
			continue
		}

		if m.OtherFeesCharges[i] != nil {
			if err := m.OtherFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "OtherFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateOverdraft(formats strfmt.Registry) error {
	if swag.IsZero(m.Overdraft) { // not required
		return nil
	}

	if m.Overdraft != nil {
		if err := m.Overdraft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Overdraft")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateProductDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductDetails) { // not required
		return nil
	}

	if m.ProductDetails != nil {
		if err := m.ProductDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "ProductDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) validateRepayment(formats strfmt.Registry) error {
	if swag.IsZero(m.Repayment) { // not required
		return nil
	}

	if m.Repayment != nil {
		if err := m.Repayment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreditInterest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoanInterest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepayment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) contextValidateCreditInterest(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditInterest != nil {
		if err := m.CreditInterest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "CreditInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) contextValidateLoanInterest(ctx context.Context, formats strfmt.Registry) error {

	if m.LoanInterest != nil {
		if err := m.LoanInterest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "LoanInterest")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) contextValidateOtherFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeesCharges); i++ {

		if m.OtherFeesCharges[i] != nil {
			if err := m.OtherFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "OtherFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) contextValidateOverdraft(ctx context.Context, formats strfmt.Registry) error {

	if m.Overdraft != nil {
		if err := m.Overdraft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Overdraft")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) contextValidateProductDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductDetails != nil {
		if err := m.ProductDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "ProductDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductType) contextValidateRepayment(ctx context.Context, formats strfmt.Registry) error {

	if m.Repayment != nil {
		if err := m.Repayment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductType) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeCreditInterest Details about the interest that may be payable to the Account holders
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeCreditInterest
type OBReadProduct2DataProductItems0OtherProductTypeCreditInterest struct {

	// tier band set
	// Required: true
	// Min Items: 1
	TierBandSet []*OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0 `json:"TierBandSet"`
}

// Validate validates this o b read product2 data product items0 other product type credit interest
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTierBandSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterest) validateTierBandSet(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"CreditInterest"+"."+"TierBandSet", "body", m.TierBandSet); err != nil {
		return err
	}

	iTierBandSetSize := int64(len(m.TierBandSet))

	if err := validate.MinItems("OtherProductType"+"."+"CreditInterest"+"."+"TierBandSet", "body", iTierBandSetSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TierBandSet); i++ {
		if swag.IsZero(m.TierBandSet[i]) { // not required
			continue
		}

		if m.TierBandSet[i] != nil {
			if err := m.TierBandSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "CreditInterest" + "." + "TierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type credit interest based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTierBandSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterest) contextValidateTierBandSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TierBandSet); i++ {

		if m.TierBandSet[i] != nil {
			if err := m.TierBandSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "CreditInterest" + "." + "TierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterest) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeCreditInterest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0 The group of tiers or bands for which credit interest can be applied.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0
type OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0 struct {

	// calculation method
	CalculationMethod OBInterestCalculationMethod1Code `json:"CalculationMethod,omitempty"`

	// Describes whether accrued interest is payable only to the BCA or to another bank account
	// Required: true
	// Enum: [INOT INPA INSC]
	Destination *string `json:"Destination"`

	// notes
	Notes []string `json:"Notes"`

	// other calculation method
	OtherCalculationMethod *OBOtherCodeType10 `json:"OtherCalculationMethod,omitempty"`

	// other destination
	OtherDestination *OBOtherCodeType10 `json:"OtherDestination,omitempty"`

	// tier band
	// Required: true
	// Min Items: 1
	TierBand []*OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0 `json:"TierBand"`

	// The methodology of how credit interest is paid/applied. It can be:-
	// 1. Banded
	// Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
	// 2. Tiered
	// Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
	// 3. Whole
	// The same interest rate is applied irrespective of the product holder's account balance
	// Required: true
	// Enum: [INBA INTI INWH]
	TierBandMethod *string `json:"TierBandMethod"`
}

// Validate validates this o b read product2 data product items0 other product type credit interest tier band set items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBandMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateCalculationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationMethod) { // not required
		return nil
	}

	if err := m.CalculationMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationMethod")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INOT","INPA","INSC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeDestinationPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeDestinationPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0DestinationINOT captures enum value "INOT"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0DestinationINOT string = "INOT"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0DestinationINPA captures enum value "INPA"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0DestinationINPA string = "INPA"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0DestinationINSC captures enum value "INSC"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0DestinationINSC string = "INSC"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateDestinationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeDestinationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("Destination", "body", m.Destination); err != nil {
		return err
	}

	// value enum
	if err := m.validateDestinationEnum("Destination", "body", *m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateOtherCalculationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationMethod) { // not required
		return nil
	}

	if m.OtherCalculationMethod != nil {
		if err := m.OtherCalculationMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationMethod")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateOtherDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherDestination) { // not required
		return nil
	}

	if m.OtherDestination != nil {
		if err := m.OtherDestination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherDestination")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateTierBand(formats strfmt.Registry) error {

	if err := validate.Required("TierBand", "body", m.TierBand); err != nil {
		return err
	}

	iTierBandSize := int64(len(m.TierBand))

	if err := validate.MinItems("TierBand", "body", iTierBandSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TierBand); i++ {
		if swag.IsZero(m.TierBand[i]) { // not required
			continue
		}

		if m.TierBand[i] != nil {
			if err := m.TierBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeTierBandMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INBA","INTI","INWH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeTierBandMethodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeTierBandMethodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandMethodINBA captures enum value "INBA"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandMethodINBA string = "INBA"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandMethodINTI captures enum value "INTI"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandMethodINTI string = "INTI"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandMethodINWH captures enum value "INWH"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandMethodINWH string = "INWH"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateTierBandMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TypeTierBandMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) validateTierBandMethod(formats strfmt.Registry) error {

	if err := validate.Required("TierBandMethod", "body", m.TierBandMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierBandMethodEnum("TierBandMethod", "body", *m.TierBandMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type credit interest tier band set items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCalculationMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTierBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) contextValidateCalculationMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CalculationMethod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationMethod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) contextValidateOtherCalculationMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationMethod != nil {
		if err := m.OtherCalculationMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationMethod")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) contextValidateOtherDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherDestination != nil {
		if err := m.OtherDestination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherDestination")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) contextValidateTierBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TierBand); i++ {

		if m.TierBand[i] != nil {
			if err := m.TierBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0 Tier Band Details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0
type OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0 struct {

	// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.
	// Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
	// Required: true
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	AER *string `json:"AER"`

	// How often is interest applied to the Product for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's account.
	// Required: true
	// Enum: [FQAT FQDY FQHY FQMY FQOT FQQY FQSD FQWY FQYY]
	ApplicationFrequency *string `json:"ApplicationFrequency"`

	// Bank Interest for the product
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	BankInterestRate string `json:"BankInterestRate,omitempty"`

	// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the account holder's account.
	// Enum: [INBB INFR INGR INLR INNE INOT]
	BankInterestRateType string `json:"BankInterestRateType,omitempty"`

	// How often is credit interest calculated for the account.
	// Enum: [FQAT FQDY FQHY FQMY FQOT FQQY FQSD FQWY FQYY]
	CalculationFrequency string `json:"CalculationFrequency,omitempty"`

	// Amount on which Interest applied.
	// Enum: [INBA INTI INWH]
	DepositInterestAppliedCoverage string `json:"DepositInterestAppliedCoverage,omitempty"`

	// fixed variable interest rate type
	// Required: true
	FixedVariableInterestRateType *OBInterestFixedVariableType1Code `json:"FixedVariableInterestRateType"`

	// Unique and unambiguous identification of a  Tier Band for the Product.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBOtherCodeType11 `json:"OtherApplicationFrequency,omitempty"`

	// other bank interest type
	OtherBankInterestType *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType `json:"OtherBankInterestType,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBOtherCodeType12 `json:"OtherCalculationFrequency,omitempty"`

	// Maximum deposit value for which the credit interest tier applies.
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	TierValueMaximum string `json:"TierValueMaximum,omitempty"`

	// Minimum deposit value for which the credit interest tier applies.
	// Required: true
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	TierValueMinimum *string `json:"TierValueMinimum"`
}

// Validate validates this o b read product2 data product items0 other product type credit interest tier band set items0 tier band items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankInterestRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepositInterestAppliedCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedVariableInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherBankInterestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMinimum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateAER(formats strfmt.Registry) error {

	if err := validate.Required("AER", "body", m.AER); err != nil {
		return err
	}

	if err := validate.Pattern("AER", "body", *m.AER, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FQAT","FQDY","FQHY","FQMY","FQOT","FQQY","FQSD","FQWY","FQYY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQAT captures enum value "FQAT"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQAT string = "FQAT"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQDY captures enum value "FQDY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQDY string = "FQDY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQHY captures enum value "FQHY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQHY string = "FQHY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQMY captures enum value "FQMY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQMY string = "FQMY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQOT captures enum value "FQOT"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQOT string = "FQOT"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQQY captures enum value "FQQY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQQY string = "FQQY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQSD captures enum value "FQSD"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQSD string = "FQSD"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQWY captures enum value "FQWY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQWY string = "FQWY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQYY captures enum value "FQYY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0ApplicationFrequencyFQYY string = "FQYY"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateApplicationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeApplicationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationFrequencyEnum("ApplicationFrequency", "body", *m.ApplicationFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRate(formats strfmt.Registry) error {
	if swag.IsZero(m.BankInterestRate) { // not required
		return nil
	}

	if err := validate.Pattern("BankInterestRate", "body", m.BankInterestRate, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INBB","INFR","INGR","INLR","INNE","INOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINBB captures enum value "INBB"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINBB string = "INBB"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINFR captures enum value "INFR"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINFR string = "INFR"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINGR captures enum value "INGR"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINGR string = "INGR"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINLR captures enum value "INLR"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINLR string = "INLR"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINNE captures enum value "INNE"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINNE string = "INNE"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINOT captures enum value "INOT"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0BankInterestRateTypeINOT string = "INOT"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeBankInterestRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateBankInterestRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.BankInterestRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBankInterestRateTypeEnum("BankInterestRateType", "body", m.BankInterestRateType); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FQAT","FQDY","FQHY","FQMY","FQOT","FQQY","FQSD","FQWY","FQYY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQAT captures enum value "FQAT"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQAT string = "FQAT"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQDY captures enum value "FQDY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQDY string = "FQDY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQHY captures enum value "FQHY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQHY string = "FQHY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQMY captures enum value "FQMY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQMY string = "FQMY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQOT captures enum value "FQOT"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQOT string = "FQOT"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQQY captures enum value "FQQY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQQY string = "FQQY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQSD captures enum value "FQSD"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQSD string = "FQSD"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQWY captures enum value "FQWY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQWY string = "FQWY"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQYY captures enum value "FQYY"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0CalculationFrequencyFQYY string = "FQYY"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateCalculationFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeCalculationFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalculationFrequencyEnum("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INBA","INTI","INWH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageINBA captures enum value "INBA"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageINBA string = "INBA"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageINTI captures enum value "INTI"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageINTI string = "INTI"

	// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageINWH captures enum value "INWH"
	OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0DepositInterestAppliedCoverageINWH string = "INWH"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateDepositInterestAppliedCoverageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0TypeDepositInterestAppliedCoveragePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateDepositInterestAppliedCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.DepositInterestAppliedCoverage) { // not required
		return nil
	}

	// value enum
	if err := m.validateDepositInterestAppliedCoverageEnum("DepositInterestAppliedCoverage", "body", m.DepositInterestAppliedCoverage); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateFixedVariableInterestRateType(formats strfmt.Registry) error {

	if err := validate.Required("FixedVariableInterestRateType", "body", m.FixedVariableInterestRateType); err != nil {
		return err
	}

	if err := validate.Required("FixedVariableInterestRateType", "body", m.FixedVariableInterestRateType); err != nil {
		return err
	}

	if m.FixedVariableInterestRateType != nil {
		if err := m.FixedVariableInterestRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FixedVariableInterestRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateOtherBankInterestType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherBankInterestType) { // not required
		return nil
	}

	if m.OtherBankInterestType != nil {
		if err := m.OtherBankInterestType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateTierValueMaximum(formats strfmt.Registry) error {
	if swag.IsZero(m.TierValueMaximum) { // not required
		return nil
	}

	if err := validate.Pattern("TierValueMaximum", "body", m.TierValueMaximum, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) validateTierValueMinimum(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMinimum", "body", m.TierValueMinimum); err != nil {
		return err
	}

	if err := validate.Pattern("TierValueMinimum", "body", *m.TierValueMinimum, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type credit interest tier band set items0 tier band items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFixedVariableInterestRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherBankInterestType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) contextValidateFixedVariableInterestRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.FixedVariableInterestRateType != nil {
		if err := m.FixedVariableInterestRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FixedVariableInterestRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherBankInterestType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherBankInterestType != nil {
		if err := m.OtherBankInterestType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType Other interest rate types which are not available in the standard code list
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType
type OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type credit interest tier band set items0 tier band items0 other bank interest type
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherBankInterestType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherBankInterestType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("OtherBankInterestType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherBankInterestType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("OtherBankInterestType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type credit interest tier band set items0 tier band items0 other bank interest type based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherBankInterestType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherBankInterestType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeCreditInterestTierBandSetItems0TierBandItems0OtherBankInterestType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterest Details about the interest that may be payable to the SME Loan holders
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterest
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterest struct {

	// loan interest tier band set
	// Required: true
	// Min Items: 1
	LoanInterestTierBandSet []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0 `json:"LoanInterestTierBandSet"`

	// notes
	Notes []string `json:"Notes"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoanInterestTierBandSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest) validateLoanInterestTierBandSet(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"LoanInterest"+"."+"LoanInterestTierBandSet", "body", m.LoanInterestTierBandSet); err != nil {
		return err
	}

	iLoanInterestTierBandSetSize := int64(len(m.LoanInterestTierBandSet))

	if err := validate.MinItems("OtherProductType"+"."+"LoanInterest"+"."+"LoanInterestTierBandSet", "body", iLoanInterestTierBandSetSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.LoanInterestTierBandSet); i++ {
		if swag.IsZero(m.LoanInterestTierBandSet[i]) { // not required
			continue
		}

		if m.LoanInterestTierBandSet[i] != nil {
			if err := m.LoanInterestTierBandSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "LoanInterest" + "." + "LoanInterestTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("OtherProductType"+"."+"LoanInterest"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("OtherProductType"+"."+"LoanInterest"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoanInterestTierBandSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest) contextValidateLoanInterestTierBandSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestTierBandSet); i++ {

		if m.LoanInterestTierBandSet[i] != nil {
			if err := m.LoanInterestTierBandSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "LoanInterest" + "." + "LoanInterestTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterest) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0 The group of tiers or bands for which debit interest can be applied.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0 struct {

	// calculation method
	// Required: true
	CalculationMethod *OBInterestCalculationMethod1Code `json:"CalculationMethod"`

	// Loan interest tierbandset identification. Used by  loan providers for internal use purpose.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// loan interest fees charges
	LoanInterestFeesCharges []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0 `json:"LoanInterestFeesCharges"`

	// loan interest tier band
	// Required: true
	// Min Items: 1
	LoanInterestTierBand []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0 `json:"LoanInterestTierBand"`

	// notes
	Notes []string `json:"Notes"`

	// other calculation method
	OtherCalculationMethod *OBOtherCodeType10 `json:"OtherCalculationMethod,omitempty"`

	// The methodology of how credit interest is charged. It can be:-
	// 1. Banded
	// Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
	// 2. Tiered
	// Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
	// 3. Whole
	// The same interest rate is applied irrespective of the SME Loan balance
	// Required: true
	// Enum: [INBA INTI INWH]
	TierBandMethod *string `json:"TierBandMethod"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalculationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanInterestFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanInterestTierBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBandMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateCalculationMethod(formats strfmt.Registry) error {

	if err := validate.Required("CalculationMethod", "body", m.CalculationMethod); err != nil {
		return err
	}

	if err := validate.Required("CalculationMethod", "body", m.CalculationMethod); err != nil {
		return err
	}

	if m.CalculationMethod != nil {
		if err := m.CalculationMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationMethod")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateLoanInterestFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanInterestFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.LoanInterestFeesCharges); i++ {
		if swag.IsZero(m.LoanInterestFeesCharges[i]) { // not required
			continue
		}

		if m.LoanInterestFeesCharges[i] != nil {
			if err := m.LoanInterestFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateLoanInterestTierBand(formats strfmt.Registry) error {

	if err := validate.Required("LoanInterestTierBand", "body", m.LoanInterestTierBand); err != nil {
		return err
	}

	iLoanInterestTierBandSize := int64(len(m.LoanInterestTierBand))

	if err := validate.MinItems("LoanInterestTierBand", "body", iLoanInterestTierBandSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.LoanInterestTierBand); i++ {
		if swag.IsZero(m.LoanInterestTierBand[i]) { // not required
			continue
		}

		if m.LoanInterestTierBand[i] != nil {
			if err := m.LoanInterestTierBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateOtherCalculationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationMethod) { // not required
		return nil
	}

	if m.OtherCalculationMethod != nil {
		if err := m.OtherCalculationMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationMethod")
			}
			return err
		}
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TypeTierBandMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INBA","INTI","INWH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TypeTierBandMethodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TypeTierBandMethodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TierBandMethodINBA captures enum value "INBA"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TierBandMethodINBA string = "INBA"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TierBandMethodINTI captures enum value "INTI"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TierBandMethodINTI string = "INTI"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TierBandMethodINWH captures enum value "INWH"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TierBandMethodINWH string = "INWH"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateTierBandMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0TypeTierBandMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) validateTierBandMethod(formats strfmt.Registry) error {

	if err := validate.Required("TierBandMethod", "body", m.TierBandMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierBandMethodEnum("TierBandMethod", "body", *m.TierBandMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCalculationMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoanInterestFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoanInterestTierBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) contextValidateCalculationMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.CalculationMethod != nil {
		if err := m.CalculationMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationMethod")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) contextValidateLoanInterestFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestFeesCharges); i++ {

		if m.LoanInterestFeesCharges[i] != nil {
			if err := m.LoanInterestFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) contextValidateLoanInterestTierBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestTierBand); i++ {

		if m.LoanInterestTierBand[i] != nil {
			if err := m.LoanInterestTierBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) contextValidateOtherCalculationMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationMethod != nil {
		if err := m.OtherCalculationMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationMethod")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0 Contains details of fees and charges which are not associated with either LoanRepayment or features/benefits
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0 struct {

	// loan interest fee charge cap
	LoanInterestFeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0 `json:"LoanInterestFeeChargeCap"`

	// loan interest fee charge detail
	// Required: true
	// Min Items: 1
	LoanInterestFeeChargeDetail []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0 `json:"LoanInterestFeeChargeDetail"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoanInterestFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanInterestFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) validateLoanInterestFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanInterestFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.LoanInterestFeeChargeCap); i++ {
		if swag.IsZero(m.LoanInterestFeeChargeCap[i]) { // not required
			continue
		}

		if m.LoanInterestFeeChargeCap[i] != nil {
			if err := m.LoanInterestFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) validateLoanInterestFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("LoanInterestFeeChargeDetail", "body", m.LoanInterestFeeChargeDetail); err != nil {
		return err
	}

	iLoanInterestFeeChargeDetailSize := int64(len(m.LoanInterestFeeChargeDetail))

	if err := validate.MinItems("LoanInterestFeeChargeDetail", "body", iLoanInterestFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.LoanInterestFeeChargeDetail); i++ {
		if swag.IsZero(m.LoanInterestFeeChargeDetail[i]) { // not required
			continue
		}

		if m.LoanInterestFeeChargeDetail[i] != nil {
			if err := m.LoanInterestFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoanInterestFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoanInterestFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) contextValidateLoanInterestFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestFeeChargeCap); i++ {

		if m.LoanInterestFeeChargeCap[i] != nil {
			if err := m.LoanInterestFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) contextValidateLoanInterestFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestFeeChargeDetail); i++ {

		if m.LoanInterestFeeChargeDetail[i] != nil {
			if err := m.LoanInterestFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0 Details about any caps (minimum/maximum charges) that apply to a particular fee/charge
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBFeeFrequency1Code4 `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount14 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number1 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0 loan interest fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FEPF","FTOT","FYAF","FYAM","FYAQ","FYCP","FYDB","FYMI","FYXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0 loan interest fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0 loan interest fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0 loan interest fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0 Other fees/charges details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0 struct {

	// application frequency
	// Required: true
	ApplicationFrequency *OBFeeFrequency1Code2 `json:"ApplicationFrequency"`

	// calculation frequency
	// Required: true
	CalculationFrequency *OBFeeFrequency1Code3 `json:"CalculationFrequency"`

	// fee amount
	FeeAmount OBAmount13 `json:"FeeAmount,omitempty"`

	// fee rate
	FeeRate OBRate11 `json:"FeeRate,omitempty"`

	// fee rate type
	FeeRateType OBInterestRateType1Code1 `json:"FeeRateType,omitempty"`

	// fee type
	// Required: true
	FeeType *OBFeeType1Code `json:"FeeType"`

	// Fee/charge which is usually negotiable rather than a fixed amount
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBOtherCodeType16 `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBOtherCodeType17 `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBOtherCodeType15 `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBOtherFeeChargeDetailType `json:"OtherFeeType,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0 loan interest fee charge detail items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	if err := validate.Required("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	if m.CalculationFrequency != nil {
		if err := m.CalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := m.FeeAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := m.FeeRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	if err := m.FeeRateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if m.FeeType != nil {
		if err := m.FeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest fees charges items0 loan interest fee charge detail items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.CalculationFrequency != nil {
		if err := m.CalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRateType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeType != nil {
		if err := m.FeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0 Tier Band Details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0 struct {

	// fixed variable interest rate type
	// Required: true
	FixedVariableInterestRateType *OBInterestFixedVariableType1Code `json:"FixedVariableInterestRateType"`

	// Unique and unambiguous identification of a  Tier Band for a SME Loan.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// loan interest fees charges
	LoanInterestFeesCharges []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0 `json:"LoanInterestFeesCharges"`

	// Loan provider Interest for the SME Loan product
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	LoanProviderInterestRate string `json:"LoanProviderInterestRate,omitempty"`

	// Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
	// Enum: [INBB INFR INGR INLR INNE INOT]
	LoanProviderInterestRateType string `json:"LoanProviderInterestRateType,omitempty"`

	// The unit of period (days, weeks, months etc.) of the Maximum Term
	// Enum: [PACT PDAY PHYR PMTH PQTR PWEK PYER]
	MaxTermPeriod string `json:"MaxTermPeriod,omitempty"`

	// The unit of period (days, weeks, months etc.) of the Minimum Term
	// Required: true
	// Enum: [PACT PDAY PHYR PMTH PQTR PWEK PYER]
	MinTermPeriod *string `json:"MinTermPeriod"`

	// notes
	Notes []string `json:"Notes"`

	// other loan provider interest rate type
	OtherLoanProviderInterestRateType *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType `json:"OtherLoanProviderInterestRateType,omitempty"`

	// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.
	// For SME Loan, this APR is the representative APR which includes any account fees.
	// Required: true
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	RepAPR *string `json:"RepAPR"`

	// Maximum loan term for which the loan interest tier applies.
	TierValueMaxTerm int64 `json:"TierValueMaxTerm,omitempty"`

	// Maximum loan value for which the loan interest tier applies.
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	TierValueMaximum string `json:"TierValueMaximum,omitempty"`

	// Minimum loan term for which the loan interest tier applies.
	// Required: true
	TierValueMinTerm *int64 `json:"TierValueMinTerm"`

	// Minimum loan value for which the loan interest tier applies.
	// Required: true
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	TierValueMinimum *string `json:"TierValueMinimum"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFixedVariableInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanInterestFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanProviderInterestRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanProviderInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTermPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinTermPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherLoanProviderInterestRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepAPR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMinTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMinimum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateFixedVariableInterestRateType(formats strfmt.Registry) error {

	if err := validate.Required("FixedVariableInterestRateType", "body", m.FixedVariableInterestRateType); err != nil {
		return err
	}

	if err := validate.Required("FixedVariableInterestRateType", "body", m.FixedVariableInterestRateType); err != nil {
		return err
	}

	if m.FixedVariableInterestRateType != nil {
		if err := m.FixedVariableInterestRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FixedVariableInterestRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateLoanInterestFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanInterestFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.LoanInterestFeesCharges); i++ {
		if swag.IsZero(m.LoanInterestFeesCharges[i]) { // not required
			continue
		}

		if m.LoanInterestFeesCharges[i] != nil {
			if err := m.LoanInterestFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateLoanProviderInterestRate(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanProviderInterestRate) { // not required
		return nil
	}

	if err := validate.Pattern("LoanProviderInterestRate", "body", m.LoanProviderInterestRate, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeLoanProviderInterestRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INBB","INFR","INGR","INLR","INNE","INOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeLoanProviderInterestRateTypePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeLoanProviderInterestRateTypePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINBB captures enum value "INBB"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINBB string = "INBB"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINFR captures enum value "INFR"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINFR string = "INFR"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINGR captures enum value "INGR"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINGR string = "INGR"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINLR captures enum value "INLR"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINLR string = "INLR"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINNE captures enum value "INNE"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINNE string = "INNE"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINOT captures enum value "INOT"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanProviderInterestRateTypeINOT string = "INOT"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateLoanProviderInterestRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeLoanProviderInterestRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateLoanProviderInterestRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanProviderInterestRateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLoanProviderInterestRateTypeEnum("LoanProviderInterestRateType", "body", m.LoanProviderInterestRateType); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMaxTermPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PACT","PDAY","PHYR","PMTH","PQTR","PWEK","PYER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMaxTermPeriodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMaxTermPeriodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPACT captures enum value "PACT"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPACT string = "PACT"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPDAY captures enum value "PDAY"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPDAY string = "PDAY"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPHYR captures enum value "PHYR"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPHYR string = "PHYR"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPMTH captures enum value "PMTH"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPMTH string = "PMTH"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPQTR captures enum value "PQTR"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPQTR string = "PQTR"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPWEK captures enum value "PWEK"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPWEK string = "PWEK"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPYER captures enum value "PYER"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MaxTermPeriodPYER string = "PYER"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateMaxTermPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMaxTermPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateMaxTermPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxTermPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateMaxTermPeriodEnum("MaxTermPeriod", "body", m.MaxTermPeriod); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMinTermPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PACT","PDAY","PHYR","PMTH","PQTR","PWEK","PYER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMinTermPeriodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMinTermPeriodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPACT captures enum value "PACT"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPACT string = "PACT"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPDAY captures enum value "PDAY"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPDAY string = "PDAY"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPHYR captures enum value "PHYR"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPHYR string = "PHYR"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPMTH captures enum value "PMTH"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPMTH string = "PMTH"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPQTR captures enum value "PQTR"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPQTR string = "PQTR"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPWEK captures enum value "PWEK"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPWEK string = "PWEK"

	// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPYER captures enum value "PYER"
	OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0MinTermPeriodPYER string = "PYER"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateMinTermPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0TypeMinTermPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateMinTermPeriod(formats strfmt.Registry) error {

	if err := validate.Required("MinTermPeriod", "body", m.MinTermPeriod); err != nil {
		return err
	}

	// value enum
	if err := m.validateMinTermPeriodEnum("MinTermPeriod", "body", *m.MinTermPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateOtherLoanProviderInterestRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherLoanProviderInterestRateType) { // not required
		return nil
	}

	if m.OtherLoanProviderInterestRateType != nil {
		if err := m.OtherLoanProviderInterestRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherLoanProviderInterestRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateRepAPR(formats strfmt.Registry) error {

	if err := validate.Required("RepAPR", "body", m.RepAPR); err != nil {
		return err
	}

	if err := validate.Pattern("RepAPR", "body", *m.RepAPR, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateTierValueMaximum(formats strfmt.Registry) error {
	if swag.IsZero(m.TierValueMaximum) { // not required
		return nil
	}

	if err := validate.Pattern("TierValueMaximum", "body", m.TierValueMaximum, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateTierValueMinTerm(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMinTerm", "body", m.TierValueMinTerm); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) validateTierValueMinimum(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMinimum", "body", m.TierValueMinimum); err != nil {
		return err
	}

	if err := validate.Pattern("TierValueMinimum", "body", *m.TierValueMinimum, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFixedVariableInterestRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoanInterestFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherLoanProviderInterestRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) contextValidateFixedVariableInterestRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.FixedVariableInterestRateType != nil {
		if err := m.FixedVariableInterestRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FixedVariableInterestRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) contextValidateLoanInterestFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestFeesCharges); i++ {

		if m.LoanInterestFeesCharges[i] != nil {
			if err := m.LoanInterestFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) contextValidateOtherLoanProviderInterestRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherLoanProviderInterestRateType != nil {
		if err := m.OtherLoanProviderInterestRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherLoanProviderInterestRateType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0 Contains details of fees and charges which are not associated with either LoanRepayment or features/benefits
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0 struct {

	// loan interest fee charge cap
	LoanInterestFeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0 `json:"LoanInterestFeeChargeCap"`

	// loan interest fee charge detail
	// Required: true
	// Min Items: 1
	LoanInterestFeeChargeDetail []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0 `json:"LoanInterestFeeChargeDetail"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoanInterestFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanInterestFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) validateLoanInterestFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanInterestFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.LoanInterestFeeChargeCap); i++ {
		if swag.IsZero(m.LoanInterestFeeChargeCap[i]) { // not required
			continue
		}

		if m.LoanInterestFeeChargeCap[i] != nil {
			if err := m.LoanInterestFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) validateLoanInterestFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("LoanInterestFeeChargeDetail", "body", m.LoanInterestFeeChargeDetail); err != nil {
		return err
	}

	iLoanInterestFeeChargeDetailSize := int64(len(m.LoanInterestFeeChargeDetail))

	if err := validate.MinItems("LoanInterestFeeChargeDetail", "body", iLoanInterestFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.LoanInterestFeeChargeDetail); i++ {
		if swag.IsZero(m.LoanInterestFeeChargeDetail[i]) { // not required
			continue
		}

		if m.LoanInterestFeeChargeDetail[i] != nil {
			if err := m.LoanInterestFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoanInterestFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoanInterestFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) contextValidateLoanInterestFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestFeeChargeCap); i++ {

		if m.LoanInterestFeeChargeCap[i] != nil {
			if err := m.LoanInterestFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) contextValidateLoanInterestFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LoanInterestFeeChargeDetail); i++ {

		if m.LoanInterestFeeChargeDetail[i] != nil {
			if err := m.LoanInterestFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LoanInterestFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0 Details about any caps (minimum/maximum charges) that apply to a particular fee/charge
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBFeeFrequency1Code4 `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount14 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number1 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0 loan interest fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FEPF","FTOT","FYAF","FYAM","FYAQ","FYCP","FYDB","FYMI","FYXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0 loan interest fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0 loan interest fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0 loan interest fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0 Other fees/charges details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0 struct {

	// application frequency
	// Required: true
	ApplicationFrequency *OBFeeFrequency1Code2 `json:"ApplicationFrequency"`

	// calculation frequency
	// Required: true
	CalculationFrequency *OBFeeFrequency1Code3 `json:"CalculationFrequency"`

	// fee amount
	FeeAmount OBAmount13 `json:"FeeAmount,omitempty"`

	// fee rate
	FeeRate OBRate11 `json:"FeeRate,omitempty"`

	// fee rate type
	FeeRateType OBInterestRateType1Code1 `json:"FeeRateType,omitempty"`

	// fee type
	// Required: true
	FeeType *OBFeeType1Code `json:"FeeType"`

	// Fee/charge which is usually negotiable rather than a fixed amount
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBOtherCodeType16 `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBOtherCodeType17 `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBOtherCodeType15 `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBOtherFeeChargeDetailType `json:"OtherFeeType,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0 loan interest fee charge detail items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	if err := validate.Required("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	if m.CalculationFrequency != nil {
		if err := m.CalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := m.FeeAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := m.FeeRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	if err := m.FeeRateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if m.FeeType != nil {
		if err := m.FeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 loan interest fees charges items0 loan interest fee charge detail items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.CalculationFrequency != nil {
		if err := m.CalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRateType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeType != nil {
		if err := m.FeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0LoanInterestFeesChargesItems0LoanInterestFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType Other loan interest rate types which are not available in the standard code list
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType
type OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 other loan provider interest rate type
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherLoanProviderInterestRateType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherLoanProviderInterestRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("OtherLoanProviderInterestRateType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherLoanProviderInterestRateType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherLoanProviderInterestRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("OtherLoanProviderInterestRateType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherLoanProviderInterestRateType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type loan interest loan interest tier band set items0 loan interest tier band items0 other loan provider interest rate type based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherLoanProviderInterestRateType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherLoanProviderInterestRateType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherLoanProviderInterestRateType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeLoanInterestLoanInterestTierBandSetItems0LoanInterestTierBandItems0OtherLoanProviderInterestRateType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0 Contains details of fees and charges which are not associated with either Overdraft or features/benefits
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0 struct {

	// fee charge cap
	FeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0 `json:"FeeChargeCap"`

	// fee charge detail
	// Required: true
	// Min Items: 1
	FeeChargeDetail []*OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0 `json:"FeeChargeDetail"`

	// other tariff type
	OtherTariffType *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType `json:"OtherTariffType,omitempty"`

	// Name of the tariff
	// Max Length: 350
	// Min Length: 1
	TariffName string `json:"TariffName,omitempty"`

	// TariffType which defines the fee and charges.
	// Enum: [TTEL TTMX TTOT]
	TariffType string `json:"TariffType,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherTariffType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTariffName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTariffType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) validateFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.FeeChargeCap); i++ {
		if swag.IsZero(m.FeeChargeCap[i]) { // not required
			continue
		}

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) validateFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("FeeChargeDetail", "body", m.FeeChargeDetail); err != nil {
		return err
	}

	iFeeChargeDetailSize := int64(len(m.FeeChargeDetail))

	if err := validate.MinItems("FeeChargeDetail", "body", iFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeChargeDetail); i++ {
		if swag.IsZero(m.FeeChargeDetail[i]) { // not required
			continue
		}

		if m.FeeChargeDetail[i] != nil {
			if err := m.FeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) validateOtherTariffType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherTariffType) { // not required
		return nil
	}

	if m.OtherTariffType != nil {
		if err := m.OtherTariffType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) validateTariffName(formats strfmt.Registry) error {
	if swag.IsZero(m.TariffName) { // not required
		return nil
	}

	if err := validate.MinLength("TariffName", "body", m.TariffName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("TariffName", "body", m.TariffName, 350); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TypeTariffTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TTEL","TTMX","TTOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TypeTariffTypePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TypeTariffTypePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TariffTypeTTEL captures enum value "TTEL"
	OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TariffTypeTTEL string = "TTEL"

	// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TariffTypeTTMX captures enum value "TTMX"
	OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TariffTypeTTMX string = "TTMX"

	// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TariffTypeTTOT captures enum value "TTOT"
	OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TariffTypeTTOT string = "TTOT"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) validateTariffTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0TypeTariffTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) validateTariffType(formats strfmt.Registry) error {
	if swag.IsZero(m.TariffType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTariffTypeEnum("TariffType", "body", m.TariffType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type other fees charges items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherTariffType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) contextValidateFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeCap); i++ {

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) contextValidateFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeDetail); i++ {

		if m.FeeChargeDetail[i] != nil {
			if err := m.FeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) contextValidateOtherTariffType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherTariffType != nil {
		if err := m.OtherTariffType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular or group of fee/charge
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBPeriod1Code `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount14 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number1 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0 fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FEPF","FTOT","FYAF","FYAM","FYAQ","FYCP","FYDB","FYMI","FYXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type other fees charges items0 fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0 fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type other fees charges items0 fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0 Other fees/charges details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0 struct {

	// application frequency
	// Required: true
	ApplicationFrequency *OBFeeFrequency1Code2 `json:"ApplicationFrequency"`

	// calculation frequency
	CalculationFrequency OBFeeFrequency1Code3 `json:"CalculationFrequency,omitempty"`

	// fee amount
	FeeAmount OBAmount13 `json:"FeeAmount,omitempty"`

	// fee applicable range
	FeeApplicableRange *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange `json:"FeeApplicableRange,omitempty"`

	// fee category
	// Required: true
	FeeCategory *OBFeeCategory1Code `json:"FeeCategory"`

	// fee charge cap
	FeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0 `json:"FeeChargeCap"`

	// fee rate
	FeeRate OBRate11 `json:"FeeRate,omitempty"`

	// fee rate type
	FeeRateType OBInterestRateType1Code1 `json:"FeeRateType,omitempty"`

	// fee type
	// Required: true
	FeeType *OBFeeType1Code `json:"FeeType"`

	// Fee/charge which is usually negotiable rather than a fixed amount
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBOtherCodeType16 `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBOtherCodeType17 `json:"OtherCalculationFrequency,omitempty"`

	// other fee category type
	OtherFeeCategoryType *OBOtherCodeType10 `json:"OtherFeeCategoryType,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBOtherCodeType18 `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBOtherFeeChargeDetailType `json:"OtherFeeType,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeApplicableRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeCategoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	if err := m.CalculationFrequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationFrequency")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := m.FeeAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateFeeApplicableRange(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeApplicableRange) { // not required
		return nil
	}

	if m.FeeApplicableRange != nil {
		if err := m.FeeApplicableRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeApplicableRange")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateFeeCategory(formats strfmt.Registry) error {

	if err := validate.Required("FeeCategory", "body", m.FeeCategory); err != nil {
		return err
	}

	if err := validate.Required("FeeCategory", "body", m.FeeCategory); err != nil {
		return err
	}

	if m.FeeCategory != nil {
		if err := m.FeeCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeCategory")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.FeeChargeCap); i++ {
		if swag.IsZero(m.FeeChargeCap[i]) { // not required
			continue
		}

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := m.FeeRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	if err := m.FeeRateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if m.FeeType != nil {
		if err := m.FeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateOtherFeeCategoryType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeCategoryType) { // not required
		return nil
	}

	if m.OtherFeeCategoryType != nil {
		if err := m.OtherFeeCategoryType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeCategoryType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeApplicableRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeCategoryType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CalculationFrequency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationFrequency")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeApplicableRange(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeApplicableRange != nil {
		if err := m.FeeApplicableRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeApplicableRange")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeCategory != nil {
		if err := m.FeeCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeCategory")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeChargeCap); i++ {

		if m.FeeChargeCap[i] != nil {
			if err := m.FeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRateType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeType != nil {
		if err := m.FeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherFeeCategoryType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeCategoryType != nil {
		if err := m.OtherFeeCategoryType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeCategoryType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange Range or amounts or rates for which the fee/charge applies
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange struct {

	// Maximum Amount on which fee is applicable (where it is expressed as an amount)
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	MaximumAmount string `json:"MaximumAmount,omitempty"`

	// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	MaximumRate string `json:"MaximumRate,omitempty"`

	// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	MinimumAmount string `json:"MinimumAmount,omitempty"`

	// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	MinimumRate string `json:"MinimumRate,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0 fee applicable range
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaximumAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMaximumAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MaximumAmount", "body", m.MaximumAmount, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMaximumRate(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MaximumRate", "body", m.MaximumRate, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMinimumAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumAmount) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MinimumAmount", "body", m.MinimumAmount, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) validateMinimumRate(formats strfmt.Registry) error {
	if swag.IsZero(m.MinimumRate) { // not required
		return nil
	}

	if err := validate.Pattern("FeeApplicableRange"+"."+"MinimumRate", "body", m.MinimumRate, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0 fee applicable range based on context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeApplicableRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular or group of fee/charge
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBPeriod1Code `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount14 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number1 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0 fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FEPF","FTOT","FYAF","FYAM","FYAQ","FYCP","FYDB","FYMI","FYXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0 fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0 fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type other fees charges items0 fee charge detail items0 fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0FeeChargeDetailItems0FeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType Other tariff type which is not in the standard list.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType
type OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type other fees charges items0 other tariff type
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherTariffType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherTariffType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("OtherTariffType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherTariffType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("OtherTariffType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type other fees charges items0 other tariff type based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherTariffType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherTariffType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOtherFeesChargesItems0OtherTariffType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraft Borrowing details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraft
type OBReadProduct2DataProductItems0OtherProductTypeOverdraft struct {

	// notes
	Notes []string `json:"Notes"`

	// overdraft tier band set
	// Required: true
	// Min Items: 1
	OverdraftTierBandSet []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0 `json:"OverdraftTierBandSet"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraft) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftTierBandSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraft) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("OtherProductType"+"."+"Overdraft"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("OtherProductType"+"."+"Overdraft"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraft) validateOverdraftTierBandSet(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Overdraft"+"."+"OverdraftTierBandSet", "body", m.OverdraftTierBandSet); err != nil {
		return err
	}

	iOverdraftTierBandSetSize := int64(len(m.OverdraftTierBandSet))

	if err := validate.MinItems("OtherProductType"+"."+"Overdraft"+"."+"OverdraftTierBandSet", "body", iOverdraftTierBandSetSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftTierBandSet); i++ {
		if swag.IsZero(m.OverdraftTierBandSet[i]) { // not required
			continue
		}

		if m.OverdraftTierBandSet[i] != nil {
			if err := m.OverdraftTierBandSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Overdraft" + "." + "OverdraftTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraft) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftTierBandSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraft) contextValidateOverdraftTierBandSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftTierBandSet); i++ {

		if m.OverdraftTierBandSet[i] != nil {
			if err := m.OverdraftTierBandSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Overdraft" + "." + "OverdraftTierBandSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraft) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraft) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraft
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0 Tier band set details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0 struct {

	// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
	AuthorisedIndicator bool `json:"AuthorisedIndicator,omitempty"`

	// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	BufferAmount string `json:"BufferAmount,omitempty"`

	// Unique and unambiguous identification of a  Tier Band for a overdraft product.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// overdraft fees charges
	OverdraftFeesCharges []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 `json:"OverdraftFeesCharges"`

	// overdraft tier band
	// Required: true
	// Min Items: 1
	OverdraftTierBand []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 `json:"OverdraftTierBand"`

	// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
	// Enum: [OVCO OVOD OVOT]
	OverdraftType string `json:"OverdraftType,omitempty"`

	// The methodology of how overdraft is charged. It can be:
	// 'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable).
	// 'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
	// 'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
	// Required: true
	// Enum: [INBA INTI INWH]
	TierBandMethod *string `json:"TierBandMethod"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBufferAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftTierBand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierBandMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateBufferAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.BufferAmount) { // not required
		return nil
	}

	if err := validate.Pattern("BufferAmount", "body", m.BufferAmount, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateOverdraftFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {
		if swag.IsZero(m.OverdraftFeesCharges[i]) { // not required
			continue
		}

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateOverdraftTierBand(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftTierBand", "body", m.OverdraftTierBand); err != nil {
		return err
	}

	iOverdraftTierBandSize := int64(len(m.OverdraftTierBand))

	if err := validate.MinItems("OverdraftTierBand", "body", iOverdraftTierBandSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftTierBand); i++ {
		if swag.IsZero(m.OverdraftTierBand[i]) { // not required
			continue
		}

		if m.OverdraftTierBand[i] != nil {
			if err := m.OverdraftTierBand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OVCO","OVOD","OVOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTypeOVCO captures enum value "OVCO"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTypeOVCO string = "OVCO"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTypeOVOD captures enum value "OVOD"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTypeOVOD string = "OVOD"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTypeOVOT captures enum value "OVOT"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTypeOVOT string = "OVOT"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateOverdraftTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeOverdraftTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateOverdraftType(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverdraftTypeEnum("OverdraftType", "body", m.OverdraftType); err != nil {
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INBA","INTI","INWH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TierBandMethodINBA captures enum value "INBA"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TierBandMethodINBA string = "INBA"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TierBandMethodINTI captures enum value "INTI"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TierBandMethodINTI string = "INTI"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TierBandMethodINWH captures enum value "INWH"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TierBandMethodINWH string = "INWH"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateTierBandMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0TypeTierBandMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) validateTierBandMethod(formats strfmt.Registry) error {

	if err := validate.Required("TierBandMethod", "body", m.TierBandMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateTierBandMethodEnum("TierBandMethod", "body", *m.TierBandMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftTierBand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) contextValidateOverdraftFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) contextValidateOverdraftTierBand(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftTierBand); i++ {

		if m.OverdraftTierBand[i] != nil {
			if err := m.OverdraftTierBand[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftTierBand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 Overdraft fees and charges details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0 struct {

	// overdraft fee charge cap
	OverdraftFeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`

	// overdraft fee charge detail
	// Required: true
	// Min Items: 1
	OverdraftFeeChargeDetail []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 `json:"OverdraftFeeChargeDetail"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeDetail", "body", m.OverdraftFeeChargeDetail); err != nil {
		return err
	}

	iOverdraftFeeChargeDetailSize := int64(len(m.OverdraftFeeChargeDetail))

	if err := validate.MinItems("OverdraftFeeChargeDetail", "body", iOverdraftFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {
		if swag.IsZero(m.OverdraftFeeChargeDetail[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBPeriod1Code `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount10 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number0 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FBAO","FBAR","FBEB","FBIT","FBOR","FBOS","FBSC","FBTO","FBUB","FBUT","FTOT","FTUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 Details about the fees/charges
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 struct {

	// application frequency
	// Required: true
	ApplicationFrequency *OBFeeFrequency1Code0 `json:"ApplicationFrequency"`

	// calculation frequency
	CalculationFrequency OBFeeFrequency1Code1 `json:"CalculationFrequency,omitempty"`

	// fee amount
	FeeAmount OBAmount12 `json:"FeeAmount,omitempty"`

	// fee rate
	FeeRate OBRate10 `json:"FeeRate,omitempty"`

	// fee rate type
	FeeRateType OBInterestRateType1Code0 `json:"FeeRateType,omitempty"`

	// fee type
	// Required: true
	FeeType *OBOverdraftFeeType1Code `json:"FeeType"`

	// incremental borrowing amount
	IncrementalBorrowingAmount OBAmount11 `json:"IncrementalBorrowingAmount,omitempty"`

	// Indicates whether fee and charges are negotiable
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBOtherCodeType11 `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBOtherCodeType12 `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBOtherCodeType14 `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBOtherCodeType13 `json:"OtherFeeType,omitempty"`

	// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`

	// overdraft fee charge cap
	OverdraftFeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBorrowingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	if err := m.CalculationFrequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationFrequency")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := m.FeeAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := m.FeeRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	if err := m.FeeRateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if m.FeeType != nil {
		if err := m.FeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateIncrementalBorrowingAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBorrowingAmount) { // not required
		return nil
	}

	if err := m.IncrementalBorrowingAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IncrementalBorrowingAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalBorrowingAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CalculationFrequency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationFrequency")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRateType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeType != nil {
		if err := m.FeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateIncrementalBorrowingAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IncrementalBorrowingAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IncrementalBorrowingAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBPeriod1Code `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount10 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number0 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FBAO","FBAR","FBEB","FBIT","FBOR","FBOS","FBSC","FBTO","FBUB","FBUT","FTOT","FTUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 Provides overdraft details for a specific tier or band
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0 struct {

	// Specifies the maximum length of a band for a fixed overdraft agreement
	AgreementLengthMax int64 `json:"AgreementLengthMax,omitempty"`

	// Specifies the minimum length of a band for a fixed overdraft agreement
	AgreementLengthMin int64 `json:"AgreementLengthMin,omitempty"`

	// Specifies the period of a fixed length overdraft agreement
	// Enum: [PACT PDAY PHYR PMTH PQTR PWEK PYER]
	AgreementPeriod string `json:"AgreementPeriod,omitempty"`

	// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
	BankGuaranteedIndicator bool `json:"BankGuaranteedIndicator,omitempty"`

	// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
	// used interchangeably), being the actual annual interest rate of an Overdraft.
	// Pattern: ^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$
	EAR string `json:"EAR,omitempty"`

	// Unique and unambiguous identification of a  Tier Band for a overdraft.
	// Max Length: 35
	// Min Length: 1
	Identification string `json:"Identification,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// overdraft fees charges
	OverdraftFeesCharges []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 `json:"OverdraftFeesCharges"`

	// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
	// Enum: [INBA INTI INWH]
	OverdraftInterestChargingCoverage string `json:"OverdraftInterestChargingCoverage,omitempty"`

	// Maximum value of Overdraft Tier/Band
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	TierValueMax string `json:"TierValueMax,omitempty"`

	// Minimum value of Overdraft Tier/Band
	// Required: true
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	TierValueMin *string `json:"TierValueMin"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreementPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEAR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeesCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftInterestChargingCoverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierValueMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PACT","PDAY","PHYR","PMTH","PQTR","PWEK","PYER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPACT captures enum value "PACT"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPACT string = "PACT"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPDAY captures enum value "PDAY"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPDAY string = "PDAY"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPHYR captures enum value "PHYR"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPHYR string = "PHYR"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPMTH captures enum value "PMTH"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPMTH string = "PMTH"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPQTR captures enum value "PQTR"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPQTR string = "PQTR"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPWEK captures enum value "PWEK"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPWEK string = "PWEK"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPYER captures enum value "PYER"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0AgreementPeriodPYER string = "PYER"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateAgreementPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeAgreementPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateAgreementPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.AgreementPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateAgreementPeriodEnum("AgreementPeriod", "body", m.AgreementPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateEAR(formats strfmt.Registry) error {
	if swag.IsZero(m.EAR) { // not required
		return nil
	}

	if err := validate.Pattern("EAR", "body", m.EAR, `^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("Identification", "body", m.Identification, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Identification", "body", m.Identification, 35); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftFeesCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeesCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {
		if swag.IsZero(m.OverdraftFeesCharges[i]) { // not required
			continue
		}

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INBA","INTI","INWH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageINBA captures enum value "INBA"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageINBA string = "INBA"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageINTI captures enum value "INTI"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageINTI string = "INTI"

	// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageINWH captures enum value "INWH"
	OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftInterestChargingCoverageINWH string = "INWH"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftInterestChargingCoverageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0TypeOverdraftInterestChargingCoveragePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateOverdraftInterestChargingCoverage(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftInterestChargingCoverage) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverdraftInterestChargingCoverageEnum("OverdraftInterestChargingCoverage", "body", m.OverdraftInterestChargingCoverage); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateTierValueMax(formats strfmt.Registry) error {
	if swag.IsZero(m.TierValueMax) { // not required
		return nil
	}

	if err := validate.Pattern("TierValueMax", "body", m.TierValueMax, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) validateTierValueMin(formats strfmt.Registry) error {

	if err := validate.Required("TierValueMin", "body", m.TierValueMin); err != nil {
		return err
	}

	if err := validate.Pattern("TierValueMin", "body", *m.TierValueMin, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeesCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) contextValidateOverdraftFeesCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeesCharges); i++ {

		if m.OverdraftFeesCharges[i] != nil {
			if err := m.OverdraftFeesCharges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeesCharges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 Overdraft fees and charges
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0 struct {

	// overdraft fee charge cap
	OverdraftFeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`

	// overdraft fee charge detail
	// Required: true
	// Min Items: 1
	OverdraftFeeChargeDetail []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 `json:"OverdraftFeeChargeDetail"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) validateOverdraftFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OverdraftFeeChargeDetail", "body", m.OverdraftFeeChargeDetail); err != nil {
		return err
	}

	iOverdraftFeeChargeDetailSize := int64(len(m.OverdraftFeeChargeDetail))

	if err := validate.MinItems("OverdraftFeeChargeDetail", "body", iOverdraftFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {
		if swag.IsZero(m.OverdraftFeeChargeDetail[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) contextValidateOverdraftFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeDetail); i++ {

		if m.OverdraftFeeChargeDetail[i] != nil {
			if err := m.OverdraftFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBPeriod1Code `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount10 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number0 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FBAO","FBAR","FBEB","FBIT","FBOR","FBOS","FBSC","FBTO","FBUB","FBUT","FTOT","FTUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 Details about the fees/charges
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0 struct {

	// application frequency
	// Required: true
	ApplicationFrequency *OBFeeFrequency1Code0 `json:"ApplicationFrequency"`

	// calculation frequency
	CalculationFrequency OBFeeFrequency1Code1 `json:"CalculationFrequency,omitempty"`

	// fee amount
	FeeAmount OBAmount12 `json:"FeeAmount,omitempty"`

	// fee rate
	FeeRate OBRate10 `json:"FeeRate,omitempty"`

	// fee rate type
	FeeRateType OBInterestRateType1Code0 `json:"FeeRateType,omitempty"`

	// fee type
	// Required: true
	FeeType *OBOverdraftFeeType1Code `json:"FeeType"`

	// incremental borrowing amount
	IncrementalBorrowingAmount OBAmount11 `json:"IncrementalBorrowingAmount,omitempty"`

	// Indicates whether fee and charges are negotiable
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBOtherCodeType11 `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBOtherCodeType12 `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBOtherCodeType14 `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBOtherCodeType13 `json:"OtherFeeType,omitempty"`

	// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
	OverdraftControlIndicator bool `json:"OverdraftControlIndicator,omitempty"`

	// overdraft fee charge cap
	OverdraftFeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 `json:"OverdraftFeeChargeCap"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBorrowingAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverdraftFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.CalculationFrequency) { // not required
		return nil
	}

	if err := m.CalculationFrequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationFrequency")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := m.FeeAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := m.FeeRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	if err := m.FeeRateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if m.FeeType != nil {
		if err := m.FeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateIncrementalBorrowingAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBorrowingAmount) { // not required
		return nil
	}

	if err := m.IncrementalBorrowingAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IncrementalBorrowingAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) validateOverdraftFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.OverdraftFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {
		if swag.IsZero(m.OverdraftFeeChargeCap[i]) { // not required
			continue
		}

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalBorrowingAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverdraftFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CalculationFrequency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CalculationFrequency")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRateType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeType != nil {
		if err := m.FeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateIncrementalBorrowingAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IncrementalBorrowingAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IncrementalBorrowingAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) contextValidateOverdraftFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OverdraftFeeChargeCap); i++ {

		if m.OverdraftFeeChargeCap[i] != nil {
			if err := m.OverdraftFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OverdraftFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBPeriod1Code `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount10 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number0 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FBAO","FBAR","FBEB","FBIT","FBOR","FBOS","FBSC","FBTO","FBUB","FBUT","FTOT","FTUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type overdraft overdraft tier band set items0 overdraft tier band items0 overdraft fees charges items0 overdraft fee charge detail items0 overdraft fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeOverdraftOverdraftTierBandSetItems0OverdraftTierBandItems0OverdraftFeesChargesItems0OverdraftFeeChargeDetailItems0OverdraftFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeProductDetails o b read product2 data product items0 other product type product details
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeProductDetails
type OBReadProduct2DataProductItems0OtherProductTypeProductDetails struct {

	// The length/duration of the fee free period
	FeeFreeLength int64 `json:"FeeFreeLength,omitempty"`

	// The unit of period (days, weeks, months etc.) of the promotional length
	// Enum: [PACT PDAY PHYR PMTH PQTR PWEK PYER]
	FeeFreeLengthPeriod string `json:"FeeFreeLengthPeriod,omitempty"`

	// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
	// Pattern: ^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$
	MonthlyMaximumCharge string `json:"MonthlyMaximumCharge,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other segment
	OtherSegment *OBOtherCodeType10 `json:"OtherSegment,omitempty"`

	// segment
	Segment []string `json:"Segment"`
}

// Validate validates this o b read product2 data product items0 other product type product details
func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeFreeLengthPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlyMaximumCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherSegment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeProductDetailsTypeFeeFreeLengthPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PACT","PDAY","PHYR","PMTH","PQTR","PWEK","PYER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeProductDetailsTypeFeeFreeLengthPeriodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeProductDetailsTypeFeeFreeLengthPeriodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPACT captures enum value "PACT"
	OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPACT string = "PACT"

	// OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPDAY captures enum value "PDAY"
	OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPDAY string = "PDAY"

	// OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPHYR captures enum value "PHYR"
	OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPHYR string = "PHYR"

	// OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPMTH captures enum value "PMTH"
	OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPMTH string = "PMTH"

	// OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPQTR captures enum value "PQTR"
	OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPQTR string = "PQTR"

	// OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPWEK captures enum value "PWEK"
	OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPWEK string = "PWEK"

	// OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPYER captures enum value "PYER"
	OBReadProduct2DataProductItems0OtherProductTypeProductDetailsFeeFreeLengthPeriodPYER string = "PYER"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) validateFeeFreeLengthPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeProductDetailsTypeFeeFreeLengthPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) validateFeeFreeLengthPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeFreeLengthPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateFeeFreeLengthPeriodEnum("OtherProductType"+"."+"ProductDetails"+"."+"FeeFreeLengthPeriod", "body", m.FeeFreeLengthPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) validateMonthlyMaximumCharge(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthlyMaximumCharge) { // not required
		return nil
	}

	if err := validate.Pattern("OtherProductType"+"."+"ProductDetails"+"."+"MonthlyMaximumCharge", "body", m.MonthlyMaximumCharge, `^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("OtherProductType"+"."+"ProductDetails"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("OtherProductType"+"."+"ProductDetails"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) validateOtherSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherSegment) { // not required
		return nil
	}

	if m.OtherSegment != nil {
		if err := m.OtherSegment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "ProductDetails" + "." + "OtherSegment")
			}
			return err
		}
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeProductDetailsSegmentItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GEAS","GEBA","GEBR","GEBU","GECI","GECS","GEFB","GEFG","GEG","GEGR","GEGS","GEOT","GEOV","GEPA","GEPR","GERE","GEST","GEYA","GEYO","PSCA","PSES","PSNC","PSNP","PSRG","PSSS","PSST","PSSW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeProductDetailsSegmentItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeProductDetailsSegmentItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) validateSegmentItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeProductDetailsSegmentItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) validateSegment(formats strfmt.Registry) error {
	if swag.IsZero(m.Segment) { // not required
		return nil
	}

	for i := 0; i < len(m.Segment); i++ {

		// value enum
		if err := m.validateSegmentItemsEnum("OtherProductType"+"."+"ProductDetails"+"."+"Segment"+"."+strconv.Itoa(i), "body", m.Segment[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type product details based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) contextValidateOtherSegment(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherSegment != nil {
		if err := m.OtherSegment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "ProductDetails" + "." + "OtherSegment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeProductDetails) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeProductDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepayment Repayment details of the Loan product
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepayment
type OBReadProduct2DataProductItems0OtherProductTypeRepayment struct {

	// The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
	// Enum: [RABD RABL RACI RAFC RAIO RALT USOT]
	AmountType string `json:"AmountType,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other amount type
	OtherAmountType *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType `json:"OtherAmountType,omitempty"`

	// other repayment frequency
	OtherRepaymentFrequency *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency `json:"OtherRepaymentFrequency,omitempty"`

	// other repayment type
	OtherRepaymentType *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType `json:"OtherRepaymentType,omitempty"`

	// repayment fee charges
	RepaymentFeeCharges *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges `json:"RepaymentFeeCharges,omitempty"`

	// Repayment frequency
	// Enum: [SMDA SMFL SMFO SMHY SMMO SMOT SMQU SMWE SMYE]
	RepaymentFrequency string `json:"RepaymentFrequency,omitempty"`

	// repayment holiday
	RepaymentHoliday []*OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0 `json:"RepaymentHoliday"`

	// Repayment type
	// Enum: [USBA USBU USCI USCS USER USFA USFB USFI USIO USOT USPF USRW USSL]
	RepaymentType string `json:"RepaymentType,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type repayment
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherAmountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherRepaymentFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherRepaymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepaymentFeeCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepaymentFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepaymentHoliday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepaymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeAmountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RABD","RABL","RACI","RAFC","RAIO","RALT","USOT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeAmountTypePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeAmountTypePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRABD captures enum value "RABD"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRABD string = "RABD"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRABL captures enum value "RABL"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRABL string = "RABL"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRACI captures enum value "RACI"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRACI string = "RACI"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRAFC captures enum value "RAFC"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRAFC string = "RAFC"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRAIO captures enum value "RAIO"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRAIO string = "RAIO"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRALT captures enum value "RALT"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeRALT string = "RALT"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeUSOT captures enum value "USOT"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentAmountTypeUSOT string = "USOT"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateAmountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeAmountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateAmountType(formats strfmt.Registry) error {
	if swag.IsZero(m.AmountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAmountTypeEnum("OtherProductType"+"."+"Repayment"+"."+"AmountType", "body", m.AmountType); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("OtherProductType"+"."+"Repayment"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("OtherProductType"+"."+"Repayment"+"."+"Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateOtherAmountType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherAmountType) { // not required
		return nil
	}

	if m.OtherAmountType != nil {
		if err := m.OtherAmountType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateOtherRepaymentFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherRepaymentFrequency) { // not required
		return nil
	}

	if m.OtherRepaymentFrequency != nil {
		if err := m.OtherRepaymentFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateOtherRepaymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherRepaymentType) { // not required
		return nil
	}

	if m.OtherRepaymentType != nil {
		if err := m.OtherRepaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateRepaymentFeeCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.RepaymentFeeCharges) { // not required
		return nil
	}

	if m.RepaymentFeeCharges != nil {
		if err := m.RepaymentFeeCharges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentFeeCharges")
			}
			return err
		}
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SMDA","SMFL","SMFO","SMHY","SMMO","SMOT","SMQU","SMWE","SMYE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentFrequencyPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentFrequencyPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMDA captures enum value "SMDA"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMDA string = "SMDA"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMFL captures enum value "SMFL"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMFL string = "SMFL"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMFO captures enum value "SMFO"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMFO string = "SMFO"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMHY captures enum value "SMHY"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMHY string = "SMHY"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMMO captures enum value "SMMO"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMMO string = "SMMO"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMOT captures enum value "SMOT"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMOT string = "SMOT"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMQU captures enum value "SMQU"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMQU string = "SMQU"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMWE captures enum value "SMWE"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMWE string = "SMWE"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMYE captures enum value "SMYE"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFrequencySMYE string = "SMYE"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateRepaymentFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateRepaymentFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.RepaymentFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateRepaymentFrequencyEnum("OtherProductType"+"."+"Repayment"+"."+"RepaymentFrequency", "body", m.RepaymentFrequency); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateRepaymentHoliday(formats strfmt.Registry) error {
	if swag.IsZero(m.RepaymentHoliday) { // not required
		return nil
	}

	for i := 0; i < len(m.RepaymentHoliday); i++ {
		if swag.IsZero(m.RepaymentHoliday[i]) { // not required
			continue
		}

		if m.RepaymentHoliday[i] != nil {
			if err := m.RepaymentHoliday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentHoliday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USBA","USBU","USCI","USCS","USER","USFA","USFB","USFI","USIO","USOT","USPF","USRW","USSL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentTypePropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentTypePropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSBA captures enum value "USBA"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSBA string = "USBA"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSBU captures enum value "USBU"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSBU string = "USBU"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSCI captures enum value "USCI"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSCI string = "USCI"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSCS captures enum value "USCS"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSCS string = "USCS"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSER captures enum value "USER"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSER string = "USER"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSFA captures enum value "USFA"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSFA string = "USFA"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSFB captures enum value "USFB"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSFB string = "USFB"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSFI captures enum value "USFI"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSFI string = "USFI"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSIO captures enum value "USIO"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSIO string = "USIO"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSOT captures enum value "USOT"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSOT string = "USOT"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSPF captures enum value "USPF"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSPF string = "USPF"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSRW captures enum value "USRW"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSRW string = "USRW"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSSL captures enum value "USSL"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentTypeUSSL string = "USSL"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateRepaymentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeRepaymentTypeRepaymentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) validateRepaymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.RepaymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRepaymentTypeEnum("OtherProductType"+"."+"Repayment"+"."+"RepaymentType", "body", m.RepaymentType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherAmountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherRepaymentFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherRepaymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepaymentFeeCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepaymentHoliday(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) contextValidateOtherAmountType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherAmountType != nil {
		if err := m.OtherAmountType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) contextValidateOtherRepaymentFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherRepaymentFrequency != nil {
		if err := m.OtherRepaymentFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) contextValidateOtherRepaymentType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherRepaymentType != nil {
		if err := m.OtherRepaymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) contextValidateRepaymentFeeCharges(ctx context.Context, formats strfmt.Registry) error {

	if m.RepaymentFeeCharges != nil {
		if err := m.RepaymentFeeCharges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentFeeCharges")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) contextValidateRepaymentHoliday(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RepaymentHoliday); i++ {

		if m.RepaymentHoliday[i] != nil {
			if err := m.RepaymentHoliday[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentHoliday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepayment) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType Other amount type which is not in the standard code list
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type repayment other amount type
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherAmountType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherAmountType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherAmountType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherAmountType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment other amount type based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherAmountType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherAmountType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency Other repayment frequency which is not in the standard code list
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type repayment other repayment frequency
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentFrequency"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentFrequency"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment other repayment frequency based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentFrequency" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentFrequency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType Other repayment type which is not in the standard code list
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type repayment other repayment type
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentType"+"."+"Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"OtherRepaymentType"+"."+"Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment other repayment type based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType" + "." + "Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType" + "." + "Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "OtherRepaymentType" + "." + "Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentOtherRepaymentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges struct {

	// repayment fee charge cap
	RepaymentFeeChargeCap []*OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0 `json:"RepaymentFeeChargeCap"`

	// repayment fee charge detail
	// Required: true
	// Min Items: 1
	RepaymentFeeChargeDetail []*OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0 `json:"RepaymentFeeChargeDetail"`
}

// Validate validates this o b read product2 data product items0 other product type repayment repayment fee charges
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepaymentFeeChargeCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepaymentFeeChargeDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) validateRepaymentFeeChargeCap(formats strfmt.Registry) error {
	if swag.IsZero(m.RepaymentFeeChargeCap) { // not required
		return nil
	}

	for i := 0; i < len(m.RepaymentFeeChargeCap); i++ {
		if swag.IsZero(m.RepaymentFeeChargeCap[i]) { // not required
			continue
		}

		if m.RepaymentFeeChargeCap[i] != nil {
			if err := m.RepaymentFeeChargeCap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentFeeCharges" + "." + "RepaymentFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) validateRepaymentFeeChargeDetail(formats strfmt.Registry) error {

	if err := validate.Required("OtherProductType"+"."+"Repayment"+"."+"RepaymentFeeCharges"+"."+"RepaymentFeeChargeDetail", "body", m.RepaymentFeeChargeDetail); err != nil {
		return err
	}

	iRepaymentFeeChargeDetailSize := int64(len(m.RepaymentFeeChargeDetail))

	if err := validate.MinItems("OtherProductType"+"."+"Repayment"+"."+"RepaymentFeeCharges"+"."+"RepaymentFeeChargeDetail", "body", iRepaymentFeeChargeDetailSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.RepaymentFeeChargeDetail); i++ {
		if swag.IsZero(m.RepaymentFeeChargeDetail[i]) { // not required
			continue
		}

		if m.RepaymentFeeChargeDetail[i] != nil {
			if err := m.RepaymentFeeChargeDetail[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentFeeCharges" + "." + "RepaymentFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment repayment fee charges based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRepaymentFeeChargeCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepaymentFeeChargeDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) contextValidateRepaymentFeeChargeCap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RepaymentFeeChargeCap); i++ {

		if m.RepaymentFeeChargeCap[i] != nil {
			if err := m.RepaymentFeeChargeCap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentFeeCharges" + "." + "RepaymentFeeChargeCap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) contextValidateRepaymentFeeChargeDetail(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RepaymentFeeChargeDetail); i++ {

		if m.RepaymentFeeChargeDetail[i] != nil {
			if err := m.RepaymentFeeChargeDetail[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherProductType" + "." + "Repayment" + "." + "RepaymentFeeCharges" + "." + "RepaymentFeeChargeDetail" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeCharges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0 RepaymentFeeChargeCap sets daily, weekly, monthly, yearly limits on the fees that are charged
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0 struct {

	// capping period
	CappingPeriod OBPeriod1Code `json:"CappingPeriod,omitempty"`

	// fee cap amount
	FeeCapAmount OBAmount14 `json:"FeeCapAmount,omitempty"`

	// fee cap occurrence
	FeeCapOccurrence Number1 `json:"FeeCapOccurrence,omitempty"`

	// fee type
	// Required: true
	// Min Items: 1
	FeeType []string `json:"FeeType"`

	// min max type
	// Required: true
	MinMaxType *OBMinMaxType1Code `json:"MinMaxType"`

	// notes
	Notes []string `json:"Notes"`

	// other fee type
	OtherFeeType []*OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0 `json:"OtherFeeType"`
}

// Validate validates this o b read product2 data product items0 other product type repayment repayment fee charges repayment fee charge cap items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCappingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeCapOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinMaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateCappingPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.CappingPeriod) { // not required
		return nil
	}

	if err := m.CappingPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateFeeCapAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapAmount) { // not required
		return nil
	}

	if err := m.FeeCapAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateFeeCapOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeCapOccurrence) { // not required
		return nil
	}

	if err := m.FeeCapOccurrence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0FeeTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FEPF","FTOT","FYAF","FYAM","FYAQ","FYCP","FYDB","FYMI","FYXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0FeeTypeItemsEnum = append(oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0FeeTypeItemsEnum, v)
	}
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateFeeTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0FeeTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	iFeeTypeSize := int64(len(m.FeeType))

	if err := validate.MinItems("FeeType", "body", iFeeTypeSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.FeeType); i++ {

		// value enum
		if err := m.validateFeeTypeItemsEnum("FeeType"+"."+strconv.Itoa(i), "body", m.FeeType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateMinMaxType(formats strfmt.Registry) error {

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if err := validate.Required("MinMaxType", "body", m.MinMaxType); err != nil {
		return err
	}

	if m.MinMaxType != nil {
		if err := m.MinMaxType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherFeeType); i++ {
		if swag.IsZero(m.OtherFeeType[i]) { // not required
			continue
		}

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment repayment fee charges repayment fee charge cap items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCappingPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeCapOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinMaxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) contextValidateCappingPeriod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CappingPeriod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CappingPeriod")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) contextValidateFeeCapAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) contextValidateFeeCapOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeCapOccurrence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeCapOccurrence")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) contextValidateMinMaxType(ctx context.Context, formats strfmt.Registry) error {

	if m.MinMaxType != nil {
		if err := m.MinMaxType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinMaxType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherFeeType); i++ {

		if m.OtherFeeType[i] != nil {
			if err := m.OtherFeeType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OtherFeeType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0 Other fee type code which is not available in the standard code set
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0 struct {

	// code
	Code OBCodeMnemonic `json:"Code,omitempty"`

	// description
	// Required: true
	Description *Description3 `json:"Description"`

	// name
	// Required: true
	Name *Name4 `json:"Name"`
}

// Validate validates this o b read product2 data product items0 other product type repayment repayment fee charges repayment fee charge cap items0 other fee type items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := m.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment repayment fee charges repayment fee charge cap items0 other fee type items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Code.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Code")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Description")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if m.Name != nil {
		if err := m.Name.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeCapItems0OtherFeeTypeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0 Details about specific fees/charges that are applied for repayment
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0 struct {

	// application frequency
	// Required: true
	ApplicationFrequency *OBFeeFrequency1Code2 `json:"ApplicationFrequency"`

	// calculation frequency
	// Required: true
	CalculationFrequency *OBFeeFrequency1Code3 `json:"CalculationFrequency"`

	// fee amount
	FeeAmount OBAmount13 `json:"FeeAmount,omitempty"`

	// fee rate
	FeeRate OBRate11 `json:"FeeRate,omitempty"`

	// fee rate type
	FeeRateType OBInterestRateType1Code1 `json:"FeeRateType,omitempty"`

	// fee type
	// Required: true
	FeeType *OBFeeType1Code `json:"FeeType"`

	// Fee/charge which is usually negotiable rather than a fixed amount
	NegotiableIndicator bool `json:"NegotiableIndicator,omitempty"`

	// notes
	Notes []string `json:"Notes"`

	// other application frequency
	OtherApplicationFrequency *OBOtherCodeType16 `json:"OtherApplicationFrequency,omitempty"`

	// other calculation frequency
	OtherCalculationFrequency *OBOtherCodeType17 `json:"OtherCalculationFrequency,omitempty"`

	// other fee rate type
	OtherFeeRateType *OBOtherCodeType18 `json:"OtherFeeRateType,omitempty"`

	// other fee type
	OtherFeeType *OBOtherFeeChargeDetailType `json:"OtherFeeType,omitempty"`
}

// Validate validates this o b read product2 data product items0 other product type repayment repayment fee charges repayment fee charge detail items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherApplicationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCalculationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherFeeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateApplicationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if err := validate.Required("ApplicationFrequency", "body", m.ApplicationFrequency); err != nil {
		return err
	}

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateCalculationFrequency(formats strfmt.Registry) error {

	if err := validate.Required("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	if err := validate.Required("CalculationFrequency", "body", m.CalculationFrequency); err != nil {
		return err
	}

	if m.CalculationFrequency != nil {
		if err := m.CalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if err := m.FeeAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateFeeRate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRate) { // not required
		return nil
	}

	if err := m.FeeRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeRateType) { // not required
		return nil
	}

	if err := m.FeeRateType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	if m.FeeType != nil {
		if err := m.FeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateOtherApplicationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherApplicationFrequency) { // not required
		return nil
	}

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateOtherCalculationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherCalculationFrequency) { // not required
		return nil
	}

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateOtherFeeRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeRateType) { // not required
		return nil
	}

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) validateOtherFeeType(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherFeeType) { // not required
		return nil
	}

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b read product2 data product items0 other product type repayment repayment fee charges repayment fee charge detail items0 based on the context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherApplicationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherCalculationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeRateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtherFeeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationFrequency != nil {
		if err := m.ApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.CalculationFrequency != nil {
		if err := m.CalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeAmount")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateFeeRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRate")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeRateType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeRateType")
		}
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeType != nil {
		if err := m.FeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateOtherApplicationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherApplicationFrequency != nil {
		if err := m.OtherApplicationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherApplicationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateOtherCalculationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherCalculationFrequency != nil {
		if err := m.OtherCalculationFrequency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherCalculationFrequency")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateOtherFeeRateType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeRateType != nil {
		if err := m.OtherFeeRateType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeRateType")
			}
			return err
		}
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) contextValidateOtherFeeType(ctx context.Context, formats strfmt.Registry) error {

	if m.OtherFeeType != nil {
		if err := m.OtherFeeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherFeeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentFeeChargesRepaymentFeeChargeDetailItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0 Details of capital repayment holiday if any
//
// swagger:model OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0
type OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0 struct {

	// The maximum length/duration of a Repayment Holiday
	MaxHolidayLength int64 `json:"MaxHolidayLength,omitempty"`

	// The unit of period (days, weeks, months etc.) of the repayment holiday
	// Enum: [PACT PDAY PHYR PMTH PQTR PWEK PYER]
	MaxHolidayPeriod string `json:"MaxHolidayPeriod,omitempty"`

	// notes
	Notes []string `json:"Notes"`
}

// Validate validates this o b read product2 data product items0 other product type repayment repayment holiday items0
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxHolidayPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0TypeMaxHolidayPeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PACT","PDAY","PHYR","PMTH","PQTR","PWEK","PYER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0TypeMaxHolidayPeriodPropEnum = append(oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0TypeMaxHolidayPeriodPropEnum, v)
	}
}

const (

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPACT captures enum value "PACT"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPACT string = "PACT"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPDAY captures enum value "PDAY"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPDAY string = "PDAY"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPHYR captures enum value "PHYR"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPHYR string = "PHYR"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPMTH captures enum value "PMTH"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPMTH string = "PMTH"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPQTR captures enum value "PQTR"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPQTR string = "PQTR"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPWEK captures enum value "PWEK"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPWEK string = "PWEK"

	// OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPYER captures enum value "PYER"
	OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0MaxHolidayPeriodPYER string = "PYER"
)

// prop value enum
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0) validateMaxHolidayPeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0TypeMaxHolidayPeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0) validateMaxHolidayPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxHolidayPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateMaxHolidayPeriodEnum("MaxHolidayPeriod", "body", m.MaxHolidayPeriod); err != nil {
		return err
	}

	return nil
}

func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0) validateNotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {

		if err := validate.MinLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("Notes"+"."+strconv.Itoa(i), "body", m.Notes[i], 2000); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this o b read product2 data product items0 other product type repayment repayment holiday items0 based on context it is used
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0) UnmarshalBinary(b []byte) error {
	var res OBReadProduct2DataProductItems0OtherProductTypeRepaymentRepaymentHolidayItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
