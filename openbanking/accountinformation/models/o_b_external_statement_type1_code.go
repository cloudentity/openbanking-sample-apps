// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OBExternalStatementType1Code Statement type, in a coded form.
//
// swagger:model OBExternalStatementType1Code
type OBExternalStatementType1Code string

const (

	// OBExternalStatementType1CodeAccountClosure captures enum value "AccountClosure"
	OBExternalStatementType1CodeAccountClosure OBExternalStatementType1Code = "AccountClosure"

	// OBExternalStatementType1CodeAccountOpening captures enum value "AccountOpening"
	OBExternalStatementType1CodeAccountOpening OBExternalStatementType1Code = "AccountOpening"

	// OBExternalStatementType1CodeAnnual captures enum value "Annual"
	OBExternalStatementType1CodeAnnual OBExternalStatementType1Code = "Annual"

	// OBExternalStatementType1CodeInterim captures enum value "Interim"
	OBExternalStatementType1CodeInterim OBExternalStatementType1Code = "Interim"

	// OBExternalStatementType1CodeRegularPeriodic captures enum value "RegularPeriodic"
	OBExternalStatementType1CodeRegularPeriodic OBExternalStatementType1Code = "RegularPeriodic"
)

// for schema
var oBExternalStatementType1CodeEnum []interface{}

func init() {
	var res []OBExternalStatementType1Code
	if err := json.Unmarshal([]byte(`["AccountClosure","AccountOpening","Annual","Interim","RegularPeriodic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBExternalStatementType1CodeEnum = append(oBExternalStatementType1CodeEnum, v)
	}
}

func (m OBExternalStatementType1Code) validateOBExternalStatementType1CodeEnum(path, location string, value OBExternalStatementType1Code) error {
	if err := validate.EnumCase(path, location, value, oBExternalStatementType1CodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this o b external statement type1 code
func (m OBExternalStatementType1Code) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOBExternalStatementType1CodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this o b external statement type1 code based on context it is used
func (m OBExternalStatementType1Code) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
