// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OBFeeType1Code Fee/Charge Type
//
// swagger:model OB_FeeType1Code
type OBFeeType1Code string

const (

	// OBFeeType1CodeFEPF captures enum value "FEPF"
	OBFeeType1CodeFEPF OBFeeType1Code = "FEPF"

	// OBFeeType1CodeFTOT captures enum value "FTOT"
	OBFeeType1CodeFTOT OBFeeType1Code = "FTOT"

	// OBFeeType1CodeFYAF captures enum value "FYAF"
	OBFeeType1CodeFYAF OBFeeType1Code = "FYAF"

	// OBFeeType1CodeFYAM captures enum value "FYAM"
	OBFeeType1CodeFYAM OBFeeType1Code = "FYAM"

	// OBFeeType1CodeFYAQ captures enum value "FYAQ"
	OBFeeType1CodeFYAQ OBFeeType1Code = "FYAQ"

	// OBFeeType1CodeFYCP captures enum value "FYCP"
	OBFeeType1CodeFYCP OBFeeType1Code = "FYCP"

	// OBFeeType1CodeFYDB captures enum value "FYDB"
	OBFeeType1CodeFYDB OBFeeType1Code = "FYDB"

	// OBFeeType1CodeFYMI captures enum value "FYMI"
	OBFeeType1CodeFYMI OBFeeType1Code = "FYMI"

	// OBFeeType1CodeFYXX captures enum value "FYXX"
	OBFeeType1CodeFYXX OBFeeType1Code = "FYXX"
)

// for schema
var oBFeeType1CodeEnum []interface{}

func init() {
	var res []OBFeeType1Code
	if err := json.Unmarshal([]byte(`["FEPF","FTOT","FYAF","FYAM","FYAQ","FYCP","FYDB","FYMI","FYXX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBFeeType1CodeEnum = append(oBFeeType1CodeEnum, v)
	}
}

func (m OBFeeType1Code) validateOBFeeType1CodeEnum(path, location string, value OBFeeType1Code) error {
	if err := validate.EnumCase(path, location, value, oBFeeType1CodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this o b fee type1 code
func (m OBFeeType1Code) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOBFeeType1CodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this o b fee type1 code based on context it is used
func (m OBFeeType1Code) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
